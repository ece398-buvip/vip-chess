
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000bd0  00000c64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800106  00800106  00000c6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b5a  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d78  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011a1  00000000  00000000  000037fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  000049a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c4  00000000  00000000  00004f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d6  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  000069ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 01 	call	0x272	; 0x272 <main>
  9e:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GetPortD>:
///////PORT D/////////


uint8_t GetPortD(void)
{
    return (PIND & MASK_PORTD);
  a6:	89 b1       	in	r24, 0x09	; 9
}
  a8:	8c 7f       	andi	r24, 0xFC	; 252
  aa:	08 95       	ret

000000ac <SetPortD>:

void SetPortD(uint8_t out)
{
    PORTD = (PORTD & ~MASK_PORTD) | ((out & MASK_PORTD));
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	93 70       	andi	r25, 0x03	; 3
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	89 2b       	or	r24, r25
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret

000000b8 <GetDDRD>:
}

uint8_t GetDDRD(void)
{
    return (DDRD & MASK_PORTD);
  b8:	8a b1       	in	r24, 0x0a	; 10
}
  ba:	8c 7f       	andi	r24, 0xFC	; 252
  bc:	08 95       	ret

000000be <SetDDRD>:

void SetDDRD(uint8_t direction)
{
    DDRD = (DDRD & ~MASK_PORTD) | (direction & MASK_PORTD);
  be:	9a b1       	in	r25, 0x0a	; 10
  c0:	93 70       	andi	r25, 0x03	; 3
  c2:	8c 7f       	andi	r24, 0xFC	; 252
  c4:	89 2b       	or	r24, r25
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <GetPortC>:
///////PORT C/////////


uint8_t GetPortC (void)
{
    return(PINC & MASK_PORTC);
  ca:	86 b1       	in	r24, 0x06	; 6
}
  cc:	8f 73       	andi	r24, 0x3F	; 63
  ce:	08 95       	ret

000000d0 <SetPortC>:

void SetPortC(uint8_t x)
{
    PORTC = (PORTC & ~MASK_PORTC) | (x & MASK_PORTC);
  d0:	98 b1       	in	r25, 0x08	; 8
  d2:	90 7c       	andi	r25, 0xC0	; 192
  d4:	8f 73       	andi	r24, 0x3F	; 63
  d6:	89 2b       	or	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
  da:	08 95       	ret

000000dc <GetDDRC>:
}

uint8_t GetDDRC(void)
{
    return(DDRC & MASK_PORTC);
  dc:	87 b1       	in	r24, 0x07	; 7
}
  de:	8f 73       	andi	r24, 0x3F	; 63
  e0:	08 95       	ret

000000e2 <SetDDRC>:

void SetDDRC(uint8_t direction)
{
    DDRC = (DDRC & ~MASK_PORTC) | (direction & MASK_PORTC);
  e2:	97 b1       	in	r25, 0x07	; 7
  e4:	90 7c       	andi	r25, 0xC0	; 192
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	89 2b       	or	r24, r25
  ea:	87 b9       	out	0x07, r24	; 7
  ec:	08 95       	ret

000000ee <GetPortB>:
///////PORT B/////////


uint8_t GetPortB (void)
{
    return(PINB & MASK_PORTB);
  ee:	83 b1       	in	r24, 0x03	; 3
}
  f0:	8f 73       	andi	r24, 0x3F	; 63
  f2:	08 95       	ret

000000f4 <SetPortB>:

void SetPortB(uint8_t x)
{
    PORTB = (PORTB & ~MASK_PORTB) | (x & MASK_PORTB);
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	90 7c       	andi	r25, 0xC0	; 192
  f8:	8f 73       	andi	r24, 0x3F	; 63
  fa:	89 2b       	or	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	08 95       	ret

00000100 <GetDDRB>:
}

uint8_t GetDDRB(void)
{
    return(DDRB & MASK_PORTB);
 100:	84 b1       	in	r24, 0x04	; 4
}
 102:	8f 73       	andi	r24, 0x3F	; 63
 104:	08 95       	ret

00000106 <SetDDRB>:

void SetDDRB(uint8_t direction)
{
    DDRB = (DDRB & ~MASK_PORTB) | (direction & MASK_PORTB);
 106:	94 b1       	in	r25, 0x04	; 4
 108:	90 7c       	andi	r25, 0xC0	; 192
 10a:	8f 73       	andi	r24, 0x3F	; 63
 10c:	89 2b       	or	r24, r25
 10e:	84 b9       	out	0x04, r24	; 4
 110:	08 95       	ret

00000112 <Timer1_initialize>:
#define xtal 16000000L

static void (*Timer1_Overflow_function)(void) = 0;

void Timer1_initialize ( uint32_t frequency, void (*handle_overflow)(void), uint8_t prescaler )
{
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	cf 93       	push	r28
 11c:	6b 01       	movw	r12, r22
 11e:	7c 01       	movw	r14, r24
 120:	c2 2f       	mov	r28, r18
                                      // -  1  8 64 256 1024
    const static uint8_t prescales[] = {0, 0, 3, 6, 8, 10};

    Timer1_Overflow_function = handle_overflow;
 122:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 126:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>

    TCNT1=0x00;
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    // set timer0 counter initial value to 0
    // (note: entirely redundant as it was never used before)

    OCR1A = ((uint32_t)(xtal)>>prescales[prescaler]) / frequency - 1;
 132:	e2 2f       	mov	r30, r18
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e0 50       	subi	r30, 0x00	; 0
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	94 e2       	ldi	r25, 0x24	; 36
 13e:	a4 ef       	ldi	r26, 0xF4	; 244
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	00 80       	ld	r0, Z
 148:	04 c0       	rjmp	.+8      	; 0x152 <Timer1_initialize+0x40>
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	77 95       	ror	r23
 150:	67 95       	ror	r22
 152:	0a 94       	dec	r0
 154:	d2 f7       	brpl	.-12     	; 0x14a <Timer1_initialize+0x38>
 156:	a7 01       	movw	r20, r14
 158:	96 01       	movw	r18, r12
 15a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__udivmodsi4>
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	31 09       	sbc	r19, r1
 162:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 166:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    TCCR1A = 0x00;
 16a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // AABBCCMM - lower two bits of 4-bit mode MMMM

    TCCR1B = 0x08 | (0x07 & prescaler);
 16e:	c7 70       	andi	r28, 0x07	; 7
 170:	c8 60       	ori	r28, 0x08	; 8
 172:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // ??-MMPPP - MM is upper two bits of mode MMMM, PPP is clock rescale
    // where PPP of 011 is clock rescale of 64
    // where MM MM is the Timer mode, we use 01 00 - CTC

    TIFR1  = 0;
 176:	16 ba       	out	0x16, r1	; 22
    // reset any pending Timer1 interrupts
    // (note: entirely redundant as none is pending - it was never used before)

    TIMSK1 = (1<<OCIE1A);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        //  ICIE1  - enable Timer1 capture interrupt
        //  OCIE1A - enable Timer1 match OCR1A match interrupt
        //  TOIE1  - enable Timer1 overflow interrupt
}
 17e:	cf 91       	pop	r28
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	08 95       	ret

0000018a <Timer1_shutdown>:

void Timer1_shutdown ()
{
    TIMSK1 &= ~(1<<TOIE1 | 1<<OCIE1A | 1<<OCIE1B | 1<<TOIE1);
 18a:	ef e6       	ldi	r30, 0x6F	; 111
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 7f       	andi	r24, 0xF8	; 248
 192:	80 83       	st	Z, r24
    // disable all Timer1 interrupts
    // which is the same effort as disabling just one interrupt but can be reused in other examples

    TCCR1A = 0;
 194:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0;
 198:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0;
 19c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    TIMSK1 = 0;
 1a0:	10 82       	st	Z, r1
    TIFR1  = 0;
 1a2:	16 ba       	out	0x16, r1	; 22
 1a4:	08 95       	ret

000001a6 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
 1c8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 1cc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 1d0:	09 95       	icall
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <uart0_initialize>:
#define xtal 16000000L

void uart0_initialize(uint16_t baud)
{
    // set up baud rate
    uint32_t temp = (xtal/16)/baud-1; // Note: UBRR can hold value 0..4095 (not up to 65535)
 1f4:	9c 01       	movw	r18, r24
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	60 e4       	ldi	r22, 0x40	; 64
 1fc:	72 e4       	ldi	r23, 0x42	; 66
 1fe:	8f e0       	ldi	r24, 0x0F	; 15
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__divmodsi4>
 206:	ba 01       	movw	r22, r20
 208:	a9 01       	movw	r20, r18
 20a:	41 50       	subi	r20, 0x01	; 1
 20c:	51 09       	sbc	r21, r1
 20e:	61 09       	sbc	r22, r1
 210:	71 09       	sbc	r23, r1
    UBRR0H = (temp >> 8) & 0x0F;
 212:	85 2f       	mov	r24, r21
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (temp & 0xFF);
 21a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

    // enable both sending and receiving
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 21e:	88 e1       	ldi	r24, 0x18	; 24
 220:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

    // Set frame format: 8 data bits, 2 stop bits, no parity
    UCSR0C = (3<<UCSZ00)|(1<<USBS0);
 224:	8e e0       	ldi	r24, 0x0E	; 14
 226:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 22a:	08 95       	ret

0000022c <CommandsInit>:
#include "commands.h"
#include "Bios/bios_uart0.h"


void CommandsInit() {
    uart0_initialize(uart_bps_9600);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	95 e2       	ldi	r25, 0x25	; 37
 230:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <uart0_initialize>
 234:	08 95       	ret

00000236 <LimitSwitchesInit>:

#include "limit_switches.h"


void LimitSwitchesInit() {
    SetDDRD(GetDDRD() & ~LS_ALL);
 236:	0e 94 5c 00 	call	0xb8	; 0xb8 <GetDDRD>
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	0e 94 5f 00 	call	0xbe	; 0xbe <SetDDRD>
    SetPortD(GetPortD() | LS_ALL);
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <GetPortD>
 244:	80 6f       	ori	r24, 0xF0	; 240
 246:	0e 94 56 00 	call	0xac	; 0xac <SetPortD>
 24a:	08 95       	ret

0000024c <CheckLimitSwitch>:
}

//returns whether or not a specific limit switch is activated
bool CheckLimitSwitch(uint8_t limit_switch) {
 24c:	cf 93       	push	r28
 24e:	c8 2f       	mov	r28, r24
    bool out = (bool)(~GetPortD() & limit_switch);
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <GetPortD>
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	c9 01       	movw	r24, r18
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	2c 2f       	mov	r18, r28
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	28 23       	and	r18, r24
 264:	39 23       	and	r19, r25
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	23 2b       	or	r18, r19
 26a:	09 f4       	brne	.+2      	; 0x26e <CheckLimitSwitch+0x22>
 26c:	80 e0       	ldi	r24, 0x00	; 0
    return out;
}
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <main>:
#define B_ALL   0b00001111

int main(void)
{

    sei();
 272:	78 94       	sei


    CommandsInit();
 274:	0e 94 16 01 	call	0x22c	; 0x22c <CommandsInit>

    StepperInit();
 278:	0e 94 93 02 	call	0x526	; 0x526 <StepperInit>
    SetDDRC(GetDDRC() & ~B_ALL);
 27c:	0e 94 6e 00 	call	0xdc	; 0xdc <GetDDRC>
 280:	80 7f       	andi	r24, 0xF0	; 240
 282:	0e 94 71 00 	call	0xe2	; 0xe2 <SetDDRC>
    SetPortC(GetPortC() | B_ALL);
 286:	0e 94 65 00 	call	0xca	; 0xca <GetPortC>
 28a:	8f 60       	ori	r24, 0x0F	; 15
 28c:	0e 94 68 00 	call	0xd0	; 0xd0 <SetPortC>
    zeroAll();
 290:	0e 94 b3 01 	call	0x366	; 0x366 <zeroAll>
//         _delay_ms(500);
//         MoveSteps(-500, 0);
//         _delay_ms(500);
//         MoveSteps(0, -500);

        moveToSpace(0, 0);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 30 02 	call	0x460	; 0x460 <moveToSpace>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	81 e1       	ldi	r24, 0x11	; 17
 2a0:	9a e7       	ldi	r25, 0x7A	; 122
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x30>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x3a>
 2ac:	00 00       	nop
        _delay_ms(2500);
        moveToSpace(3, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 30 02 	call	0x460	; 0x460 <moveToSpace>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	81 e1       	ldi	r24, 0x11	; 17
 2ba:	9a e7       	ldi	r25, 0x7A	; 122
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x4a>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x54>
 2c6:	00 00       	nop
        _delay_ms(2500);

        moveToSpace(0,3);
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 30 02 	call	0x460	; 0x460 <moveToSpace>
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	81 e1       	ldi	r24, 0x11	; 17
 2d4:	9a e7       	ldi	r25, 0x7A	; 122
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x64>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x6e>
 2e0:	00 00       	nop
        _delay_ms(2500);
        moveToSpace(7,7);
 2e2:	67 e0       	ldi	r22, 0x07	; 7
 2e4:	87 e0       	ldi	r24, 0x07	; 7
 2e6:	0e 94 30 02 	call	0x460	; 0x460 <moveToSpace>
 2ea:	2f ef       	ldi	r18, 0xFF	; 255
 2ec:	81 e1       	ldi	r24, 0x11	; 17
 2ee:	9a e7       	ldi	r25, 0x7A	; 122
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x7e>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x88>
 2fa:	00 00       	nop
 2fc:	cb cf       	rjmp	.-106    	; 0x294 <main+0x22>

000002fe <zeroX>:
    zeroX();
    zeroY();
}


void zeroX() {
 2fe:	cf 93       	push	r28
    bool hit_edge = false;
 300:	c0 e0       	ldi	r28, 0x00	; 0
    while(!hit_edge) {
 302:	0b c0       	rjmp	.+22     	; 0x31a <zeroX+0x1c>
        MoveSteps(-100, 0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	8c e9       	ldi	r24, 0x9C	; 156
 30a:	9f ef       	ldi	r25, 0xFF	; 255
 30c:	0e 94 a0 02 	call	0x540	; 0x540 <MoveSteps>
        if(CheckLimitSwitch(LS_NEG_X)) {
 310:	80 e1       	ldi	r24, 0x10	; 16
 312:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 316:	81 11       	cpse	r24, r1
            hit_edge = true;
 318:	c1 e0       	ldi	r28, 0x01	; 1
}


void zeroX() {
    bool hit_edge = false;
    while(!hit_edge) {
 31a:	cc 23       	and	r28, r28
 31c:	99 f3       	breq	.-26     	; 0x304 <zeroX+0x6>
        if(CheckLimitSwitch(LS_NEG_X)) {
            hit_edge = true;
        }
    }

    x_position = 0;
 31e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <x_position>
 322:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <x_position+0x1>
 326:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <x_position+0x2>
 32a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <x_position+0x3>

}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <zeroY>:

void zeroY() {
 332:	cf 93       	push	r28
    bool hit_edge = false;
 334:	c0 e0       	ldi	r28, 0x00	; 0
    while(!hit_edge) {
 336:	0b c0       	rjmp	.+22     	; 0x34e <zeroY+0x1c>
        MoveSteps(0, -100);
 338:	6c e9       	ldi	r22, 0x9C	; 156
 33a:	7f ef       	ldi	r23, 0xFF	; 255
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 a0 02 	call	0x540	; 0x540 <MoveSteps>
        if(CheckLimitSwitch(LS_NEG_Y)) {
 344:	80 e4       	ldi	r24, 0x40	; 64
 346:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 34a:	81 11       	cpse	r24, r1
            hit_edge = true;
 34c:	c1 e0       	ldi	r28, 0x01	; 1

}

void zeroY() {
    bool hit_edge = false;
    while(!hit_edge) {
 34e:	cc 23       	and	r28, r28
 350:	99 f3       	breq	.-26     	; 0x338 <zeroY+0x6>
        if(CheckLimitSwitch(LS_NEG_Y)) {
            hit_edge = true;
        }
    }

    y_position = 0;
 352:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <y_position>
 356:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <y_position+0x1>
 35a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <y_position+0x2>
 35e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <y_position+0x3>

}
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <zeroAll>:
float x_position = 0;
float y_position = 0;


void zeroAll() {
    zeroX();
 366:	0e 94 7f 01 	call	0x2fe	; 0x2fe <zeroX>
    zeroY();
 36a:	0e 94 99 01 	call	0x332	; 0x332 <zeroY>
 36e:	08 95       	ret

00000370 <setPosition>:
}



//Set position of electromagnet in cm x and y
void setPosition(float x, float y) {
 370:	4f 92       	push	r4
 372:	5f 92       	push	r5
 374:	6f 92       	push	r6
 376:	7f 92       	push	r7
 378:	8f 92       	push	r8
 37a:	9f 92       	push	r9
 37c:	af 92       	push	r10
 37e:	bf 92       	push	r11
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	69 01       	movw	r12, r18
 38a:	7a 01       	movw	r14, r20
    float delta_x = x - x_position;
 38c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <x_position>
 390:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <x_position+0x1>
 394:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <x_position+0x2>
 398:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <x_position+0x3>
 39c:	0e 94 95 03 	call	0x72a	; 0x72a <__subsf3>
 3a0:	4b 01       	movw	r8, r22
 3a2:	5c 01       	movw	r10, r24
    float delta_y = y - y_position;
 3a4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <y_position>
 3a8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <y_position+0x1>
 3ac:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <y_position+0x2>
 3b0:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <y_position+0x3>
 3b4:	c7 01       	movw	r24, r14
 3b6:	b6 01       	movw	r22, r12
 3b8:	0e 94 95 03 	call	0x72a	; 0x72a <__subsf3>
 3bc:	6b 01       	movw	r12, r22
 3be:	7c 01       	movw	r14, r24

    int steps_x = (int)(delta_x / X_STEPS_TO_CM);
 3c0:	24 ee       	ldi	r18, 0xE4	; 228
 3c2:	36 e5       	ldi	r19, 0x56	; 86
 3c4:	47 ef       	ldi	r20, 0xF7	; 247
 3c6:	5b e3       	ldi	r21, 0x3B	; 59
 3c8:	c5 01       	movw	r24, r10
 3ca:	b4 01       	movw	r22, r8
 3cc:	0e 94 02 04 	call	0x804	; 0x804 <__divsf3>
 3d0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixsfsi>
 3d4:	2b 01       	movw	r4, r22
 3d6:	3c 01       	movw	r6, r24
    int steps_y = (int)(delta_y / Y_STEPS_TO_CM);
 3d8:	26 e1       	ldi	r18, 0x16	; 22
 3da:	3e ed       	ldi	r19, 0xDE	; 222
 3dc:	45 ee       	ldi	r20, 0xE5	; 229
 3de:	5b e3       	ldi	r21, 0x3B	; 59
 3e0:	c7 01       	movw	r24, r14
 3e2:	b6 01       	movw	r22, r12
 3e4:	0e 94 02 04 	call	0x804	; 0x804 <__divsf3>
 3e8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__fixsfsi>

    bool succeeded = MoveSteps(steps_x, steps_y);
 3ec:	c2 01       	movw	r24, r4
 3ee:	0e 94 a0 02 	call	0x540	; 0x540 <MoveSteps>
    if(succeeded) {
 3f2:	88 23       	and	r24, r24
 3f4:	41 f1       	breq	.+80     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
        x_position += delta_x;
 3f6:	a5 01       	movw	r20, r10
 3f8:	94 01       	movw	r18, r8
 3fa:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <x_position>
 3fe:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <x_position+0x1>
 402:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <x_position+0x2>
 406:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <x_position+0x3>
 40a:	0e 94 96 03 	call	0x72c	; 0x72c <__addsf3>
 40e:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <x_position>
 412:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <x_position+0x1>
 416:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <x_position+0x2>
 41a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <x_position+0x3>
        y_position += delta_y;
 41e:	a7 01       	movw	r20, r14
 420:	96 01       	movw	r18, r12
 422:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <y_position>
 426:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <y_position+0x1>
 42a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <y_position+0x2>
 42e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <y_position+0x3>
 432:	0e 94 96 03 	call	0x72c	; 0x72c <__addsf3>
 436:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <y_position>
 43a:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <y_position+0x1>
 43e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <y_position+0x2>
 442:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <y_position+0x3>
    }

}
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	bf 90       	pop	r11
 450:	af 90       	pop	r10
 452:	9f 90       	pop	r9
 454:	8f 90       	pop	r8
 456:	7f 90       	pop	r7
 458:	6f 90       	pop	r6
 45a:	5f 90       	pop	r5
 45c:	4f 90       	pop	r4
 45e:	08 95       	ret

00000460 <moveToSpace>:
#define BOARD_ORIGIN_Y 15

#define SPACE_WIDTH 5.875


void moveToSpace(uint8_t x, uint8_t y) {
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	cf 93       	push	r28
 46a:	c6 2f       	mov	r28, r22
    float x_cm = BOARD_ORIGIN_X + SPACE_WIDTH * x;
 46c:	68 2f       	mov	r22, r24
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 ac 04 	call	0x958	; 0x958 <__floatsisf>
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	4c eb       	ldi	r20, 0xBC	; 188
 47e:	50 e4       	ldi	r21, 0x40	; 64
 480:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e8       	ldi	r20, 0x80	; 128
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	0e 94 96 03 	call	0x72c	; 0x72c <__addsf3>
 490:	6b 01       	movw	r12, r22
 492:	7c 01       	movw	r14, r24
    float y_cm = BOARD_ORIGIN_X + SPACE_WIDTH * y;
 494:	6c 2f       	mov	r22, r28
 496:	70 e0       	ldi	r23, 0x00	; 0
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 ac 04 	call	0x958	; 0x958 <__floatsisf>
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	4c eb       	ldi	r20, 0xBC	; 188
 4a6:	50 e4       	ldi	r21, 0x40	; 64
 4a8:	0e 94 38 05 	call	0xa70	; 0xa70 <__mulsf3>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	40 e8       	ldi	r20, 0x80	; 128
 4b2:	5f e3       	ldi	r21, 0x3F	; 63
 4b4:	0e 94 96 03 	call	0x72c	; 0x72c <__addsf3>
 4b8:	9b 01       	movw	r18, r22
 4ba:	ac 01       	movw	r20, r24
    setPosition(x_cm, y_cm);
 4bc:	c7 01       	movw	r24, r14
 4be:	b6 01       	movw	r22, r12
 4c0:	0e 94 b8 01 	call	0x370	; 0x370 <setPosition>
 4c4:	cf 91       	pop	r28
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	df 90       	pop	r13
 4cc:	cf 90       	pop	r12
 4ce:	08 95       	ret

000004d0 <PulseFn>:
void PulseFn(void) {

    static uint16_t cnt = 0;

    //increment count if still under the max value, otherwise reset
    if(cnt<pwm_res) cnt++;
 4d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt.1949>
 4d4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cnt.1949+0x1>
 4d8:	8a 30       	cpi	r24, 0x0A	; 10
 4da:	91 05       	cpc	r25, r1
 4dc:	30 f4       	brcc	.+12     	; 0x4ea <PulseFn+0x1a>
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cnt.1949+0x1>
 4e4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt.1949>
 4e8:	07 c0       	rjmp	.+14     	; 0x4f8 <PulseFn+0x28>
    else {
        cnt = 0;
 4ea:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cnt.1949+0x1>
 4ee:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt.1949>
        semaphore = 1;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <semaphore>
    }

    //generates the pulse for the percentage of the duty cycle
    if(duty_cycle>cnt) {
 4f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt.1949>
 4fc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cnt.1949+0x1>
 500:	05 97       	sbiw	r24, 0x05	; 5
 502:	40 f4       	brcc	.+16     	; 0x514 <PulseFn+0x44>
        SetPortB(GetPortB() | active_steppers);
 504:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 508:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <active_steppers>
 50c:	89 2b       	or	r24, r25
 50e:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 512:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~active_steppers);
 514:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 518:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <active_steppers>
 51c:	90 95       	com	r25
 51e:	89 23       	and	r24, r25
 520:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 524:	08 95       	ret

00000526 <StepperInit>:
}

//sets up the stepper motor pins as outputs
void StepperInit(void)
{
    LimitSwitchesInit();
 526:	0e 94 1b 01 	call	0x236	; 0x236 <LimitSwitchesInit>
    SetDDRB(GetDDRB() | (STEP_X | STEP_Y) | (DIR_X | DIR_Y));
 52a:	0e 94 80 00 	call	0x100	; 0x100 <GetDDRB>
 52e:	8f 60       	ori	r24, 0x0F	; 15
 530:	0e 94 83 00 	call	0x106	; 0x106 <SetDDRB>
    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
 534:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 538:	80 7f       	andi	r24, 0xF0	; 240
 53a:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 53e:	08 95       	ret

00000540 <MoveSteps>:




//Moves both stepper motors the specified number of steps
bool MoveSteps(int steps_x, int steps_y) {
 540:	cf 92       	push	r12
 542:	df 92       	push	r13
 544:	ef 92       	push	r14
 546:	ff 92       	push	r15
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29

    if(steps_x == 0 && steps_y == 0) {
 550:	00 97       	sbiw	r24, 0x00	; 0
 552:	21 f4       	brne	.+8      	; 0x55c <MoveSteps+0x1c>
 554:	61 15       	cp	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	09 f4       	brne	.+2      	; 0x55c <MoveSteps+0x1c>
 55a:	d5 c0       	rjmp	.+426    	; 0x706 <MoveSteps+0x1c6>
        return true;
    }

    //used to decide which steppers to pulse
    active_steppers = 0;
 55c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <active_steppers>

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;

    //set x axis active and direction
    if(steps_x != 0) {
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	51 f0       	breq	.+20     	; 0x578 <MoveSteps+0x38>
        active_steppers |= STEP_X;
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <active_steppers>
        if(steps_x < 0) {
 56a:	99 23       	and	r25, r25
 56c:	54 f0       	brlt	.+20     	; 0x582 <MoveSteps+0x42>

    //used to decide which steppers to pulse
    active_steppers = 0;

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;
 56e:	0f 2e       	mov	r0, r31
 570:	fa e0       	ldi	r31, 0x0A	; 10
 572:	ff 2e       	mov	r15, r31
 574:	f0 2d       	mov	r31, r0
 576:	08 c0       	rjmp	.+16     	; 0x588 <MoveSteps+0x48>
 578:	0f 2e       	mov	r0, r31
 57a:	fa e0       	ldi	r31, 0x0A	; 10
 57c:	ff 2e       	mov	r15, r31
 57e:	f0 2d       	mov	r31, r0
 580:	03 c0       	rjmp	.+6      	; 0x588 <MoveSteps+0x48>

    //set x axis active and direction
    if(steps_x != 0) {
        active_steppers |= STEP_X;
        if(steps_x < 0) {
            direction &= ~DIR_X;
 582:	68 94       	set
 584:	ff 24       	eor	r15, r15
 586:	f3 f8       	bld	r15, 3
        }
    }

    //set y axis active and direction
    if(steps_y != 0) {
 588:	61 15       	cp	r22, r1
 58a:	71 05       	cpc	r23, r1
 58c:	51 f0       	breq	.+20     	; 0x5a2 <MoveSteps+0x62>
        active_steppers |= STEP_Y;
 58e:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <active_steppers>
 592:	24 60       	ori	r18, 0x04	; 4
 594:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <active_steppers>
        if(steps_y < 0) {
 598:	77 23       	and	r23, r23
 59a:	1c f4       	brge	.+6      	; 0x5a2 <MoveSteps+0x62>
            direction &= ~DIR_Y;
 59c:	2f 2d       	mov	r18, r15
 59e:	27 7f       	andi	r18, 0xF7	; 247
 5a0:	f2 2e       	mov	r15, r18
 5a2:	6b 01       	movw	r12, r22
 5a4:	ec 01       	movw	r28, r24
    //dtostrf((float)steps_x, 5, 3, buffer);
    //uart0_puts(buffer);
    //uart0_puts("\t\n");


    if(CheckLimitSwitch(LS_NEG_X)) {
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 5ac:	88 23       	and	r24, r24
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <MoveSteps+0x76>
        if(steps_x < 0) {
 5b0:	dd 23       	and	r29, r29
 5b2:	0c f4       	brge	.+2      	; 0x5b6 <MoveSteps+0x76>
 5b4:	aa c0       	rjmp	.+340    	; 0x70a <MoveSteps+0x1ca>
            return false;
        }
    }
    if (CheckLimitSwitch(LS_POS_X)) {
 5b6:	80 e2       	ldi	r24, 0x20	; 32
 5b8:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 5bc:	88 23       	and	r24, r24
 5be:	21 f0       	breq	.+8      	; 0x5c8 <MoveSteps+0x88>
        if(steps_x > 0) {
 5c0:	1c 16       	cp	r1, r28
 5c2:	1d 06       	cpc	r1, r29
 5c4:	0c f4       	brge	.+2      	; 0x5c8 <MoveSteps+0x88>
 5c6:	a3 c0       	rjmp	.+326    	; 0x70e <MoveSteps+0x1ce>
            return false;
        }
    }

    if(CheckLimitSwitch(LS_NEG_Y)) {
 5c8:	80 e4       	ldi	r24, 0x40	; 64
 5ca:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 5ce:	88 23       	and	r24, r24
 5d0:	19 f0       	breq	.+6      	; 0x5d8 <MoveSteps+0x98>
        if(steps_y < 0) {
 5d2:	dd 20       	and	r13, r13
 5d4:	0c f4       	brge	.+2      	; 0x5d8 <MoveSteps+0x98>
 5d6:	9d c0       	rjmp	.+314    	; 0x712 <MoveSteps+0x1d2>
            return false;
        }
    }
    if (CheckLimitSwitch(LS_POS_Y)) {
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 5de:	88 23       	and	r24, r24
 5e0:	21 f0       	breq	.+8      	; 0x5ea <MoveSteps+0xaa>
        if(steps_y > 0) {
 5e2:	1c 14       	cp	r1, r12
 5e4:	1d 04       	cpc	r1, r13
 5e6:	0c f4       	brge	.+2      	; 0x5ea <MoveSteps+0xaa>
 5e8:	96 c0       	rjmp	.+300    	; 0x716 <MoveSteps+0x1d6>
    }




    steps_x = abs(steps_x);
 5ea:	8e 01       	movw	r16, r28
 5ec:	dd 23       	and	r29, r29
 5ee:	24 f4       	brge	.+8      	; 0x5f8 <MoveSteps+0xb8>
 5f0:	00 27       	eor	r16, r16
 5f2:	11 27       	eor	r17, r17
 5f4:	0c 1b       	sub	r16, r28
 5f6:	1d 0b       	sbc	r17, r29
    steps_y = abs(steps_y);
 5f8:	e6 01       	movw	r28, r12
 5fa:	dd 23       	and	r29, r29
 5fc:	24 f4       	brge	.+8      	; 0x606 <MoveSteps+0xc6>
 5fe:	cc 27       	eor	r28, r28
 600:	dd 27       	eor	r29, r29
 602:	cc 19       	sub	r28, r12
 604:	dd 09       	sbc	r29, r13



    if(active_steppers) {
 606:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <active_steppers>
 60a:	88 23       	and	r24, r24
 60c:	31 f0       	breq	.+12     	; 0x61a <MoveSteps+0xda>
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
 60e:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 612:	85 7f       	andi	r24, 0xF5	; 245
 614:	8f 29       	or	r24, r15
 616:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
 61a:	24 e0       	ldi	r18, 0x04	; 4
 61c:	48 e6       	ldi	r20, 0x68	; 104
 61e:	52 e0       	ldi	r21, 0x02	; 2
 620:	68 ef       	ldi	r22, 0xF8	; 248
 622:	7a e2       	ldi	r23, 0x2A	; 42
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 89 00 	call	0x112	; 0x112 <Timer1_initialize>
    bool limitSwitchHitX = false;
    bool limitSwitchHitY = false;
 62c:	d1 2c       	mov	r13, r1
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
    bool limitSwitchHitX = false;
 62e:	e1 2c       	mov	r14, r1
    bool limitSwitchHitY = false;
    while(1) {
        while(semaphore == 0);
 630:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <semaphore>
 634:	88 23       	and	r24, r24
 636:	e1 f3       	breq	.-8      	; 0x630 <MoveSteps+0xf0>
        semaphore = 0;
 638:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <semaphore>

        //keeps track of steps and deactivates stepper when number of steps is complete


        if(CheckLimitSwitch(LS_NEG_X)) {
 63c:	80 e1       	ldi	r24, 0x10	; 16
 63e:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 642:	88 23       	and	r24, r24
 644:	21 f0       	breq	.+8      	; 0x64e <MoveSteps+0x10e>
            if(!(direction & DIR_X)) {
 646:	f1 fc       	sbrc	r15, 1
 648:	02 c0       	rjmp	.+4      	; 0x64e <MoveSteps+0x10e>
                limitSwitchHitX = true;
 64a:	ee 24       	eor	r14, r14
 64c:	e3 94       	inc	r14
            }
        }
        if (CheckLimitSwitch(LS_POS_X)) {
 64e:	80 e2       	ldi	r24, 0x20	; 32
 650:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 654:	88 23       	and	r24, r24
 656:	21 f0       	breq	.+8      	; 0x660 <MoveSteps+0x120>
            if((direction & DIR_X)) {
 658:	f1 fe       	sbrs	r15, 1
 65a:	02 c0       	rjmp	.+4      	; 0x660 <MoveSteps+0x120>
                limitSwitchHitX = true;
 65c:	ee 24       	eor	r14, r14
 65e:	e3 94       	inc	r14
            }
        }

        if(CheckLimitSwitch(LS_NEG_Y)) {
 660:	80 e4       	ldi	r24, 0x40	; 64
 662:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 666:	88 23       	and	r24, r24
 668:	21 f0       	breq	.+8      	; 0x672 <MoveSteps+0x132>
            if(!(direction & DIR_Y)) {
 66a:	f3 fc       	sbrc	r15, 3
 66c:	02 c0       	rjmp	.+4      	; 0x672 <MoveSteps+0x132>
                limitSwitchHitY = true;
 66e:	dd 24       	eor	r13, r13
 670:	d3 94       	inc	r13
            }
        }
        if (CheckLimitSwitch(LS_POS_Y)) {
 672:	80 e8       	ldi	r24, 0x80	; 128
 674:	0e 94 26 01 	call	0x24c	; 0x24c <CheckLimitSwitch>
 678:	88 23       	and	r24, r24
 67a:	21 f0       	breq	.+8      	; 0x684 <MoveSteps+0x144>
            if(direction & DIR_Y) {
 67c:	f3 fe       	sbrs	r15, 3
 67e:	02 c0       	rjmp	.+4      	; 0x684 <MoveSteps+0x144>
                limitSwitchHitY = true;
 680:	dd 24       	eor	r13, r13
 682:	d3 94       	inc	r13
            }
        }



        if(limitSwitchHitX) {
 684:	ee 20       	and	r14, r14
 686:	69 f0       	breq	.+26     	; 0x6a2 <MoveSteps+0x162>
            steps_x = 0;
            if(steps_y == 0) {
 688:	20 97       	sbiw	r28, 0x00	; 0
 68a:	49 f4       	brne	.+18     	; 0x69e <MoveSteps+0x15e>
                SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 68c:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 690:	8a 7f       	andi	r24, 0xFA	; 250
 692:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
                Timer1_shutdown();
 696:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer1_shutdown>
                return false;
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	3d c0       	rjmp	.+122    	; 0x718 <MoveSteps+0x1d8>
        }



        if(limitSwitchHitX) {
            steps_x = 0;
 69e:	00 e0       	ldi	r16, 0x00	; 0
 6a0:	10 e0       	ldi	r17, 0x00	; 0
                Timer1_shutdown();
                return false;
            }
        }

        if(limitSwitchHitY) {
 6a2:	dd 20       	and	r13, r13
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <MoveSteps+0x182>
            steps_y = 0;
            if(steps_x == 0) {
 6a6:	01 15       	cp	r16, r1
 6a8:	11 05       	cpc	r17, r1
 6aa:	49 f4       	brne	.+18     	; 0x6be <MoveSteps+0x17e>
                SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 6ac:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 6b0:	8a 7f       	andi	r24, 0xFA	; 250
 6b2:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
                Timer1_shutdown();
 6b6:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer1_shutdown>
                return false;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	2d c0       	rjmp	.+90     	; 0x718 <MoveSteps+0x1d8>
                return false;
            }
        }

        if(limitSwitchHitY) {
            steps_y = 0;
 6be:	c0 e0       	ldi	r28, 0x00	; 0
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
        }




        if(steps_x > 0) {
 6c2:	10 16       	cp	r1, r16
 6c4:	11 06       	cpc	r1, r17
 6c6:	1c f4       	brge	.+6      	; 0x6ce <MoveSteps+0x18e>
            steps_x--;
 6c8:	01 50       	subi	r16, 0x01	; 1
 6ca:	11 09       	sbc	r17, r1
 6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <MoveSteps+0x198>
        } else {
            active_steppers &= ~STEP_X;
 6ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <active_steppers>
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <active_steppers>
        }


        if(steps_y > 0) {
 6d8:	1c 16       	cp	r1, r28
 6da:	1d 06       	cpc	r1, r29
 6dc:	14 f4       	brge	.+4      	; 0x6e2 <MoveSteps+0x1a2>
            steps_y--;
 6de:	21 97       	sbiw	r28, 0x01	; 1
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <MoveSteps+0x1ac>
        } else {
            active_steppers &= ~STEP_Y;
 6e2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <active_steppers>
 6e6:	8b 7f       	andi	r24, 0xFB	; 251
 6e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <active_steppers>
        }

        //If both steppers are no longer active, job is done so exit
        if(active_steppers == 0) {
 6ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <active_steppers>
 6f0:	81 11       	cpse	r24, r1
 6f2:	9e cf       	rjmp	.-196    	; 0x630 <MoveSteps+0xf0>
            break;
        }
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 6f4:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 6f8:	8a 7f       	andi	r24, 0xFA	; 250
 6fa:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
    Timer1_shutdown();
 6fe:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer1_shutdown>
    return true;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	09 c0       	rjmp	.+18     	; 0x718 <MoveSteps+0x1d8>

//Moves both stepper motors the specified number of steps
bool MoveSteps(int steps_x, int steps_y) {

    if(steps_x == 0 && steps_y == 0) {
        return true;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	07 c0       	rjmp	.+14     	; 0x718 <MoveSteps+0x1d8>
    //uart0_puts("\t\n");


    if(CheckLimitSwitch(LS_NEG_X)) {
        if(steps_x < 0) {
            return false;
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	05 c0       	rjmp	.+10     	; 0x718 <MoveSteps+0x1d8>
        }
    }
    if (CheckLimitSwitch(LS_POS_X)) {
        if(steps_x > 0) {
            return false;
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	03 c0       	rjmp	.+6      	; 0x718 <MoveSteps+0x1d8>
        }
    }

    if(CheckLimitSwitch(LS_NEG_Y)) {
        if(steps_y < 0) {
            return false;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	01 c0       	rjmp	.+2      	; 0x718 <MoveSteps+0x1d8>
        }
    }
    if (CheckLimitSwitch(LS_POS_Y)) {
        if(steps_y > 0) {
            return false;
 716:	80 e0       	ldi	r24, 0x00	; 0
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
    Timer1_shutdown();
    return true;
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	ff 90       	pop	r15
 722:	ef 90       	pop	r14
 724:	df 90       	pop	r13
 726:	cf 90       	pop	r12
 728:	08 95       	ret

0000072a <__subsf3>:
 72a:	50 58       	subi	r21, 0x80	; 128

0000072c <__addsf3>:
 72c:	bb 27       	eor	r27, r27
 72e:	aa 27       	eor	r26, r26
 730:	0e 94 ad 03 	call	0x75a	; 0x75a <__addsf3x>
 734:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_round>
 738:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscA>
 73c:	38 f0       	brcs	.+14     	; 0x74c <__addsf3+0x20>
 73e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscB>
 742:	20 f0       	brcs	.+8      	; 0x74c <__addsf3+0x20>
 744:	39 f4       	brne	.+14     	; 0x754 <__addsf3+0x28>
 746:	9f 3f       	cpi	r25, 0xFF	; 255
 748:	19 f4       	brne	.+6      	; 0x750 <__addsf3+0x24>
 74a:	26 f4       	brtc	.+8      	; 0x754 <__addsf3+0x28>
 74c:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_nan>
 750:	0e f4       	brtc	.+2      	; 0x754 <__addsf3+0x28>
 752:	e0 95       	com	r30
 754:	e7 fb       	bst	r30, 7
 756:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>

0000075a <__addsf3x>:
 75a:	e9 2f       	mov	r30, r25
 75c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_split3>
 760:	58 f3       	brcs	.-42     	; 0x738 <__addsf3+0xc>
 762:	ba 17       	cp	r27, r26
 764:	62 07       	cpc	r22, r18
 766:	73 07       	cpc	r23, r19
 768:	84 07       	cpc	r24, r20
 76a:	95 07       	cpc	r25, r21
 76c:	20 f0       	brcs	.+8      	; 0x776 <__addsf3x+0x1c>
 76e:	79 f4       	brne	.+30     	; 0x78e <__addsf3x+0x34>
 770:	a6 f5       	brtc	.+104    	; 0x7da <__addsf3x+0x80>
 772:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_zero>
 776:	0e f4       	brtc	.+2      	; 0x77a <__addsf3x+0x20>
 778:	e0 95       	com	r30
 77a:	0b 2e       	mov	r0, r27
 77c:	ba 2f       	mov	r27, r26
 77e:	a0 2d       	mov	r26, r0
 780:	0b 01       	movw	r0, r22
 782:	b9 01       	movw	r22, r18
 784:	90 01       	movw	r18, r0
 786:	0c 01       	movw	r0, r24
 788:	ca 01       	movw	r24, r20
 78a:	a0 01       	movw	r20, r0
 78c:	11 24       	eor	r1, r1
 78e:	ff 27       	eor	r31, r31
 790:	59 1b       	sub	r21, r25
 792:	99 f0       	breq	.+38     	; 0x7ba <__addsf3x+0x60>
 794:	59 3f       	cpi	r21, 0xF9	; 249
 796:	50 f4       	brcc	.+20     	; 0x7ac <__addsf3x+0x52>
 798:	50 3e       	cpi	r21, 0xE0	; 224
 79a:	68 f1       	brcs	.+90     	; 0x7f6 <__addsf3x+0x9c>
 79c:	1a 16       	cp	r1, r26
 79e:	f0 40       	sbci	r31, 0x00	; 0
 7a0:	a2 2f       	mov	r26, r18
 7a2:	23 2f       	mov	r18, r19
 7a4:	34 2f       	mov	r19, r20
 7a6:	44 27       	eor	r20, r20
 7a8:	58 5f       	subi	r21, 0xF8	; 248
 7aa:	f3 cf       	rjmp	.-26     	; 0x792 <__addsf3x+0x38>
 7ac:	46 95       	lsr	r20
 7ae:	37 95       	ror	r19
 7b0:	27 95       	ror	r18
 7b2:	a7 95       	ror	r26
 7b4:	f0 40       	sbci	r31, 0x00	; 0
 7b6:	53 95       	inc	r21
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <__addsf3x+0x52>
 7ba:	7e f4       	brtc	.+30     	; 0x7da <__addsf3x+0x80>
 7bc:	1f 16       	cp	r1, r31
 7be:	ba 0b       	sbc	r27, r26
 7c0:	62 0b       	sbc	r22, r18
 7c2:	73 0b       	sbc	r23, r19
 7c4:	84 0b       	sbc	r24, r20
 7c6:	ba f0       	brmi	.+46     	; 0x7f6 <__addsf3x+0x9c>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	a1 f0       	breq	.+40     	; 0x7f4 <__addsf3x+0x9a>
 7cc:	ff 0f       	add	r31, r31
 7ce:	bb 1f       	adc	r27, r27
 7d0:	66 1f       	adc	r22, r22
 7d2:	77 1f       	adc	r23, r23
 7d4:	88 1f       	adc	r24, r24
 7d6:	c2 f7       	brpl	.-16     	; 0x7c8 <__addsf3x+0x6e>
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__addsf3x+0x9c>
 7da:	ba 0f       	add	r27, r26
 7dc:	62 1f       	adc	r22, r18
 7de:	73 1f       	adc	r23, r19
 7e0:	84 1f       	adc	r24, r20
 7e2:	48 f4       	brcc	.+18     	; 0x7f6 <__addsf3x+0x9c>
 7e4:	87 95       	ror	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b7 95       	ror	r27
 7ec:	f7 95       	ror	r31
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__addsf3x+0x9a>
 7f2:	b0 cf       	rjmp	.-160    	; 0x754 <__addsf3+0x28>
 7f4:	93 95       	inc	r25
 7f6:	88 0f       	add	r24, r24
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <__addsf3x+0xa2>
 7fa:	99 27       	eor	r25, r25
 7fc:	ee 0f       	add	r30, r30
 7fe:	97 95       	ror	r25
 800:	87 95       	ror	r24
 802:	08 95       	ret

00000804 <__divsf3>:
 804:	0e 94 16 04 	call	0x82c	; 0x82c <__divsf3x>
 808:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_round>
 80c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscB>
 810:	58 f0       	brcs	.+22     	; 0x828 <__divsf3+0x24>
 812:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscA>
 816:	40 f0       	brcs	.+16     	; 0x828 <__divsf3+0x24>
 818:	29 f4       	brne	.+10     	; 0x824 <__divsf3+0x20>
 81a:	5f 3f       	cpi	r21, 0xFF	; 255
 81c:	29 f0       	breq	.+10     	; 0x828 <__divsf3+0x24>
 81e:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 822:	51 11       	cpse	r21, r1
 824:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_szero>
 828:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_nan>

0000082c <__divsf3x>:
 82c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_split3>
 830:	68 f3       	brcs	.-38     	; 0x80c <__divsf3+0x8>

00000832 <__divsf3_pse>:
 832:	99 23       	and	r25, r25
 834:	b1 f3       	breq	.-20     	; 0x822 <__divsf3+0x1e>
 836:	55 23       	and	r21, r21
 838:	91 f3       	breq	.-28     	; 0x81e <__divsf3+0x1a>
 83a:	95 1b       	sub	r25, r21
 83c:	55 0b       	sbc	r21, r21
 83e:	bb 27       	eor	r27, r27
 840:	aa 27       	eor	r26, r26
 842:	62 17       	cp	r22, r18
 844:	73 07       	cpc	r23, r19
 846:	84 07       	cpc	r24, r20
 848:	38 f0       	brcs	.+14     	; 0x858 <__divsf3_pse+0x26>
 84a:	9f 5f       	subi	r25, 0xFF	; 255
 84c:	5f 4f       	sbci	r21, 0xFF	; 255
 84e:	22 0f       	add	r18, r18
 850:	33 1f       	adc	r19, r19
 852:	44 1f       	adc	r20, r20
 854:	aa 1f       	adc	r26, r26
 856:	a9 f3       	breq	.-22     	; 0x842 <__divsf3_pse+0x10>
 858:	35 d0       	rcall	.+106    	; 0x8c4 <__divsf3_pse+0x92>
 85a:	0e 2e       	mov	r0, r30
 85c:	3a f0       	brmi	.+14     	; 0x86c <__divsf3_pse+0x3a>
 85e:	e0 e8       	ldi	r30, 0x80	; 128
 860:	32 d0       	rcall	.+100    	; 0x8c6 <__divsf3_pse+0x94>
 862:	91 50       	subi	r25, 0x01	; 1
 864:	50 40       	sbci	r21, 0x00	; 0
 866:	e6 95       	lsr	r30
 868:	00 1c       	adc	r0, r0
 86a:	ca f7       	brpl	.-14     	; 0x85e <__divsf3_pse+0x2c>
 86c:	2b d0       	rcall	.+86     	; 0x8c4 <__divsf3_pse+0x92>
 86e:	fe 2f       	mov	r31, r30
 870:	29 d0       	rcall	.+82     	; 0x8c4 <__divsf3_pse+0x92>
 872:	66 0f       	add	r22, r22
 874:	77 1f       	adc	r23, r23
 876:	88 1f       	adc	r24, r24
 878:	bb 1f       	adc	r27, r27
 87a:	26 17       	cp	r18, r22
 87c:	37 07       	cpc	r19, r23
 87e:	48 07       	cpc	r20, r24
 880:	ab 07       	cpc	r26, r27
 882:	b0 e8       	ldi	r27, 0x80	; 128
 884:	09 f0       	breq	.+2      	; 0x888 <__divsf3_pse+0x56>
 886:	bb 0b       	sbc	r27, r27
 888:	80 2d       	mov	r24, r0
 88a:	bf 01       	movw	r22, r30
 88c:	ff 27       	eor	r31, r31
 88e:	93 58       	subi	r25, 0x83	; 131
 890:	5f 4f       	sbci	r21, 0xFF	; 255
 892:	3a f0       	brmi	.+14     	; 0x8a2 <__divsf3_pse+0x70>
 894:	9e 3f       	cpi	r25, 0xFE	; 254
 896:	51 05       	cpc	r21, r1
 898:	78 f0       	brcs	.+30     	; 0x8b8 <__divsf3_pse+0x86>
 89a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 89e:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_szero>
 8a2:	5f 3f       	cpi	r21, 0xFF	; 255
 8a4:	e4 f3       	brlt	.-8      	; 0x89e <__divsf3_pse+0x6c>
 8a6:	98 3e       	cpi	r25, 0xE8	; 232
 8a8:	d4 f3       	brlt	.-12     	; 0x89e <__divsf3_pse+0x6c>
 8aa:	86 95       	lsr	r24
 8ac:	77 95       	ror	r23
 8ae:	67 95       	ror	r22
 8b0:	b7 95       	ror	r27
 8b2:	f7 95       	ror	r31
 8b4:	9f 5f       	subi	r25, 0xFF	; 255
 8b6:	c9 f7       	brne	.-14     	; 0x8aa <__divsf3_pse+0x78>
 8b8:	88 0f       	add	r24, r24
 8ba:	91 1d       	adc	r25, r1
 8bc:	96 95       	lsr	r25
 8be:	87 95       	ror	r24
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret
 8c4:	e1 e0       	ldi	r30, 0x01	; 1
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	bb 1f       	adc	r27, r27
 8ce:	62 17       	cp	r22, r18
 8d0:	73 07       	cpc	r23, r19
 8d2:	84 07       	cpc	r24, r20
 8d4:	ba 07       	cpc	r27, r26
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__divsf3_pse+0xae>
 8d8:	62 1b       	sub	r22, r18
 8da:	73 0b       	sbc	r23, r19
 8dc:	84 0b       	sbc	r24, r20
 8de:	ba 0b       	sbc	r27, r26
 8e0:	ee 1f       	adc	r30, r30
 8e2:	88 f7       	brcc	.-30     	; 0x8c6 <__divsf3_pse+0x94>
 8e4:	e0 95       	com	r30
 8e6:	08 95       	ret

000008e8 <__fixsfsi>:
 8e8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fixunssfsi>
 8ec:	68 94       	set
 8ee:	b1 11       	cpse	r27, r1
 8f0:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_szero>
 8f4:	08 95       	ret

000008f6 <__fixunssfsi>:
 8f6:	0e 94 17 05 	call	0xa2e	; 0xa2e <__fp_splitA>
 8fa:	88 f0       	brcs	.+34     	; 0x91e <__stack+0x1f>
 8fc:	9f 57       	subi	r25, 0x7F	; 127
 8fe:	98 f0       	brcs	.+38     	; 0x926 <__stack+0x27>
 900:	b9 2f       	mov	r27, r25
 902:	99 27       	eor	r25, r25
 904:	b7 51       	subi	r27, 0x17	; 23
 906:	b0 f0       	brcs	.+44     	; 0x934 <__stack+0x35>
 908:	e1 f0       	breq	.+56     	; 0x942 <__stack+0x43>
 90a:	66 0f       	add	r22, r22
 90c:	77 1f       	adc	r23, r23
 90e:	88 1f       	adc	r24, r24
 910:	99 1f       	adc	r25, r25
 912:	1a f0       	brmi	.+6      	; 0x91a <__stack+0x1b>
 914:	ba 95       	dec	r27
 916:	c9 f7       	brne	.-14     	; 0x90a <__stack+0xb>
 918:	14 c0       	rjmp	.+40     	; 0x942 <__stack+0x43>
 91a:	b1 30       	cpi	r27, 0x01	; 1
 91c:	91 f0       	breq	.+36     	; 0x942 <__stack+0x43>
 91e:	0e 94 31 05 	call	0xa62	; 0xa62 <__fp_zero>
 922:	b1 e0       	ldi	r27, 0x01	; 1
 924:	08 95       	ret
 926:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__fp_zero>
 92a:	67 2f       	mov	r22, r23
 92c:	78 2f       	mov	r23, r24
 92e:	88 27       	eor	r24, r24
 930:	b8 5f       	subi	r27, 0xF8	; 248
 932:	39 f0       	breq	.+14     	; 0x942 <__stack+0x43>
 934:	b9 3f       	cpi	r27, 0xF9	; 249
 936:	cc f3       	brlt	.-14     	; 0x92a <__stack+0x2b>
 938:	86 95       	lsr	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b3 95       	inc	r27
 940:	d9 f7       	brne	.-10     	; 0x938 <__stack+0x39>
 942:	3e f4       	brtc	.+14     	; 0x952 <__stack+0x53>
 944:	90 95       	com	r25
 946:	80 95       	com	r24
 948:	70 95       	com	r23
 94a:	61 95       	neg	r22
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	08 95       	ret

00000954 <__floatunsisf>:
 954:	e8 94       	clt
 956:	09 c0       	rjmp	.+18     	; 0x96a <__floatsisf+0x12>

00000958 <__floatsisf>:
 958:	97 fb       	bst	r25, 7
 95a:	3e f4       	brtc	.+14     	; 0x96a <__floatsisf+0x12>
 95c:	90 95       	com	r25
 95e:	80 95       	com	r24
 960:	70 95       	com	r23
 962:	61 95       	neg	r22
 964:	7f 4f       	sbci	r23, 0xFF	; 255
 966:	8f 4f       	sbci	r24, 0xFF	; 255
 968:	9f 4f       	sbci	r25, 0xFF	; 255
 96a:	99 23       	and	r25, r25
 96c:	a9 f0       	breq	.+42     	; 0x998 <__floatsisf+0x40>
 96e:	f9 2f       	mov	r31, r25
 970:	96 e9       	ldi	r25, 0x96	; 150
 972:	bb 27       	eor	r27, r27
 974:	93 95       	inc	r25
 976:	f6 95       	lsr	r31
 978:	87 95       	ror	r24
 97a:	77 95       	ror	r23
 97c:	67 95       	ror	r22
 97e:	b7 95       	ror	r27
 980:	f1 11       	cpse	r31, r1
 982:	f8 cf       	rjmp	.-16     	; 0x974 <__floatsisf+0x1c>
 984:	fa f4       	brpl	.+62     	; 0x9c4 <__floatsisf+0x6c>
 986:	bb 0f       	add	r27, r27
 988:	11 f4       	brne	.+4      	; 0x98e <__floatsisf+0x36>
 98a:	60 ff       	sbrs	r22, 0
 98c:	1b c0       	rjmp	.+54     	; 0x9c4 <__floatsisf+0x6c>
 98e:	6f 5f       	subi	r22, 0xFF	; 255
 990:	7f 4f       	sbci	r23, 0xFF	; 255
 992:	8f 4f       	sbci	r24, 0xFF	; 255
 994:	9f 4f       	sbci	r25, 0xFF	; 255
 996:	16 c0       	rjmp	.+44     	; 0x9c4 <__floatsisf+0x6c>
 998:	88 23       	and	r24, r24
 99a:	11 f0       	breq	.+4      	; 0x9a0 <__floatsisf+0x48>
 99c:	96 e9       	ldi	r25, 0x96	; 150
 99e:	11 c0       	rjmp	.+34     	; 0x9c2 <__floatsisf+0x6a>
 9a0:	77 23       	and	r23, r23
 9a2:	21 f0       	breq	.+8      	; 0x9ac <__floatsisf+0x54>
 9a4:	9e e8       	ldi	r25, 0x8E	; 142
 9a6:	87 2f       	mov	r24, r23
 9a8:	76 2f       	mov	r23, r22
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <__floatsisf+0x5e>
 9ac:	66 23       	and	r22, r22
 9ae:	71 f0       	breq	.+28     	; 0x9cc <__floatsisf+0x74>
 9b0:	96 e8       	ldi	r25, 0x86	; 134
 9b2:	86 2f       	mov	r24, r22
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	60 e0       	ldi	r22, 0x00	; 0
 9b8:	2a f0       	brmi	.+10     	; 0x9c4 <__floatsisf+0x6c>
 9ba:	9a 95       	dec	r25
 9bc:	66 0f       	add	r22, r22
 9be:	77 1f       	adc	r23, r23
 9c0:	88 1f       	adc	r24, r24
 9c2:	da f7       	brpl	.-10     	; 0x9ba <__floatsisf+0x62>
 9c4:	88 0f       	add	r24, r24
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret

000009ce <__fp_inf>:
 9ce:	97 f9       	bld	r25, 7
 9d0:	9f 67       	ori	r25, 0x7F	; 127
 9d2:	80 e8       	ldi	r24, 0x80	; 128
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	60 e0       	ldi	r22, 0x00	; 0
 9d8:	08 95       	ret

000009da <__fp_nan>:
 9da:	9f ef       	ldi	r25, 0xFF	; 255
 9dc:	80 ec       	ldi	r24, 0xC0	; 192
 9de:	08 95       	ret

000009e0 <__fp_pscA>:
 9e0:	00 24       	eor	r0, r0
 9e2:	0a 94       	dec	r0
 9e4:	16 16       	cp	r1, r22
 9e6:	17 06       	cpc	r1, r23
 9e8:	18 06       	cpc	r1, r24
 9ea:	09 06       	cpc	r0, r25
 9ec:	08 95       	ret

000009ee <__fp_pscB>:
 9ee:	00 24       	eor	r0, r0
 9f0:	0a 94       	dec	r0
 9f2:	12 16       	cp	r1, r18
 9f4:	13 06       	cpc	r1, r19
 9f6:	14 06       	cpc	r1, r20
 9f8:	05 06       	cpc	r0, r21
 9fa:	08 95       	ret

000009fc <__fp_round>:
 9fc:	09 2e       	mov	r0, r25
 9fe:	03 94       	inc	r0
 a00:	00 0c       	add	r0, r0
 a02:	11 f4       	brne	.+4      	; 0xa08 <__fp_round+0xc>
 a04:	88 23       	and	r24, r24
 a06:	52 f0       	brmi	.+20     	; 0xa1c <__fp_round+0x20>
 a08:	bb 0f       	add	r27, r27
 a0a:	40 f4       	brcc	.+16     	; 0xa1c <__fp_round+0x20>
 a0c:	bf 2b       	or	r27, r31
 a0e:	11 f4       	brne	.+4      	; 0xa14 <__fp_round+0x18>
 a10:	60 ff       	sbrs	r22, 0
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <__fp_round+0x20>
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	08 95       	ret

00000a1e <__fp_split3>:
 a1e:	57 fd       	sbrc	r21, 7
 a20:	90 58       	subi	r25, 0x80	; 128
 a22:	44 0f       	add	r20, r20
 a24:	55 1f       	adc	r21, r21
 a26:	59 f0       	breq	.+22     	; 0xa3e <__fp_splitA+0x10>
 a28:	5f 3f       	cpi	r21, 0xFF	; 255
 a2a:	71 f0       	breq	.+28     	; 0xa48 <__fp_splitA+0x1a>
 a2c:	47 95       	ror	r20

00000a2e <__fp_splitA>:
 a2e:	88 0f       	add	r24, r24
 a30:	97 fb       	bst	r25, 7
 a32:	99 1f       	adc	r25, r25
 a34:	61 f0       	breq	.+24     	; 0xa4e <__fp_splitA+0x20>
 a36:	9f 3f       	cpi	r25, 0xFF	; 255
 a38:	79 f0       	breq	.+30     	; 0xa58 <__fp_splitA+0x2a>
 a3a:	87 95       	ror	r24
 a3c:	08 95       	ret
 a3e:	12 16       	cp	r1, r18
 a40:	13 06       	cpc	r1, r19
 a42:	14 06       	cpc	r1, r20
 a44:	55 1f       	adc	r21, r21
 a46:	f2 cf       	rjmp	.-28     	; 0xa2c <__fp_split3+0xe>
 a48:	46 95       	lsr	r20
 a4a:	f1 df       	rcall	.-30     	; 0xa2e <__fp_splitA>
 a4c:	08 c0       	rjmp	.+16     	; 0xa5e <__fp_splitA+0x30>
 a4e:	16 16       	cp	r1, r22
 a50:	17 06       	cpc	r1, r23
 a52:	18 06       	cpc	r1, r24
 a54:	99 1f       	adc	r25, r25
 a56:	f1 cf       	rjmp	.-30     	; 0xa3a <__fp_splitA+0xc>
 a58:	86 95       	lsr	r24
 a5a:	71 05       	cpc	r23, r1
 a5c:	61 05       	cpc	r22, r1
 a5e:	08 94       	sec
 a60:	08 95       	ret

00000a62 <__fp_zero>:
 a62:	e8 94       	clt

00000a64 <__fp_szero>:
 a64:	bb 27       	eor	r27, r27
 a66:	66 27       	eor	r22, r22
 a68:	77 27       	eor	r23, r23
 a6a:	cb 01       	movw	r24, r22
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__mulsf3>:
 a70:	0e 94 4b 05 	call	0xa96	; 0xa96 <__mulsf3x>
 a74:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_round>
 a78:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_pscA>
 a7c:	38 f0       	brcs	.+14     	; 0xa8c <__mulsf3+0x1c>
 a7e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_pscB>
 a82:	20 f0       	brcs	.+8      	; 0xa8c <__mulsf3+0x1c>
 a84:	95 23       	and	r25, r21
 a86:	11 f0       	breq	.+4      	; 0xa8c <__mulsf3+0x1c>
 a88:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 a8c:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__fp_nan>
 a90:	11 24       	eor	r1, r1
 a92:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_szero>

00000a96 <__mulsf3x>:
 a96:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_split3>
 a9a:	70 f3       	brcs	.-36     	; 0xa78 <__mulsf3+0x8>

00000a9c <__mulsf3_pse>:
 a9c:	95 9f       	mul	r25, r21
 a9e:	c1 f3       	breq	.-16     	; 0xa90 <__mulsf3+0x20>
 aa0:	95 0f       	add	r25, r21
 aa2:	50 e0       	ldi	r21, 0x00	; 0
 aa4:	55 1f       	adc	r21, r21
 aa6:	62 9f       	mul	r22, r18
 aa8:	f0 01       	movw	r30, r0
 aaa:	72 9f       	mul	r23, r18
 aac:	bb 27       	eor	r27, r27
 aae:	f0 0d       	add	r31, r0
 ab0:	b1 1d       	adc	r27, r1
 ab2:	63 9f       	mul	r22, r19
 ab4:	aa 27       	eor	r26, r26
 ab6:	f0 0d       	add	r31, r0
 ab8:	b1 1d       	adc	r27, r1
 aba:	aa 1f       	adc	r26, r26
 abc:	64 9f       	mul	r22, r20
 abe:	66 27       	eor	r22, r22
 ac0:	b0 0d       	add	r27, r0
 ac2:	a1 1d       	adc	r26, r1
 ac4:	66 1f       	adc	r22, r22
 ac6:	82 9f       	mul	r24, r18
 ac8:	22 27       	eor	r18, r18
 aca:	b0 0d       	add	r27, r0
 acc:	a1 1d       	adc	r26, r1
 ace:	62 1f       	adc	r22, r18
 ad0:	73 9f       	mul	r23, r19
 ad2:	b0 0d       	add	r27, r0
 ad4:	a1 1d       	adc	r26, r1
 ad6:	62 1f       	adc	r22, r18
 ad8:	83 9f       	mul	r24, r19
 ada:	a0 0d       	add	r26, r0
 adc:	61 1d       	adc	r22, r1
 ade:	22 1f       	adc	r18, r18
 ae0:	74 9f       	mul	r23, r20
 ae2:	33 27       	eor	r19, r19
 ae4:	a0 0d       	add	r26, r0
 ae6:	61 1d       	adc	r22, r1
 ae8:	23 1f       	adc	r18, r19
 aea:	84 9f       	mul	r24, r20
 aec:	60 0d       	add	r22, r0
 aee:	21 1d       	adc	r18, r1
 af0:	82 2f       	mov	r24, r18
 af2:	76 2f       	mov	r23, r22
 af4:	6a 2f       	mov	r22, r26
 af6:	11 24       	eor	r1, r1
 af8:	9f 57       	subi	r25, 0x7F	; 127
 afa:	50 40       	sbci	r21, 0x00	; 0
 afc:	9a f0       	brmi	.+38     	; 0xb24 <__mulsf3_pse+0x88>
 afe:	f1 f0       	breq	.+60     	; 0xb3c <__mulsf3_pse+0xa0>
 b00:	88 23       	and	r24, r24
 b02:	4a f0       	brmi	.+18     	; 0xb16 <__mulsf3_pse+0x7a>
 b04:	ee 0f       	add	r30, r30
 b06:	ff 1f       	adc	r31, r31
 b08:	bb 1f       	adc	r27, r27
 b0a:	66 1f       	adc	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	91 50       	subi	r25, 0x01	; 1
 b12:	50 40       	sbci	r21, 0x00	; 0
 b14:	a9 f7       	brne	.-22     	; 0xb00 <__mulsf3_pse+0x64>
 b16:	9e 3f       	cpi	r25, 0xFE	; 254
 b18:	51 05       	cpc	r21, r1
 b1a:	80 f0       	brcs	.+32     	; 0xb3c <__mulsf3_pse+0xa0>
 b1c:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_inf>
 b20:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_szero>
 b24:	5f 3f       	cpi	r21, 0xFF	; 255
 b26:	e4 f3       	brlt	.-8      	; 0xb20 <__mulsf3_pse+0x84>
 b28:	98 3e       	cpi	r25, 0xE8	; 232
 b2a:	d4 f3       	brlt	.-12     	; 0xb20 <__mulsf3_pse+0x84>
 b2c:	86 95       	lsr	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f7 95       	ror	r31
 b36:	e7 95       	ror	r30
 b38:	9f 5f       	subi	r25, 0xFF	; 255
 b3a:	c1 f7       	brne	.-16     	; 0xb2c <__mulsf3_pse+0x90>
 b3c:	fe 2b       	or	r31, r30
 b3e:	88 0f       	add	r24, r24
 b40:	91 1d       	adc	r25, r1
 b42:	96 95       	lsr	r25
 b44:	87 95       	ror	r24
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <__udivmodsi4>:
 b4a:	a1 e2       	ldi	r26, 0x21	; 33
 b4c:	1a 2e       	mov	r1, r26
 b4e:	aa 1b       	sub	r26, r26
 b50:	bb 1b       	sub	r27, r27
 b52:	fd 01       	movw	r30, r26
 b54:	0d c0       	rjmp	.+26     	; 0xb70 <__udivmodsi4_ep>

00000b56 <__udivmodsi4_loop>:
 b56:	aa 1f       	adc	r26, r26
 b58:	bb 1f       	adc	r27, r27
 b5a:	ee 1f       	adc	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	a2 17       	cp	r26, r18
 b60:	b3 07       	cpc	r27, r19
 b62:	e4 07       	cpc	r30, r20
 b64:	f5 07       	cpc	r31, r21
 b66:	20 f0       	brcs	.+8      	; 0xb70 <__udivmodsi4_ep>
 b68:	a2 1b       	sub	r26, r18
 b6a:	b3 0b       	sbc	r27, r19
 b6c:	e4 0b       	sbc	r30, r20
 b6e:	f5 0b       	sbc	r31, r21

00000b70 <__udivmodsi4_ep>:
 b70:	66 1f       	adc	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	1a 94       	dec	r1
 b7a:	69 f7       	brne	.-38     	; 0xb56 <__udivmodsi4_loop>
 b7c:	60 95       	com	r22
 b7e:	70 95       	com	r23
 b80:	80 95       	com	r24
 b82:	90 95       	com	r25
 b84:	9b 01       	movw	r18, r22
 b86:	ac 01       	movw	r20, r24
 b88:	bd 01       	movw	r22, r26
 b8a:	cf 01       	movw	r24, r30
 b8c:	08 95       	ret

00000b8e <__divmodsi4>:
 b8e:	05 2e       	mov	r0, r21
 b90:	97 fb       	bst	r25, 7
 b92:	1e f4       	brtc	.+6      	; 0xb9a <__divmodsi4+0xc>
 b94:	00 94       	com	r0
 b96:	0e 94 de 05 	call	0xbbc	; 0xbbc <__negsi2>
 b9a:	57 fd       	sbrc	r21, 7
 b9c:	07 d0       	rcall	.+14     	; 0xbac <__divmodsi4_neg2>
 b9e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__udivmodsi4>
 ba2:	07 fc       	sbrc	r0, 7
 ba4:	03 d0       	rcall	.+6      	; 0xbac <__divmodsi4_neg2>
 ba6:	4e f4       	brtc	.+18     	; 0xbba <__divmodsi4_exit>
 ba8:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__negsi2>

00000bac <__divmodsi4_neg2>:
 bac:	50 95       	com	r21
 bae:	40 95       	com	r20
 bb0:	30 95       	com	r19
 bb2:	21 95       	neg	r18
 bb4:	3f 4f       	sbci	r19, 0xFF	; 255
 bb6:	4f 4f       	sbci	r20, 0xFF	; 255
 bb8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bba <__divmodsi4_exit>:
 bba:	08 95       	ret

00000bbc <__negsi2>:
 bbc:	90 95       	com	r25
 bbe:	80 95       	com	r24
 bc0:	70 95       	com	r23
 bc2:	61 95       	neg	r22
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255
 bc6:	8f 4f       	sbci	r24, 0xFF	; 255
 bc8:	9f 4f       	sbci	r25, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <_exit>:
 bcc:	f8 94       	cli

00000bce <__stop_program>:
 bce:	ff cf       	rjmp	.-2      	; 0xbce <__stop_program>
