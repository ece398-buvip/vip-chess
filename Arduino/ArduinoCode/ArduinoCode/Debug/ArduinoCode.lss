
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000b9a  00000c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010a  0080010a  00000c38  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000143c  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b38  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d0e  00000000  00000000  00002dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000041c  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069f  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1d  00000000  00000000  00004597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000051b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__ftoa_engine+0x4a>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <dtostrf+0x2a>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <PulseFn+0x22>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <SetPortC+0x4>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	ea e9       	ldi	r30, 0x9A	; 154
 176:	fb e0       	ldi	r31, 0x0B	; 11
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	aa 30       	cpi	r26, 0x0A	; 10
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	aa e0       	ldi	r26, 0x0A	; 10
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	a0 31       	cpi	r26, 0x10	; 16
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 b2 01 	call	0x364	; 0x364 <main>
 198:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <GetPortD>:
///////PORT D/////////


uint8_t GetPortD(void)
{
    return (PIND & MASK_PORTD);
 1a0:	89 b1       	in	r24, 0x09	; 9
}
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	08 95       	ret

000001a6 <SetPortD>:

void SetPortD(uint8_t out)
{
    PORTD = (PORTD & ~MASK_PORTD) | ((out & MASK_PORTD));
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	93 70       	andi	r25, 0x03	; 3
 1aa:	8c 7f       	andi	r24, 0xFC	; 252
 1ac:	89 2b       	or	r24, r25
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	08 95       	ret

000001b2 <GetDDRD>:
}

uint8_t GetDDRD(void)
{
    return (DDRD & MASK_PORTD);
 1b2:	8a b1       	in	r24, 0x0a	; 10
}
 1b4:	8c 7f       	andi	r24, 0xFC	; 252
 1b6:	08 95       	ret

000001b8 <SetDDRD>:

void SetDDRD(uint8_t direction)
{
    DDRD = (DDRD & ~MASK_PORTD) | (direction & MASK_PORTD);
 1b8:	9a b1       	in	r25, 0x0a	; 10
 1ba:	93 70       	andi	r25, 0x03	; 3
 1bc:	8c 7f       	andi	r24, 0xFC	; 252
 1be:	89 2b       	or	r24, r25
 1c0:	8a b9       	out	0x0a, r24	; 10
 1c2:	08 95       	ret

000001c4 <GetPortC>:
///////PORT C/////////


uint8_t GetPortC (void)
{
    return(PINC & MASK_PORTC);
 1c4:	86 b1       	in	r24, 0x06	; 6
}
 1c6:	8f 73       	andi	r24, 0x3F	; 63
 1c8:	08 95       	ret

000001ca <SetPortC>:

void SetPortC(uint8_t x)
{
    PORTC = (PORTC & ~MASK_PORTC) | (x & MASK_PORTC);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7c       	andi	r25, 0xC0	; 192
 1ce:	8f 73       	andi	r24, 0x3F	; 63
 1d0:	89 2b       	or	r24, r25
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	08 95       	ret

000001d6 <GetDDRC>:
}

uint8_t GetDDRC(void)
{
    return(DDRC & MASK_PORTC);
 1d6:	87 b1       	in	r24, 0x07	; 7
}
 1d8:	8f 73       	andi	r24, 0x3F	; 63
 1da:	08 95       	ret

000001dc <SetDDRC>:

void SetDDRC(uint8_t direction)
{
    DDRC = (DDRC & ~MASK_PORTC) | (direction & MASK_PORTC);
 1dc:	97 b1       	in	r25, 0x07	; 7
 1de:	90 7c       	andi	r25, 0xC0	; 192
 1e0:	8f 73       	andi	r24, 0x3F	; 63
 1e2:	89 2b       	or	r24, r25
 1e4:	87 b9       	out	0x07, r24	; 7
 1e6:	08 95       	ret

000001e8 <GetPortB>:
///////PORT B/////////


uint8_t GetPortB (void)
{
    return(PINB & MASK_PORTB);
 1e8:	83 b1       	in	r24, 0x03	; 3
}
 1ea:	8f 73       	andi	r24, 0x3F	; 63
 1ec:	08 95       	ret

000001ee <SetPortB>:

void SetPortB(uint8_t x)
{
    PORTB = (PORTB & ~MASK_PORTB) | (x & MASK_PORTB);
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	90 7c       	andi	r25, 0xC0	; 192
 1f2:	8f 73       	andi	r24, 0x3F	; 63
 1f4:	89 2b       	or	r24, r25
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	08 95       	ret

000001fa <GetDDRB>:
}

uint8_t GetDDRB(void)
{
    return(DDRB & MASK_PORTB);
 1fa:	84 b1       	in	r24, 0x04	; 4
}
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	08 95       	ret

00000200 <SetDDRB>:

void SetDDRB(uint8_t direction)
{
    DDRB = (DDRB & ~MASK_PORTB) | (direction & MASK_PORTB);
 200:	94 b1       	in	r25, 0x04	; 4
 202:	90 7c       	andi	r25, 0xC0	; 192
 204:	8f 73       	andi	r24, 0x3F	; 63
 206:	89 2b       	or	r24, r25
 208:	84 b9       	out	0x04, r24	; 4
 20a:	08 95       	ret

0000020c <Timer1_initialize>:
#define xtal 16000000L

static void (*Timer1_Overflow_function)(void) = 0;

void Timer1_initialize ( uint32_t frequency, void (*handle_overflow)(void), uint8_t prescaler )
{
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	6b 01       	movw	r12, r22
 218:	7c 01       	movw	r14, r24
 21a:	c2 2f       	mov	r28, r18
                                      // -  1  8 64 256 1024
    const static uint8_t prescales[] = {0, 0, 3, 6, 8, 10};

    Timer1_Overflow_function = handle_overflow;
 21c:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <__data_end+0x1>
 220:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <__data_end>

    TCNT1=0x00;
 224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    // set timer0 counter initial value to 0
    // (note: entirely redundant as it was never used before)

    OCR1A = ((uint32_t)(xtal)>>prescales[prescaler]) / frequency - 1;
 22c:	e2 2f       	mov	r30, r18
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	94 e2       	ldi	r25, 0x24	; 36
 238:	a4 ef       	ldi	r26, 0xF4	; 244
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	bc 01       	movw	r22, r24
 23e:	cd 01       	movw	r24, r26
 240:	00 80       	ld	r0, Z
 242:	04 c0       	rjmp	.+8      	; 0x24c <Timer1_initialize+0x40>
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	77 95       	ror	r23
 24a:	67 95       	ror	r22
 24c:	0a 94       	dec	r0
 24e:	d2 f7       	brpl	.-12     	; 0x244 <Timer1_initialize+0x38>
 250:	a7 01       	movw	r20, r14
 252:	96 01       	movw	r18, r12
 254:	0e 94 01 03 	call	0x602	; 0x602 <__udivmodsi4>
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
 25c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    TCCR1A = 0x00;
 264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // AABBCCMM - lower two bits of 4-bit mode MMMM

    TCCR1B = 0x08 | (0x07 & prescaler);
 268:	c7 70       	andi	r28, 0x07	; 7
 26a:	c8 60       	ori	r28, 0x08	; 8
 26c:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // ??-MMPPP - MM is upper two bits of mode MMMM, PPP is clock rescale
    // where PPP of 011 is clock rescale of 64
    // where MM MM is the Timer mode, we use 01 00 - CTC

    TIFR1  = 0;
 270:	16 ba       	out	0x16, r1	; 22
    // reset any pending Timer1 interrupts
    // (note: entirely redundant as none is pending - it was never used before)

    TIMSK1 = (1<<OCIE1A);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        //  ICIE1  - enable Timer1 capture interrupt
        //  OCIE1A - enable Timer1 match OCR1A match interrupt
        //  TOIE1  - enable Timer1 overflow interrupt
}
 278:	cf 91       	pop	r28
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	08 95       	ret

00000284 <Timer1_shutdown>:

void Timer1_shutdown ()
{
    TIMSK1 &= ~(1<<TOIE1 | 1<<OCIE1A | 1<<OCIE1B | 1<<TOIE1);
 284:	ef e6       	ldi	r30, 0x6F	; 111
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 7f       	andi	r24, 0xF8	; 248
 28c:	80 83       	st	Z, r24
    // disable all Timer1 interrupts
    // which is the same effort as disabling just one interrupt but can be reused in other examples

    TCCR1A = 0;
 28e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0;
 292:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0;
 296:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    TIMSK1 = 0;
 29a:	10 82       	st	Z, r1
    TIFR1  = 0;
 29c:	16 ba       	out	0x16, r1	; 22
 29e:	08 95       	ret

000002a0 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
 2c2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 2c6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 2ca:	09 95       	icall
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <uart0_initialize>:


uint8_t uart0_ready_TX ()
{
    return ( 0 != (UCSR0A & 1<<UDRE0) );
}
 2ee:	9c 01       	movw	r18, r24
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	60 e4       	ldi	r22, 0x40	; 64
 2f6:	72 e4       	ldi	r23, 0x42	; 66
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 23 03 	call	0x646	; 0x646 <__divmodsi4>
 300:	ba 01       	movw	r22, r20
 302:	a9 01       	movw	r20, r18
 304:	41 50       	subi	r20, 0x01	; 1
 306:	51 09       	sbc	r21, r1
 308:	61 09       	sbc	r22, r1
 30a:	71 09       	sbc	r23, r1
 30c:	85 2f       	mov	r24, r21
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 314:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 324:	08 95       	ret

00000326 <uart0_putc>:

void uart0_putc (char c)
{
    while( 0 == (UCSR0A & 1<<UDRE0) ) ;
 326:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32a:	95 ff       	sbrs	r25, 5
 32c:	fc cf       	rjmp	.-8      	; 0x326 <uart0_putc>
    UDR0 = c;
 32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 332:	08 95       	ret

00000334 <uart0_puts>:
}

void uart0_puts (const char* const s)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
    for ( const char* p = s; *p!='\0'; ++p )
 33a:	03 c0       	rjmp	.+6      	; 0x342 <uart0_puts+0xe>
        uart0_putc(*p);
 33c:	0e 94 93 01 	call	0x326	; 0x326 <uart0_putc>
    UDR0 = c;
}

void uart0_puts (const char* const s)
{
    for ( const char* p = s; *p!='\0'; ++p )
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	88 81       	ld	r24, Y
 344:	81 11       	cpse	r24, r1
 346:	fa cf       	rjmp	.-12     	; 0x33c <uart0_puts+0x8>
        uart0_putc(*p);
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <LimitSwitchesInit>:
 */

#include "limit_switches.h"

void LimitSwitchesInit() {
    SetDDRD(GetDDRD() & ~LS_ALL);
 34e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <GetDDRD>
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SetDDRD>
    SetPortD(GetPortD() | LS_ALL);
 358:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GetPortD>
 35c:	80 6f       	ori	r24, 0xF0	; 240
 35e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SetPortD>
 362:	08 95       	ret

00000364 <main>:
#define B_ALL   0b00001111

int main(void)
{

    sei();
 364:	78 94       	sei


    uart0_initialize(uart_bps_9600);
 366:	80 e8       	ldi	r24, 0x80	; 128
 368:	95 e2       	ldi	r25, 0x25	; 37
 36a:	0e 94 77 01 	call	0x2ee	; 0x2ee <uart0_initialize>

    StepperInit();
 36e:	0e 94 0a 02 	call	0x414	; 0x414 <StepperInit>
    SetDDRC(GetDDRC() & ~B_ALL);
 372:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GetDDRC>
 376:	80 7f       	andi	r24, 0xF0	; 240
 378:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SetDDRC>
    SetPortC(GetPortC() | B_ALL);
 37c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GetPortC>
 380:	8f 60       	ori	r24, 0x0F	; 15
 382:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SetPortC>


    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;
 386:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GetPortC>

        int steps_x = 0;
        int steps_y = 0;

        if(!(buttons & B_X_NEG)) {
 38a:	80 ff       	sbrs	r24, 0
 38c:	03 c0       	rjmp	.+6      	; 0x394 <main+0x30>
    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int steps_x = 0;
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <main+0x34>
        int steps_y = 0;

        if(!(buttons & B_X_NEG)) {
            steps_x = -20;
 394:	2c ee       	ldi	r18, 0xEC	; 236
 396:	3f ef       	ldi	r19, 0xFF	; 255
        }
        if(!(buttons & B_X_POS)) {
 398:	81 fd       	sbrc	r24, 1
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <main+0x3c>
            steps_x = 20;
 39c:	24 e1       	ldi	r18, 0x14	; 20
 39e:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(!(buttons & B_Y_NEG)) {
 3a0:	82 ff       	sbrs	r24, 2
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <main+0x46>
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int steps_x = 0;
        int steps_y = 0;
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <main+0x4a>
        }
        if(!(buttons & B_X_POS)) {
            steps_x = 20;
        }
        if(!(buttons & B_Y_NEG)) {
            steps_y = -20;
 3aa:	6c ee       	ldi	r22, 0xEC	; 236
 3ac:	7f ef       	ldi	r23, 0xFF	; 255
        }
        if(!(buttons & B_Y_POS)) {
 3ae:	83 fd       	sbrc	r24, 3
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <main+0x52>
            steps_y = 20;
 3b2:	64 e1       	ldi	r22, 0x14	; 20
 3b4:	70 e0       	ldi	r23, 0x00	; 0
        }

        MoveSteps(steps_x, steps_y);
 3b6:	c9 01       	movw	r24, r18
 3b8:	0e 94 17 02 	call	0x42e	; 0x42e <MoveSteps>
 3bc:	e4 cf       	rjmp	.-56     	; 0x386 <main+0x22>

000003be <PulseFn>:
//Could be made better by placing a lot of this code inside the MoveSteps function
void PulseFn(void) {
    static uint16_t cnt = 0;

    //increment count if still under the max value, otherwise reset
    if(cnt<pwm_res) cnt++;
 3be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt.1930>
 3c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt.1930+0x1>
 3c6:	8a 30       	cpi	r24, 0x0A	; 10
 3c8:	91 05       	cpc	r25, r1
 3ca:	30 f4       	brcc	.+12     	; 0x3d8 <PulseFn+0x1a>
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt.1930+0x1>
 3d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt.1930>
 3d6:	07 c0       	rjmp	.+14     	; 0x3e6 <PulseFn+0x28>
    else {
        cnt = 0;
 3d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt.1930+0x1>
 3dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt.1930>
        semaphore = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <semaphore>
    }

    //generates the pulse for the percentage of the duty cycle
    if(duty_cycle>cnt) {
 3e6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt.1930>
 3ea:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt.1930+0x1>
 3ee:	05 97       	sbiw	r24, 0x05	; 5
 3f0:	40 f4       	brcc	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
        SetPortB(GetPortB() | active_steppers);
 3f2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 3f6:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <active_steppers>
 3fa:	89 2b       	or	r24, r25
 3fc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 400:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~active_steppers);
 402:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 406:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <active_steppers>
 40a:	90 95       	com	r25
 40c:	89 23       	and	r24, r25
 40e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 412:	08 95       	ret

00000414 <StepperInit>:
}

//sets up the stepper motor pins as outputs
void StepperInit(void)
{
    LimitSwitchesInit();
 414:	0e 94 a7 01 	call	0x34e	; 0x34e <LimitSwitchesInit>
    SetDDRB(GetDDRB() | (STEP_X | STEP_Y) | (DIR_X | DIR_Y));
 418:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GetDDRB>
 41c:	8f 60       	ori	r24, 0x0F	; 15
 41e:	0e 94 00 01 	call	0x200	; 0x200 <SetDDRB>
    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
 422:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 426:	80 7f       	andi	r24, 0xF0	; 240
 428:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 42c:	08 95       	ret

0000042e <MoveSteps>:
}



//Moves both stepper motors the specified number of steps
void MoveSteps(int steps_x, int steps_y) {
 42e:	bf 92       	push	r11
 430:	cf 92       	push	r12
 432:	df 92       	push	r13
 434:	ef 92       	push	r14
 436:	ff 92       	push	r15
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
 444:	a0 97       	sbiw	r28, 0x20	; 32
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	7c 01       	movw	r14, r24
 452:	6b 01       	movw	r12, r22

    if(steps_x == 0 && steps_y == 0) {
 454:	89 2b       	or	r24, r25
 456:	41 f4       	brne	.+16     	; 0x468 <MoveSteps+0x3a>
 458:	67 2b       	or	r22, r23
 45a:	31 f4       	brne	.+12     	; 0x468 <MoveSteps+0x3a>
        SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 45c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 460:	8a 7f       	andi	r24, 0xFA	; 250
 462:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 466:	80 c0       	rjmp	.+256    	; 0x568 <MoveSteps+0x13a>
        return;
    }

    //used to decide which steppers to pulse
    active_steppers = 0;
 468:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <active_steppers>
    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;

    //set x axis active and direction
    if(steps_x != 0) {
 46c:	e1 14       	cp	r14, r1
 46e:	f1 04       	cpc	r15, r1
 470:	51 f0       	breq	.+20     	; 0x486 <MoveSteps+0x58>
        active_steppers |= STEP_X;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <active_steppers>
        if(steps_x < 0) {
 478:	ff 20       	and	r15, r15
 47a:	54 f0       	brlt	.+20     	; 0x490 <MoveSteps+0x62>
    }

    //used to decide which steppers to pulse
    active_steppers = 0;
    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;
 47c:	0f 2e       	mov	r0, r31
 47e:	fa e0       	ldi	r31, 0x0A	; 10
 480:	bf 2e       	mov	r11, r31
 482:	f0 2d       	mov	r31, r0
 484:	08 c0       	rjmp	.+16     	; 0x496 <MoveSteps+0x68>
 486:	0f 2e       	mov	r0, r31
 488:	fa e0       	ldi	r31, 0x0A	; 10
 48a:	bf 2e       	mov	r11, r31
 48c:	f0 2d       	mov	r31, r0
 48e:	03 c0       	rjmp	.+6      	; 0x496 <MoveSteps+0x68>

    //set x axis active and direction
    if(steps_x != 0) {
        active_steppers |= STEP_X;
        if(steps_x < 0) {
            direction &= ~DIR_X;
 490:	68 94       	set
 492:	bb 24       	eor	r11, r11
 494:	b3 f8       	bld	r11, 3
        }
    }

    //set y axis active and direction
    if(steps_y != 0) {
 496:	c1 14       	cp	r12, r1
 498:	d1 04       	cpc	r13, r1
 49a:	51 f0       	breq	.+20     	; 0x4b0 <MoveSteps+0x82>
        active_steppers |= STEP_Y;
 49c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <active_steppers>
 4a0:	84 60       	ori	r24, 0x04	; 4
 4a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <active_steppers>
        if(steps_y < 0) {
 4a6:	dd 20       	and	r13, r13
 4a8:	1c f4       	brge	.+6      	; 0x4b0 <MoveSteps+0x82>
            direction &= ~DIR_Y;
 4aa:	8b 2d       	mov	r24, r11
 4ac:	87 7f       	andi	r24, 0xF7	; 247
 4ae:	b8 2e       	mov	r11, r24
        }
    }

    char buffer[32];
    dtostrf((float)steps_y, 5, 3, buffer);
 4b0:	b6 01       	movw	r22, r12
 4b2:	0d 2c       	mov	r0, r13
 4b4:	00 0c       	add	r0, r0
 4b6:	88 0b       	sbc	r24, r24
 4b8:	99 0b       	sbc	r25, r25
 4ba:	0e 94 c6 02 	call	0x58c	; 0x58c <__floatsisf>
 4be:	8e 01       	movw	r16, r28
 4c0:	0f 5f       	subi	r16, 0xFF	; 255
 4c2:	1f 4f       	sbci	r17, 0xFF	; 255
 4c4:	23 e0       	ldi	r18, 0x03	; 3
 4c6:	45 e0       	ldi	r20, 0x05	; 5
 4c8:	0e 94 42 03 	call	0x684	; 0x684 <dtostrf>
    uart0_puts(buffer);
 4cc:	c8 01       	movw	r24, r16
 4ce:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>
    uart0_puts("\t\n");
 4d2:	86 e0       	ldi	r24, 0x06	; 6
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>

    steps_x = abs(steps_x);
 4da:	87 01       	movw	r16, r14
 4dc:	ff 20       	and	r15, r15
 4de:	24 f4       	brge	.+8      	; 0x4e8 <MoveSteps+0xba>
 4e0:	00 27       	eor	r16, r16
 4e2:	11 27       	eor	r17, r17
 4e4:	0e 19       	sub	r16, r14
 4e6:	1f 09       	sbc	r17, r15
    steps_y = abs(steps_y);
 4e8:	76 01       	movw	r14, r12
 4ea:	dd 20       	and	r13, r13
 4ec:	24 f4       	brge	.+8      	; 0x4f6 <MoveSteps+0xc8>
 4ee:	ee 24       	eor	r14, r14
 4f0:	ff 24       	eor	r15, r15
 4f2:	ec 18       	sub	r14, r12
 4f4:	fd 08       	sbc	r15, r13



    if(active_steppers) {
 4f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <active_steppers>
 4fa:	88 23       	and	r24, r24
 4fc:	31 f0       	breq	.+12     	; 0x50a <MoveSteps+0xdc>
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
 4fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 502:	85 7f       	andi	r24, 0xF5	; 245
 504:	8b 29       	or	r24, r11
 506:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
 50a:	24 e0       	ldi	r18, 0x04	; 4
 50c:	4f ed       	ldi	r20, 0xDF	; 223
 50e:	51 e0       	ldi	r21, 0x01	; 1
 510:	68 ef       	ldi	r22, 0xF8	; 248
 512:	7a e2       	ldi	r23, 0x2A	; 42
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 06 01 	call	0x20c	; 0x20c <Timer1_initialize>

    while(1) {
        while(semaphore == 0);
 51c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <semaphore>
 520:	88 23       	and	r24, r24
 522:	e1 f3       	breq	.-8      	; 0x51c <MoveSteps+0xee>
        semaphore = 0;
 524:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <semaphore>

        //keeps track of steps and deactivates stepper when number of steps is complete



        if(steps_x >= 0) {
 528:	11 23       	and	r17, r17
 52a:	1c f0       	brlt	.+6      	; 0x532 <MoveSteps+0x104>
            steps_x--;
 52c:	01 50       	subi	r16, 0x01	; 1
 52e:	11 09       	sbc	r17, r1
 530:	05 c0       	rjmp	.+10     	; 0x53c <MoveSteps+0x10e>
        } else {
            active_steppers &= ~STEP_X;
 532:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <active_steppers>
 536:	8e 7f       	andi	r24, 0xFE	; 254
 538:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <active_steppers>
        }


        if(steps_y >= 0) {
 53c:	ff 20       	and	r15, r15
 53e:	24 f0       	brlt	.+8      	; 0x548 <MoveSteps+0x11a>
            steps_y--;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	e8 1a       	sub	r14, r24
 544:	f1 08       	sbc	r15, r1
 546:	05 c0       	rjmp	.+10     	; 0x552 <MoveSteps+0x124>
        } else {
            active_steppers &= ~STEP_Y;
 548:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <active_steppers>
 54c:	8b 7f       	andi	r24, 0xFB	; 251
 54e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <active_steppers>
        }

        //If both steppers are no longer active, job is done so exit
        if(active_steppers == 0) {
 552:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <active_steppers>
 556:	81 11       	cpse	r24, r1
 558:	e1 cf       	rjmp	.-62     	; 0x51c <MoveSteps+0xee>
            break;
        }
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 55a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 55e:	8a 7f       	andi	r24, 0xFA	; 250
 560:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    Timer1_shutdown();
 564:	0e 94 42 01 	call	0x284	; 0x284 <Timer1_shutdown>
}
 568:	a0 96       	adiw	r28, 0x20	; 32
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	f8 94       	cli
 56e:	de bf       	out	0x3e, r29	; 62
 570:	0f be       	out	0x3f, r0	; 63
 572:	cd bf       	out	0x3d, r28	; 61
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	ff 90       	pop	r15
 57e:	ef 90       	pop	r14
 580:	df 90       	pop	r13
 582:	cf 90       	pop	r12
 584:	bf 90       	pop	r11
 586:	08 95       	ret

00000588 <__floatunsisf>:
 588:	e8 94       	clt
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__floatsisf+0x12>

0000058c <__floatsisf>:
 58c:	97 fb       	bst	r25, 7
 58e:	3e f4       	brtc	.+14     	; 0x59e <__floatsisf+0x12>
 590:	90 95       	com	r25
 592:	80 95       	com	r24
 594:	70 95       	com	r23
 596:	61 95       	neg	r22
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	99 23       	and	r25, r25
 5a0:	a9 f0       	breq	.+42     	; 0x5cc <__floatsisf+0x40>
 5a2:	f9 2f       	mov	r31, r25
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	bb 27       	eor	r27, r27
 5a8:	93 95       	inc	r25
 5aa:	f6 95       	lsr	r31
 5ac:	87 95       	ror	r24
 5ae:	77 95       	ror	r23
 5b0:	67 95       	ror	r22
 5b2:	b7 95       	ror	r27
 5b4:	f1 11       	cpse	r31, r1
 5b6:	f8 cf       	rjmp	.-16     	; 0x5a8 <__floatsisf+0x1c>
 5b8:	fa f4       	brpl	.+62     	; 0x5f8 <__floatsisf+0x6c>
 5ba:	bb 0f       	add	r27, r27
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <__floatsisf+0x36>
 5be:	60 ff       	sbrs	r22, 0
 5c0:	1b c0       	rjmp	.+54     	; 0x5f8 <__floatsisf+0x6c>
 5c2:	6f 5f       	subi	r22, 0xFF	; 255
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	16 c0       	rjmp	.+44     	; 0x5f8 <__floatsisf+0x6c>
 5cc:	88 23       	and	r24, r24
 5ce:	11 f0       	breq	.+4      	; 0x5d4 <__floatsisf+0x48>
 5d0:	96 e9       	ldi	r25, 0x96	; 150
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <__floatsisf+0x6a>
 5d4:	77 23       	and	r23, r23
 5d6:	21 f0       	breq	.+8      	; 0x5e0 <__floatsisf+0x54>
 5d8:	9e e8       	ldi	r25, 0x8E	; 142
 5da:	87 2f       	mov	r24, r23
 5dc:	76 2f       	mov	r23, r22
 5de:	05 c0       	rjmp	.+10     	; 0x5ea <__floatsisf+0x5e>
 5e0:	66 23       	and	r22, r22
 5e2:	71 f0       	breq	.+28     	; 0x600 <__floatsisf+0x74>
 5e4:	96 e8       	ldi	r25, 0x86	; 134
 5e6:	86 2f       	mov	r24, r22
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <__floatsisf+0x6c>
 5ee:	9a 95       	dec	r25
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	da f7       	brpl	.-10     	; 0x5ee <__floatsisf+0x62>
 5f8:	88 0f       	add	r24, r24
 5fa:	96 95       	lsr	r25
 5fc:	87 95       	ror	r24
 5fe:	97 f9       	bld	r25, 7
 600:	08 95       	ret

00000602 <__udivmodsi4>:
 602:	a1 e2       	ldi	r26, 0x21	; 33
 604:	1a 2e       	mov	r1, r26
 606:	aa 1b       	sub	r26, r26
 608:	bb 1b       	sub	r27, r27
 60a:	fd 01       	movw	r30, r26
 60c:	0d c0       	rjmp	.+26     	; 0x628 <__udivmodsi4_ep>

0000060e <__udivmodsi4_loop>:
 60e:	aa 1f       	adc	r26, r26
 610:	bb 1f       	adc	r27, r27
 612:	ee 1f       	adc	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	a2 17       	cp	r26, r18
 618:	b3 07       	cpc	r27, r19
 61a:	e4 07       	cpc	r30, r20
 61c:	f5 07       	cpc	r31, r21
 61e:	20 f0       	brcs	.+8      	; 0x628 <__udivmodsi4_ep>
 620:	a2 1b       	sub	r26, r18
 622:	b3 0b       	sbc	r27, r19
 624:	e4 0b       	sbc	r30, r20
 626:	f5 0b       	sbc	r31, r21

00000628 <__udivmodsi4_ep>:
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	1a 94       	dec	r1
 632:	69 f7       	brne	.-38     	; 0x60e <__udivmodsi4_loop>
 634:	60 95       	com	r22
 636:	70 95       	com	r23
 638:	80 95       	com	r24
 63a:	90 95       	com	r25
 63c:	9b 01       	movw	r18, r22
 63e:	ac 01       	movw	r20, r24
 640:	bd 01       	movw	r22, r26
 642:	cf 01       	movw	r24, r30
 644:	08 95       	ret

00000646 <__divmodsi4>:
 646:	05 2e       	mov	r0, r21
 648:	97 fb       	bst	r25, 7
 64a:	1e f4       	brtc	.+6      	; 0x652 <__divmodsi4+0xc>
 64c:	00 94       	com	r0
 64e:	0e 94 3a 03 	call	0x674	; 0x674 <__negsi2>
 652:	57 fd       	sbrc	r21, 7
 654:	07 d0       	rcall	.+14     	; 0x664 <__divmodsi4_neg2>
 656:	0e 94 01 03 	call	0x602	; 0x602 <__udivmodsi4>
 65a:	07 fc       	sbrc	r0, 7
 65c:	03 d0       	rcall	.+6      	; 0x664 <__divmodsi4_neg2>
 65e:	4e f4       	brtc	.+18     	; 0x672 <__divmodsi4_exit>
 660:	0c 94 3a 03 	jmp	0x674	; 0x674 <__negsi2>

00000664 <__divmodsi4_neg2>:
 664:	50 95       	com	r21
 666:	40 95       	com	r20
 668:	30 95       	com	r19
 66a:	21 95       	neg	r18
 66c:	3f 4f       	sbci	r19, 0xFF	; 255
 66e:	4f 4f       	sbci	r20, 0xFF	; 255
 670:	5f 4f       	sbci	r21, 0xFF	; 255

00000672 <__divmodsi4_exit>:
 672:	08 95       	ret

00000674 <__negsi2>:
 674:	90 95       	com	r25
 676:	80 95       	com	r24
 678:	70 95       	com	r23
 67a:	61 95       	neg	r22
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	08 95       	ret

00000684 <dtostrf>:
 684:	ef 92       	push	r14
 686:	0f 93       	push	r16
 688:	1f 93       	push	r17
 68a:	cf 93       	push	r28
 68c:	df 93       	push	r29
 68e:	e8 01       	movw	r28, r16
 690:	47 fd       	sbrc	r20, 7
 692:	02 c0       	rjmp	.+4      	; 0x698 <dtostrf+0x14>
 694:	34 e0       	ldi	r19, 0x04	; 4
 696:	01 c0       	rjmp	.+2      	; 0x69a <dtostrf+0x16>
 698:	34 e1       	ldi	r19, 0x14	; 20
 69a:	04 2e       	mov	r0, r20
 69c:	00 0c       	add	r0, r0
 69e:	55 0b       	sbc	r21, r21
 6a0:	57 ff       	sbrs	r21, 7
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <dtostrf+0x26>
 6a4:	51 95       	neg	r21
 6a6:	41 95       	neg	r20
 6a8:	51 09       	sbc	r21, r1
 6aa:	e3 2e       	mov	r14, r19
 6ac:	02 2f       	mov	r16, r18
 6ae:	24 2f       	mov	r18, r20
 6b0:	ae 01       	movw	r20, r28
 6b2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <dtoa_prf>
 6b6:	ce 01       	movw	r24, r28
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	1f 91       	pop	r17
 6be:	0f 91       	pop	r16
 6c0:	ef 90       	pop	r14
 6c2:	08 95       	ret

000006c4 <dtoa_prf>:
 6c4:	a9 e0       	ldi	r26, 0x09	; 9
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
 6c8:	e8 e6       	ldi	r30, 0x68	; 104
 6ca:	f3 e0       	ldi	r31, 0x03	; 3
 6cc:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__prologue_saves__+0xc>
 6d0:	6a 01       	movw	r12, r20
 6d2:	12 2f       	mov	r17, r18
 6d4:	b0 2e       	mov	r11, r16
 6d6:	2b e3       	ldi	r18, 0x3B	; 59
 6d8:	20 17       	cp	r18, r16
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <dtoa_prf+0x20>
 6dc:	ff 24       	eor	r15, r15
 6de:	f3 94       	inc	r15
 6e0:	f0 0e       	add	r15, r16
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <dtoa_prf+0x24>
 6e4:	2c e3       	ldi	r18, 0x3C	; 60
 6e6:	f2 2e       	mov	r15, r18
 6e8:	0f 2d       	mov	r16, r15
 6ea:	27 e0       	ldi	r18, 0x07	; 7
 6ec:	ae 01       	movw	r20, r28
 6ee:	4f 5f       	subi	r20, 0xFF	; 255
 6f0:	5f 4f       	sbci	r21, 0xFF	; 255
 6f2:	0e 94 bc 04 	call	0x978	; 0x978 <__ftoa_engine>
 6f6:	bc 01       	movw	r22, r24
 6f8:	49 81       	ldd	r20, Y+1	; 0x01
 6fa:	84 2f       	mov	r24, r20
 6fc:	89 70       	andi	r24, 0x09	; 9
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	31 f0       	breq	.+12     	; 0x70e <dtoa_prf+0x4a>
 702:	e1 fc       	sbrc	r14, 1
 704:	06 c0       	rjmp	.+12     	; 0x712 <dtoa_prf+0x4e>
 706:	e0 fe       	sbrs	r14, 0
 708:	06 c0       	rjmp	.+12     	; 0x716 <dtoa_prf+0x52>
 70a:	90 e2       	ldi	r25, 0x20	; 32
 70c:	05 c0       	rjmp	.+10     	; 0x718 <dtoa_prf+0x54>
 70e:	9d e2       	ldi	r25, 0x2D	; 45
 710:	03 c0       	rjmp	.+6      	; 0x718 <dtoa_prf+0x54>
 712:	9b e2       	ldi	r25, 0x2B	; 43
 714:	01 c0       	rjmp	.+2      	; 0x718 <dtoa_prf+0x54>
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	5e 2d       	mov	r21, r14
 71a:	50 71       	andi	r21, 0x10	; 16
 71c:	43 ff       	sbrs	r20, 3
 71e:	3c c0       	rjmp	.+120    	; 0x798 <dtoa_prf+0xd4>
 720:	91 11       	cpse	r25, r1
 722:	02 c0       	rjmp	.+4      	; 0x728 <dtoa_prf+0x64>
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	01 c0       	rjmp	.+2      	; 0x72a <dtoa_prf+0x66>
 728:	84 e0       	ldi	r24, 0x04	; 4
 72a:	81 17       	cp	r24, r17
 72c:	18 f4       	brcc	.+6      	; 0x734 <dtoa_prf+0x70>
 72e:	21 2f       	mov	r18, r17
 730:	28 1b       	sub	r18, r24
 732:	01 c0       	rjmp	.+2      	; 0x736 <dtoa_prf+0x72>
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	51 11       	cpse	r21, r1
 738:	0b c0       	rjmp	.+22     	; 0x750 <dtoa_prf+0x8c>
 73a:	f6 01       	movw	r30, r12
 73c:	82 2f       	mov	r24, r18
 73e:	30 e2       	ldi	r19, 0x20	; 32
 740:	88 23       	and	r24, r24
 742:	19 f0       	breq	.+6      	; 0x74a <dtoa_prf+0x86>
 744:	31 93       	st	Z+, r19
 746:	81 50       	subi	r24, 0x01	; 1
 748:	fb cf       	rjmp	.-10     	; 0x740 <dtoa_prf+0x7c>
 74a:	c2 0e       	add	r12, r18
 74c:	d1 1c       	adc	r13, r1
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	99 23       	and	r25, r25
 752:	29 f0       	breq	.+10     	; 0x75e <dtoa_prf+0x9a>
 754:	d6 01       	movw	r26, r12
 756:	9c 93       	st	X, r25
 758:	f6 01       	movw	r30, r12
 75a:	31 96       	adiw	r30, 0x01	; 1
 75c:	6f 01       	movw	r12, r30
 75e:	c6 01       	movw	r24, r12
 760:	03 96       	adiw	r24, 0x03	; 3
 762:	e2 fe       	sbrs	r14, 2
 764:	0a c0       	rjmp	.+20     	; 0x77a <dtoa_prf+0xb6>
 766:	3e e4       	ldi	r19, 0x4E	; 78
 768:	d6 01       	movw	r26, r12
 76a:	3c 93       	st	X, r19
 76c:	41 e4       	ldi	r20, 0x41	; 65
 76e:	11 96       	adiw	r26, 0x01	; 1
 770:	4c 93       	st	X, r20
 772:	11 97       	sbiw	r26, 0x01	; 1
 774:	12 96       	adiw	r26, 0x02	; 2
 776:	3c 93       	st	X, r19
 778:	06 c0       	rjmp	.+12     	; 0x786 <dtoa_prf+0xc2>
 77a:	3e e6       	ldi	r19, 0x6E	; 110
 77c:	f6 01       	movw	r30, r12
 77e:	30 83       	st	Z, r19
 780:	41 e6       	ldi	r20, 0x61	; 97
 782:	41 83       	std	Z+1, r20	; 0x01
 784:	32 83       	std	Z+2, r19	; 0x02
 786:	fc 01       	movw	r30, r24
 788:	32 2f       	mov	r19, r18
 78a:	40 e2       	ldi	r20, 0x20	; 32
 78c:	33 23       	and	r19, r19
 78e:	09 f4       	brne	.+2      	; 0x792 <dtoa_prf+0xce>
 790:	42 c0       	rjmp	.+132    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 792:	41 93       	st	Z+, r20
 794:	31 50       	subi	r19, 0x01	; 1
 796:	fa cf       	rjmp	.-12     	; 0x78c <dtoa_prf+0xc8>
 798:	42 ff       	sbrs	r20, 2
 79a:	44 c0       	rjmp	.+136    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 79c:	91 11       	cpse	r25, r1
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <dtoa_prf+0xe0>
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <dtoa_prf+0xe2>
 7a4:	84 e0       	ldi	r24, 0x04	; 4
 7a6:	81 17       	cp	r24, r17
 7a8:	18 f4       	brcc	.+6      	; 0x7b0 <dtoa_prf+0xec>
 7aa:	21 2f       	mov	r18, r17
 7ac:	28 1b       	sub	r18, r24
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <dtoa_prf+0xee>
 7b0:	20 e0       	ldi	r18, 0x00	; 0
 7b2:	51 11       	cpse	r21, r1
 7b4:	0b c0       	rjmp	.+22     	; 0x7cc <dtoa_prf+0x108>
 7b6:	f6 01       	movw	r30, r12
 7b8:	82 2f       	mov	r24, r18
 7ba:	30 e2       	ldi	r19, 0x20	; 32
 7bc:	88 23       	and	r24, r24
 7be:	19 f0       	breq	.+6      	; 0x7c6 <dtoa_prf+0x102>
 7c0:	31 93       	st	Z+, r19
 7c2:	81 50       	subi	r24, 0x01	; 1
 7c4:	fb cf       	rjmp	.-10     	; 0x7bc <dtoa_prf+0xf8>
 7c6:	c2 0e       	add	r12, r18
 7c8:	d1 1c       	adc	r13, r1
 7ca:	20 e0       	ldi	r18, 0x00	; 0
 7cc:	99 23       	and	r25, r25
 7ce:	29 f0       	breq	.+10     	; 0x7da <dtoa_prf+0x116>
 7d0:	d6 01       	movw	r26, r12
 7d2:	9c 93       	st	X, r25
 7d4:	f6 01       	movw	r30, r12
 7d6:	31 96       	adiw	r30, 0x01	; 1
 7d8:	6f 01       	movw	r12, r30
 7da:	c6 01       	movw	r24, r12
 7dc:	03 96       	adiw	r24, 0x03	; 3
 7de:	e2 fe       	sbrs	r14, 2
 7e0:	0b c0       	rjmp	.+22     	; 0x7f8 <dtoa_prf+0x134>
 7e2:	39 e4       	ldi	r19, 0x49	; 73
 7e4:	d6 01       	movw	r26, r12
 7e6:	3c 93       	st	X, r19
 7e8:	3e e4       	ldi	r19, 0x4E	; 78
 7ea:	11 96       	adiw	r26, 0x01	; 1
 7ec:	3c 93       	st	X, r19
 7ee:	11 97       	sbiw	r26, 0x01	; 1
 7f0:	36 e4       	ldi	r19, 0x46	; 70
 7f2:	12 96       	adiw	r26, 0x02	; 2
 7f4:	3c 93       	st	X, r19
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f8:	39 e6       	ldi	r19, 0x69	; 105
 7fa:	f6 01       	movw	r30, r12
 7fc:	30 83       	st	Z, r19
 7fe:	3e e6       	ldi	r19, 0x6E	; 110
 800:	31 83       	std	Z+1, r19	; 0x01
 802:	36 e6       	ldi	r19, 0x66	; 102
 804:	32 83       	std	Z+2, r19	; 0x02
 806:	fc 01       	movw	r30, r24
 808:	32 2f       	mov	r19, r18
 80a:	40 e2       	ldi	r20, 0x20	; 32
 80c:	33 23       	and	r19, r19
 80e:	19 f0       	breq	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	41 93       	st	Z+, r20
 812:	31 50       	subi	r19, 0x01	; 1
 814:	fb cf       	rjmp	.-10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 816:	fc 01       	movw	r30, r24
 818:	e2 0f       	add	r30, r18
 81a:	f1 1d       	adc	r31, r1
 81c:	10 82       	st	Z, r1
 81e:	8e ef       	ldi	r24, 0xFE	; 254
 820:	9f ef       	ldi	r25, 0xFF	; 255
 822:	a6 c0       	rjmp	.+332    	; 0x970 <__stack+0x71>
 824:	21 e0       	ldi	r18, 0x01	; 1
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	91 11       	cpse	r25, r1
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	20 e0       	ldi	r18, 0x00	; 0
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	16 16       	cp	r1, r22
 832:	17 06       	cpc	r1, r23
 834:	1c f4       	brge	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 836:	fb 01       	movw	r30, r22
 838:	31 96       	adiw	r30, 0x01	; 1
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	e1 e0       	ldi	r30, 0x01	; 1
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	2e 0f       	add	r18, r30
 842:	3f 1f       	adc	r19, r31
 844:	bb 20       	and	r11, r11
 846:	21 f0       	breq	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 848:	eb 2d       	mov	r30, r11
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	31 96       	adiw	r30, 0x01	; 1
 84e:	02 c0       	rjmp	.+4      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 850:	e0 e0       	ldi	r30, 0x00	; 0
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	2e 0f       	add	r18, r30
 856:	3f 1f       	adc	r19, r31
 858:	e1 2f       	mov	r30, r17
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	2e 17       	cp	r18, r30
 85e:	3f 07       	cpc	r19, r31
 860:	1c f4       	brge	.+6      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 862:	12 1b       	sub	r17, r18
 864:	21 2f       	mov	r18, r17
 866:	01 c0       	rjmp	.+2      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 868:	20 e0       	ldi	r18, 0x00	; 0
 86a:	8e 2d       	mov	r24, r14
 86c:	88 71       	andi	r24, 0x18	; 24
 86e:	59 f4       	brne	.+22     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 870:	f6 01       	movw	r30, r12
 872:	82 2f       	mov	r24, r18
 874:	30 e2       	ldi	r19, 0x20	; 32
 876:	88 23       	and	r24, r24
 878:	19 f0       	breq	.+6      	; 0x880 <__DATA_REGION_LENGTH__+0x80>
 87a:	31 93       	st	Z+, r19
 87c:	81 50       	subi	r24, 0x01	; 1
 87e:	fb cf       	rjmp	.-10     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 880:	c2 0e       	add	r12, r18
 882:	d1 1c       	adc	r13, r1
 884:	20 e0       	ldi	r18, 0x00	; 0
 886:	99 23       	and	r25, r25
 888:	29 f0       	breq	.+10     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
 88a:	d6 01       	movw	r26, r12
 88c:	9c 93       	st	X, r25
 88e:	f6 01       	movw	r30, r12
 890:	31 96       	adiw	r30, 0x01	; 1
 892:	6f 01       	movw	r12, r30
 894:	51 11       	cpse	r21, r1
 896:	0b c0       	rjmp	.+22     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 898:	f6 01       	movw	r30, r12
 89a:	82 2f       	mov	r24, r18
 89c:	90 e3       	ldi	r25, 0x30	; 48
 89e:	88 23       	and	r24, r24
 8a0:	19 f0       	breq	.+6      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a2:	91 93       	st	Z+, r25
 8a4:	81 50       	subi	r24, 0x01	; 1
 8a6:	fb cf       	rjmp	.-10     	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 8a8:	c2 0e       	add	r12, r18
 8aa:	d1 1c       	adc	r13, r1
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	0f 2d       	mov	r16, r15
 8b0:	06 0f       	add	r16, r22
 8b2:	9a 81       	ldd	r25, Y+2	; 0x02
 8b4:	34 2f       	mov	r19, r20
 8b6:	30 71       	andi	r19, 0x10	; 16
 8b8:	44 ff       	sbrs	r20, 4
 8ba:	03 c0       	rjmp	.+6      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8bc:	91 33       	cpi	r25, 0x31	; 49
 8be:	09 f4       	brne	.+2      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8c0:	01 50       	subi	r16, 0x01	; 1
 8c2:	10 16       	cp	r1, r16
 8c4:	24 f4       	brge	.+8      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8c6:	09 30       	cpi	r16, 0x09	; 9
 8c8:	18 f0       	brcs	.+6      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ca:	08 e0       	ldi	r16, 0x08	; 8
 8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ce:	01 e0       	ldi	r16, 0x01	; 1
 8d0:	ab 01       	movw	r20, r22
 8d2:	77 ff       	sbrs	r23, 7
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	50 e0       	ldi	r21, 0x00	; 0
 8da:	fb 01       	movw	r30, r22
 8dc:	e4 1b       	sub	r30, r20
 8de:	f5 0b       	sbc	r31, r21
 8e0:	a1 e0       	ldi	r26, 0x01	; 1
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	ac 0f       	add	r26, r28
 8e6:	bd 1f       	adc	r27, r29
 8e8:	ea 0f       	add	r30, r26
 8ea:	fb 1f       	adc	r31, r27
 8ec:	8e e2       	ldi	r24, 0x2E	; 46
 8ee:	a8 2e       	mov	r10, r24
 8f0:	4b 01       	movw	r8, r22
 8f2:	80 1a       	sub	r8, r16
 8f4:	91 08       	sbc	r9, r1
 8f6:	0b 2d       	mov	r16, r11
 8f8:	10 e0       	ldi	r17, 0x00	; 0
 8fa:	11 95       	neg	r17
 8fc:	01 95       	neg	r16
 8fe:	11 09       	sbc	r17, r1
 900:	4f 3f       	cpi	r20, 0xFF	; 255
 902:	bf ef       	ldi	r27, 0xFF	; 255
 904:	5b 07       	cpc	r21, r27
 906:	21 f4       	brne	.+8      	; 0x910 <__stack+0x11>
 908:	d6 01       	movw	r26, r12
 90a:	ac 92       	st	X, r10
 90c:	11 96       	adiw	r26, 0x01	; 1
 90e:	6d 01       	movw	r12, r26
 910:	64 17       	cp	r22, r20
 912:	75 07       	cpc	r23, r21
 914:	2c f0       	brlt	.+10     	; 0x920 <__stack+0x21>
 916:	84 16       	cp	r8, r20
 918:	95 06       	cpc	r9, r21
 91a:	14 f4       	brge	.+4      	; 0x920 <__stack+0x21>
 91c:	81 81       	ldd	r24, Z+1	; 0x01
 91e:	01 c0       	rjmp	.+2      	; 0x922 <__stack+0x23>
 920:	80 e3       	ldi	r24, 0x30	; 48
 922:	41 50       	subi	r20, 0x01	; 1
 924:	51 09       	sbc	r21, r1
 926:	31 96       	adiw	r30, 0x01	; 1
 928:	d6 01       	movw	r26, r12
 92a:	11 96       	adiw	r26, 0x01	; 1
 92c:	7d 01       	movw	r14, r26
 92e:	40 17       	cp	r20, r16
 930:	51 07       	cpc	r21, r17
 932:	24 f0       	brlt	.+8      	; 0x93c <__stack+0x3d>
 934:	d6 01       	movw	r26, r12
 936:	8c 93       	st	X, r24
 938:	67 01       	movw	r12, r14
 93a:	e2 cf       	rjmp	.-60     	; 0x900 <__stack+0x1>
 93c:	64 17       	cp	r22, r20
 93e:	75 07       	cpc	r23, r21
 940:	39 f4       	brne	.+14     	; 0x950 <__stack+0x51>
 942:	96 33       	cpi	r25, 0x36	; 54
 944:	20 f4       	brcc	.+8      	; 0x94e <__stack+0x4f>
 946:	95 33       	cpi	r25, 0x35	; 53
 948:	19 f4       	brne	.+6      	; 0x950 <__stack+0x51>
 94a:	31 11       	cpse	r19, r1
 94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
 94e:	81 e3       	ldi	r24, 0x31	; 49
 950:	f6 01       	movw	r30, r12
 952:	80 83       	st	Z, r24
 954:	f7 01       	movw	r30, r14
 956:	82 2f       	mov	r24, r18
 958:	90 e2       	ldi	r25, 0x20	; 32
 95a:	88 23       	and	r24, r24
 95c:	19 f0       	breq	.+6      	; 0x964 <__stack+0x65>
 95e:	91 93       	st	Z+, r25
 960:	81 50       	subi	r24, 0x01	; 1
 962:	fb cf       	rjmp	.-10     	; 0x95a <__stack+0x5b>
 964:	f7 01       	movw	r30, r14
 966:	e2 0f       	add	r30, r18
 968:	f1 1d       	adc	r31, r1
 96a:	10 82       	st	Z, r1
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	29 96       	adiw	r28, 0x09	; 9
 972:	ec e0       	ldi	r30, 0x0C	; 12
 974:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__epilogue_restores__+0xc>

00000978 <__ftoa_engine>:
 978:	28 30       	cpi	r18, 0x08	; 8
 97a:	08 f0       	brcs	.+2      	; 0x97e <__ftoa_engine+0x6>
 97c:	27 e0       	ldi	r18, 0x07	; 7
 97e:	33 27       	eor	r19, r19
 980:	da 01       	movw	r26, r20
 982:	99 0f       	add	r25, r25
 984:	31 1d       	adc	r19, r1
 986:	87 fd       	sbrc	r24, 7
 988:	91 60       	ori	r25, 0x01	; 1
 98a:	00 96       	adiw	r24, 0x00	; 0
 98c:	61 05       	cpc	r22, r1
 98e:	71 05       	cpc	r23, r1
 990:	39 f4       	brne	.+14     	; 0x9a0 <__ftoa_engine+0x28>
 992:	32 60       	ori	r19, 0x02	; 2
 994:	2e 5f       	subi	r18, 0xFE	; 254
 996:	3d 93       	st	X+, r19
 998:	30 e3       	ldi	r19, 0x30	; 48
 99a:	2a 95       	dec	r18
 99c:	e1 f7       	brne	.-8      	; 0x996 <__ftoa_engine+0x1e>
 99e:	08 95       	ret
 9a0:	9f 3f       	cpi	r25, 0xFF	; 255
 9a2:	30 f0       	brcs	.+12     	; 0x9b0 <__ftoa_engine+0x38>
 9a4:	80 38       	cpi	r24, 0x80	; 128
 9a6:	71 05       	cpc	r23, r1
 9a8:	61 05       	cpc	r22, r1
 9aa:	09 f0       	breq	.+2      	; 0x9ae <__ftoa_engine+0x36>
 9ac:	3c 5f       	subi	r19, 0xFC	; 252
 9ae:	3c 5f       	subi	r19, 0xFC	; 252
 9b0:	3d 93       	st	X+, r19
 9b2:	91 30       	cpi	r25, 0x01	; 1
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__ftoa_engine+0x40>
 9b6:	80 68       	ori	r24, 0x80	; 128
 9b8:	91 1d       	adc	r25, r1
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	1f 93       	push	r17
 9c0:	0f 93       	push	r16
 9c2:	ff 92       	push	r15
 9c4:	ef 92       	push	r14
 9c6:	19 2f       	mov	r17, r25
 9c8:	98 7f       	andi	r25, 0xF8	; 248
 9ca:	96 95       	lsr	r25
 9cc:	e9 2f       	mov	r30, r25
 9ce:	96 95       	lsr	r25
 9d0:	96 95       	lsr	r25
 9d2:	e9 0f       	add	r30, r25
 9d4:	ff 27       	eor	r31, r31
 9d6:	ee 53       	subi	r30, 0x3E	; 62
 9d8:	ff 4f       	sbci	r31, 0xFF	; 255
 9da:	99 27       	eor	r25, r25
 9dc:	33 27       	eor	r19, r19
 9de:	ee 24       	eor	r14, r14
 9e0:	ff 24       	eor	r15, r15
 9e2:	a7 01       	movw	r20, r14
 9e4:	e7 01       	movw	r28, r14
 9e6:	05 90       	lpm	r0, Z+
 9e8:	08 94       	sec
 9ea:	07 94       	ror	r0
 9ec:	28 f4       	brcc	.+10     	; 0x9f8 <__ftoa_engine+0x80>
 9ee:	36 0f       	add	r19, r22
 9f0:	e7 1e       	adc	r14, r23
 9f2:	f8 1e       	adc	r15, r24
 9f4:	49 1f       	adc	r20, r25
 9f6:	51 1d       	adc	r21, r1
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	06 94       	lsr	r0
 a02:	a1 f7       	brne	.-24     	; 0x9ec <__ftoa_engine+0x74>
 a04:	05 90       	lpm	r0, Z+
 a06:	07 94       	ror	r0
 a08:	28 f4       	brcc	.+10     	; 0xa14 <__ftoa_engine+0x9c>
 a0a:	e7 0e       	add	r14, r23
 a0c:	f8 1e       	adc	r15, r24
 a0e:	49 1f       	adc	r20, r25
 a10:	56 1f       	adc	r21, r22
 a12:	c1 1d       	adc	r28, r1
 a14:	77 0f       	add	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	99 1f       	adc	r25, r25
 a1a:	66 1f       	adc	r22, r22
 a1c:	06 94       	lsr	r0
 a1e:	a1 f7       	brne	.-24     	; 0xa08 <__ftoa_engine+0x90>
 a20:	05 90       	lpm	r0, Z+
 a22:	07 94       	ror	r0
 a24:	28 f4       	brcc	.+10     	; 0xa30 <__ftoa_engine+0xb8>
 a26:	f8 0e       	add	r15, r24
 a28:	49 1f       	adc	r20, r25
 a2a:	56 1f       	adc	r21, r22
 a2c:	c7 1f       	adc	r28, r23
 a2e:	d1 1d       	adc	r29, r1
 a30:	88 0f       	add	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	06 94       	lsr	r0
 a3a:	a1 f7       	brne	.-24     	; 0xa24 <__ftoa_engine+0xac>
 a3c:	05 90       	lpm	r0, Z+
 a3e:	07 94       	ror	r0
 a40:	20 f4       	brcc	.+8      	; 0xa4a <__ftoa_engine+0xd2>
 a42:	49 0f       	add	r20, r25
 a44:	56 1f       	adc	r21, r22
 a46:	c7 1f       	adc	r28, r23
 a48:	d8 1f       	adc	r29, r24
 a4a:	99 0f       	add	r25, r25
 a4c:	66 1f       	adc	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	06 94       	lsr	r0
 a54:	a9 f7       	brne	.-22     	; 0xa40 <__ftoa_engine+0xc8>
 a56:	84 91       	lpm	r24, Z
 a58:	10 95       	com	r17
 a5a:	17 70       	andi	r17, 0x07	; 7
 a5c:	41 f0       	breq	.+16     	; 0xa6e <__ftoa_engine+0xf6>
 a5e:	d6 95       	lsr	r29
 a60:	c7 95       	ror	r28
 a62:	57 95       	ror	r21
 a64:	47 95       	ror	r20
 a66:	f7 94       	ror	r15
 a68:	e7 94       	ror	r14
 a6a:	1a 95       	dec	r17
 a6c:	c1 f7       	brne	.-16     	; 0xa5e <__ftoa_engine+0xe6>
 a6e:	e8 e6       	ldi	r30, 0x68	; 104
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	68 94       	set
 a74:	15 90       	lpm	r1, Z+
 a76:	15 91       	lpm	r17, Z+
 a78:	35 91       	lpm	r19, Z+
 a7a:	65 91       	lpm	r22, Z+
 a7c:	95 91       	lpm	r25, Z+
 a7e:	05 90       	lpm	r0, Z+
 a80:	7f e2       	ldi	r23, 0x2F	; 47
 a82:	73 95       	inc	r23
 a84:	e1 18       	sub	r14, r1
 a86:	f1 0a       	sbc	r15, r17
 a88:	43 0b       	sbc	r20, r19
 a8a:	56 0b       	sbc	r21, r22
 a8c:	c9 0b       	sbc	r28, r25
 a8e:	d0 09       	sbc	r29, r0
 a90:	c0 f7       	brcc	.-16     	; 0xa82 <__ftoa_engine+0x10a>
 a92:	e1 0c       	add	r14, r1
 a94:	f1 1e       	adc	r15, r17
 a96:	43 1f       	adc	r20, r19
 a98:	56 1f       	adc	r21, r22
 a9a:	c9 1f       	adc	r28, r25
 a9c:	d0 1d       	adc	r29, r0
 a9e:	7e f4       	brtc	.+30     	; 0xabe <__ftoa_engine+0x146>
 aa0:	70 33       	cpi	r23, 0x30	; 48
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__ftoa_engine+0x130>
 aa4:	8a 95       	dec	r24
 aa6:	e6 cf       	rjmp	.-52     	; 0xa74 <__ftoa_engine+0xfc>
 aa8:	e8 94       	clt
 aaa:	01 50       	subi	r16, 0x01	; 1
 aac:	30 f0       	brcs	.+12     	; 0xaba <__ftoa_engine+0x142>
 aae:	08 0f       	add	r16, r24
 ab0:	0a f4       	brpl	.+2      	; 0xab4 <__ftoa_engine+0x13c>
 ab2:	00 27       	eor	r16, r16
 ab4:	02 17       	cp	r16, r18
 ab6:	08 f4       	brcc	.+2      	; 0xaba <__ftoa_engine+0x142>
 ab8:	20 2f       	mov	r18, r16
 aba:	23 95       	inc	r18
 abc:	02 2f       	mov	r16, r18
 abe:	7a 33       	cpi	r23, 0x3A	; 58
 ac0:	28 f0       	brcs	.+10     	; 0xacc <__ftoa_engine+0x154>
 ac2:	79 e3       	ldi	r23, 0x39	; 57
 ac4:	7d 93       	st	X+, r23
 ac6:	2a 95       	dec	r18
 ac8:	e9 f7       	brne	.-6      	; 0xac4 <__ftoa_engine+0x14c>
 aca:	10 c0       	rjmp	.+32     	; 0xaec <__ftoa_engine+0x174>
 acc:	7d 93       	st	X+, r23
 ace:	2a 95       	dec	r18
 ad0:	89 f6       	brne	.-94     	; 0xa74 <__ftoa_engine+0xfc>
 ad2:	06 94       	lsr	r0
 ad4:	97 95       	ror	r25
 ad6:	67 95       	ror	r22
 ad8:	37 95       	ror	r19
 ada:	17 95       	ror	r17
 adc:	17 94       	ror	r1
 ade:	e1 18       	sub	r14, r1
 ae0:	f1 0a       	sbc	r15, r17
 ae2:	43 0b       	sbc	r20, r19
 ae4:	56 0b       	sbc	r21, r22
 ae6:	c9 0b       	sbc	r28, r25
 ae8:	d0 09       	sbc	r29, r0
 aea:	98 f0       	brcs	.+38     	; 0xb12 <__ftoa_engine+0x19a>
 aec:	23 95       	inc	r18
 aee:	7e 91       	ld	r23, -X
 af0:	73 95       	inc	r23
 af2:	7a 33       	cpi	r23, 0x3A	; 58
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__ftoa_engine+0x180>
 af6:	70 e3       	ldi	r23, 0x30	; 48
 af8:	7c 93       	st	X, r23
 afa:	20 13       	cpse	r18, r16
 afc:	b8 f7       	brcc	.-18     	; 0xaec <__ftoa_engine+0x174>
 afe:	7e 91       	ld	r23, -X
 b00:	70 61       	ori	r23, 0x10	; 16
 b02:	7d 93       	st	X+, r23
 b04:	30 f0       	brcs	.+12     	; 0xb12 <__ftoa_engine+0x19a>
 b06:	83 95       	inc	r24
 b08:	71 e3       	ldi	r23, 0x31	; 49
 b0a:	7d 93       	st	X+, r23
 b0c:	70 e3       	ldi	r23, 0x30	; 48
 b0e:	2a 95       	dec	r18
 b10:	e1 f7       	brne	.-8      	; 0xb0a <__ftoa_engine+0x192>
 b12:	11 24       	eor	r1, r1
 b14:	ef 90       	pop	r14
 b16:	ff 90       	pop	r15
 b18:	0f 91       	pop	r16
 b1a:	1f 91       	pop	r17
 b1c:	cf 91       	pop	r28
 b1e:	df 91       	pop	r29
 b20:	99 27       	eor	r25, r25
 b22:	87 fd       	sbrc	r24, 7
 b24:	90 95       	com	r25
 b26:	08 95       	ret

00000b28 <__prologue_saves__>:
 b28:	2f 92       	push	r2
 b2a:	3f 92       	push	r3
 b2c:	4f 92       	push	r4
 b2e:	5f 92       	push	r5
 b30:	6f 92       	push	r6
 b32:	7f 92       	push	r7
 b34:	8f 92       	push	r8
 b36:	9f 92       	push	r9
 b38:	af 92       	push	r10
 b3a:	bf 92       	push	r11
 b3c:	cf 92       	push	r12
 b3e:	df 92       	push	r13
 b40:	ef 92       	push	r14
 b42:	ff 92       	push	r15
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	cd b7       	in	r28, 0x3d	; 61
 b4e:	de b7       	in	r29, 0x3e	; 62
 b50:	ca 1b       	sub	r28, r26
 b52:	db 0b       	sbc	r29, r27
 b54:	0f b6       	in	r0, 0x3f	; 63
 b56:	f8 94       	cli
 b58:	de bf       	out	0x3e, r29	; 62
 b5a:	0f be       	out	0x3f, r0	; 63
 b5c:	cd bf       	out	0x3d, r28	; 61
 b5e:	09 94       	ijmp

00000b60 <__epilogue_restores__>:
 b60:	2a 88       	ldd	r2, Y+18	; 0x12
 b62:	39 88       	ldd	r3, Y+17	; 0x11
 b64:	48 88       	ldd	r4, Y+16	; 0x10
 b66:	5f 84       	ldd	r5, Y+15	; 0x0f
 b68:	6e 84       	ldd	r6, Y+14	; 0x0e
 b6a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b6c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b6e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b70:	aa 84       	ldd	r10, Y+10	; 0x0a
 b72:	b9 84       	ldd	r11, Y+9	; 0x09
 b74:	c8 84       	ldd	r12, Y+8	; 0x08
 b76:	df 80       	ldd	r13, Y+7	; 0x07
 b78:	ee 80       	ldd	r14, Y+6	; 0x06
 b7a:	fd 80       	ldd	r15, Y+5	; 0x05
 b7c:	0c 81       	ldd	r16, Y+4	; 0x04
 b7e:	1b 81       	ldd	r17, Y+3	; 0x03
 b80:	aa 81       	ldd	r26, Y+2	; 0x02
 b82:	b9 81       	ldd	r27, Y+1	; 0x01
 b84:	ce 0f       	add	r28, r30
 b86:	d1 1d       	adc	r29, r1
 b88:	0f b6       	in	r0, 0x3f	; 63
 b8a:	f8 94       	cli
 b8c:	de bf       	out	0x3e, r29	; 62
 b8e:	0f be       	out	0x3f, r0	; 63
 b90:	cd bf       	out	0x3d, r28	; 61
 b92:	ed 01       	movw	r28, r26
 b94:	08 95       	ret

00000b96 <_exit>:
 b96:	f8 94       	cli

00000b98 <__stop_program>:
 b98:	ff cf       	rjmp	.-2      	; 0xb98 <__stop_program>
