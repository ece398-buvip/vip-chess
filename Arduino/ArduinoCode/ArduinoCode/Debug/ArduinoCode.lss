
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000c02  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800116  00800116  00000cac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001567  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba8  00000000  00000000  0000244b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9b  00000000  00000000  00002ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000044c  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000722  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1d  00000000  00000000  000048fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000551b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
   4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
   c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
  30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 40       	sbci	r16, 0x00	; 0
  6a:	7a 10       	cpse	r7, r10
  6c:	f3 5a       	subi	r31, 0xA3	; 163
  6e:	00 a0       	ldd	r0, Z+32	; 0x20
  70:	72 4e       	sbci	r23, 0xE2	; 226
  72:	18 09       	sbc	r17, r8
  74:	00 10       	cpse	r0, r0
  76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
  78:	e8 00       	.word	0x00e8	; ????
  7a:	00 e8       	ldi	r16, 0x80	; 128
  7c:	76 48       	sbci	r23, 0x86	; 134
  7e:	17 00       	.word	0x0017	; ????
  80:	00 e4       	ldi	r16, 0x40	; 64
  82:	0b 54       	subi	r16, 0x4B	; 75
  84:	02 00       	.word	0x0002	; ????
  86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
  88:	9a 3b       	cpi	r25, 0xBA	; 186
  8a:	00 00       	nop
  8c:	00 e1       	ldi	r16, 0x10	; 16
  8e:	f5 05       	cpc	r31, r5
  90:	00 00       	nop
  92:	80 96       	adiw	r24, 0x20	; 32
  94:	98 00       	.word	0x0098	; ????
  96:	00 00       	nop
  98:	40 42       	sbci	r20, 0x20	; 32
  9a:	0f 00       	.word	0x000f	; ????
  9c:	00 00       	nop
  9e:	a0 86       	std	Z+8, r10	; 0x08
  a0:	01 00       	.word	0x0001	; ????
  a2:	00 00       	nop
  a4:	10 27       	eor	r17, r16
  a6:	00 00       	nop
  a8:	00 00       	nop
  aa:	e8 03       	fmulsu	r22, r16
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	64 00       	.word	0x0064	; ????
  b2:	00 00       	nop
  b4:	00 00       	nop
  b6:	0a 00       	.word	0x000a	; ????
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	01 00       	.word	0x0001	; ????
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	2c 76       	andi	r18, 0x6C	; 108
  c4:	d8 88       	ldd	r13, Y+16	; 0x10
  c6:	dc 67       	ori	r29, 0x7C	; 124
  c8:	4f 08       	sbc	r4, r15
  ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
  cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
  ce:	ae 59       	subi	r26, 0x9E	; 158
  d0:	e1 b1       	in	r30, 0x01	; 1
  d2:	b7 96       	adiw	r30, 0x27	; 39
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	e4 53       	subi	r30, 0x34	; 52
  d8:	c6 3a       	cpi	r28, 0xA6	; 166
  da:	e6 51       	subi	r30, 0x16	; 22
  dc:	99 76       	andi	r25, 0x69	; 105
  de:	96 e8       	ldi	r25, 0x86	; 134
  e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <__divmodsi4>
  e2:	84 26       	eor	r8, r20
  e4:	eb 89       	ldd	r30, Y+19	; 0x13
  e6:	8c 9b       	sbis	0x11, 4	; 17
  e8:	62 ed       	ldi	r22, 0xD2	; 210
  ea:	40 7c       	andi	r20, 0xC0	; 192
  ec:	6f fc       	.word	0xfc6f	; ????
  ee:	ef bc       	out	0x2f, r14	; 47
  f0:	9c 9f       	mul	r25, r28
  f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
  f4:	ba a5       	ldd	r27, Y+42	; 0x2a
  f6:	6f a5       	ldd	r22, Y+47	; 0x2f
  f8:	f4 90       	lpm	r15, Z
  fa:	05 5a       	subi	r16, 0xA5	; 165
  fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
  fe:	5c 93       	st	X, r21
 100:	6b 6c       	ori	r22, 0xCB	; 203
 102:	f9 67       	ori	r31, 0x79	; 121
 104:	6d c1       	rjmp	.+730    	; 0x3e0 <main+0x4e>
 106:	1b fc       	.word	0xfc1b	; ????
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	0d 47       	sbci	r16, 0x7D	; 125
 10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
 10e:	20 e6       	ldi	r18, 0x60	; 96
 110:	b5 00       	.word	0x00b5	; ????
 112:	d0 ed       	ldi	r29, 0xD0	; 208
 114:	90 2e       	mov	r9, r16
 116:	03 00       	.word	0x0003	; ????
 118:	94 35       	cpi	r25, 0x54	; 84
 11a:	77 05       	cpc	r23, r7
 11c:	00 80       	ld	r0, Z
 11e:	84 1e       	adc	r8, r20
 120:	08 00       	.word	0x0008	; ????
 122:	00 20       	and	r0, r0
 124:	4e 0a       	sbc	r4, r30
 126:	00 00       	nop
 128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
 12a:	0c 33       	cpi	r16, 0x3C	; 60
 12c:	33 33       	cpi	r19, 0x33	; 51
 12e:	33 0f       	add	r19, r19
 130:	98 6e       	ori	r25, 0xE8	; 232
 132:	12 83       	std	Z+2, r17	; 0x02
 134:	11 41       	sbci	r17, 0x11	; 17
 136:	ef 8d       	ldd	r30, Y+31	; 0x1f
 138:	21 14       	cp	r2, r1
 13a:	89 3b       	cpi	r24, 0xB9	; 185
 13c:	e6 55       	subi	r30, 0x56	; 86
 13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
 140:	fe e6       	ldi	r31, 0x6E	; 110
 142:	db 18       	sub	r13, r11
 144:	d1 84       	ldd	r13, Z+9	; 0x09
 146:	4b 38       	cpi	r20, 0x8B	; 139
 148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
 14a:	7c 1d       	adc	r23, r12
 14c:	90 1d       	adc	r25, r0
 14e:	a4 bb       	out	0x14, r26	; 20
 150:	e4 24       	eor	r14, r4
 152:	20 32       	cpi	r18, 0x20	; 32
 154:	84 72       	andi	r24, 0x24	; 36
 156:	5e 22       	and	r5, r30
 158:	81 00       	.word	0x0081	; ????
 15a:	c9 f1       	breq	.+114    	; 0x1ce <SetPortC+0x4>
 15c:	24 ec       	ldi	r18, 0xC4	; 196
 15e:	a1 e5       	ldi	r26, 0x51	; 81
 160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
 162:	11 24       	eor	r1, r1
 164:	1f be       	out	0x3f, r1	; 63
 166:	cf ef       	ldi	r28, 0xFF	; 255
 168:	d8 e0       	ldi	r29, 0x08	; 8
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
 16e:	11 e0       	ldi	r17, 0x01	; 1
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b1 e0       	ldi	r27, 0x01	; 1
 174:	e2 e0       	ldi	r30, 0x02	; 2
 176:	fc e0       	ldi	r31, 0x0C	; 12
 178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
 17a:	05 90       	lpm	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	a6 31       	cpi	r26, 0x16	; 22
 180:	b1 07       	cpc	r27, r17
 182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	a6 e1       	ldi	r26, 0x16	; 22
 188:	b1 e0       	ldi	r27, 0x01	; 1
 18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
 18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
 18e:	ac 31       	cpi	r26, 0x1C	; 28
 190:	b2 07       	cpc	r27, r18
 192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
 194:	0e 94 c9 01 	call	0x392	; 0x392 <main>
 198:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_exit>

0000019c <__bad_interrupt>:
 19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <GetPortD>:
///////PORT D/////////


uint8_t GetPortD(void)
{
    return (PIND & MASK_PORTD);
 1a0:	89 b1       	in	r24, 0x09	; 9
}
 1a2:	8c 7f       	andi	r24, 0xFC	; 252
 1a4:	08 95       	ret

000001a6 <SetPortD>:

void SetPortD(uint8_t out)
{
    PORTD = (PORTD & ~MASK_PORTD) | ((out & MASK_PORTD));
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	93 70       	andi	r25, 0x03	; 3
 1aa:	8c 7f       	andi	r24, 0xFC	; 252
 1ac:	89 2b       	or	r24, r25
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	08 95       	ret

000001b2 <GetDDRD>:
}

uint8_t GetDDRD(void)
{
    return (DDRD & MASK_PORTD);
 1b2:	8a b1       	in	r24, 0x0a	; 10
}
 1b4:	8c 7f       	andi	r24, 0xFC	; 252
 1b6:	08 95       	ret

000001b8 <SetDDRD>:

void SetDDRD(uint8_t direction)
{
    DDRD = (DDRD & ~MASK_PORTD) | (direction & MASK_PORTD);
 1b8:	9a b1       	in	r25, 0x0a	; 10
 1ba:	93 70       	andi	r25, 0x03	; 3
 1bc:	8c 7f       	andi	r24, 0xFC	; 252
 1be:	89 2b       	or	r24, r25
 1c0:	8a b9       	out	0x0a, r24	; 10
 1c2:	08 95       	ret

000001c4 <GetPortC>:
///////PORT C/////////


uint8_t GetPortC (void)
{
    return(PINC & MASK_PORTC);
 1c4:	86 b1       	in	r24, 0x06	; 6
}
 1c6:	8f 73       	andi	r24, 0x3F	; 63
 1c8:	08 95       	ret

000001ca <SetPortC>:

void SetPortC(uint8_t x)
{
    PORTC = (PORTC & ~MASK_PORTC) | (x & MASK_PORTC);
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	90 7c       	andi	r25, 0xC0	; 192
 1ce:	8f 73       	andi	r24, 0x3F	; 63
 1d0:	89 2b       	or	r24, r25
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	08 95       	ret

000001d6 <GetDDRC>:
}

uint8_t GetDDRC(void)
{
    return(DDRC & MASK_PORTC);
 1d6:	87 b1       	in	r24, 0x07	; 7
}
 1d8:	8f 73       	andi	r24, 0x3F	; 63
 1da:	08 95       	ret

000001dc <SetDDRC>:

void SetDDRC(uint8_t direction)
{
    DDRC = (DDRC & ~MASK_PORTC) | (direction & MASK_PORTC);
 1dc:	97 b1       	in	r25, 0x07	; 7
 1de:	90 7c       	andi	r25, 0xC0	; 192
 1e0:	8f 73       	andi	r24, 0x3F	; 63
 1e2:	89 2b       	or	r24, r25
 1e4:	87 b9       	out	0x07, r24	; 7
 1e6:	08 95       	ret

000001e8 <GetPortB>:
///////PORT B/////////


uint8_t GetPortB (void)
{
    return(PINB & MASK_PORTB);
 1e8:	83 b1       	in	r24, 0x03	; 3
}
 1ea:	8f 73       	andi	r24, 0x3F	; 63
 1ec:	08 95       	ret

000001ee <SetPortB>:

void SetPortB(uint8_t x)
{
    PORTB = (PORTB & ~MASK_PORTB) | (x & MASK_PORTB);
 1ee:	95 b1       	in	r25, 0x05	; 5
 1f0:	90 7c       	andi	r25, 0xC0	; 192
 1f2:	8f 73       	andi	r24, 0x3F	; 63
 1f4:	89 2b       	or	r24, r25
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	08 95       	ret

000001fa <GetDDRB>:
}

uint8_t GetDDRB(void)
{
    return(DDRB & MASK_PORTB);
 1fa:	84 b1       	in	r24, 0x04	; 4
}
 1fc:	8f 73       	andi	r24, 0x3F	; 63
 1fe:	08 95       	ret

00000200 <SetDDRB>:

void SetDDRB(uint8_t direction)
{
    DDRB = (DDRB & ~MASK_PORTB) | (direction & MASK_PORTB);
 200:	94 b1       	in	r25, 0x04	; 4
 202:	90 7c       	andi	r25, 0xC0	; 192
 204:	8f 73       	andi	r24, 0x3F	; 63
 206:	89 2b       	or	r24, r25
 208:	84 b9       	out	0x04, r24	; 4
 20a:	08 95       	ret

0000020c <Timer1_initialize>:
#define xtal 16000000L

static void (*Timer1_Overflow_function)(void) = 0;

void Timer1_initialize ( uint32_t frequency, void (*handle_overflow)(void), uint8_t prescaler )
{
 20c:	cf 92       	push	r12
 20e:	df 92       	push	r13
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	6b 01       	movw	r12, r22
 218:	7c 01       	movw	r14, r24
 21a:	c2 2f       	mov	r28, r18
                                      // -  1  8 64 256 1024
    const static uint8_t prescales[] = {0, 0, 3, 6, 8, 10};

    Timer1_Overflow_function = handle_overflow;
 21c:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <__data_end+0x1>
 220:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <__data_end>

    TCNT1=0x00;
 224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    // set timer0 counter initial value to 0
    // (note: entirely redundant as it was never used before)

    OCR1A = ((uint32_t)(xtal)>>prescales[prescaler]) / frequency - 1;
 22c:	e2 2f       	mov	r30, r18
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	94 e2       	ldi	r25, 0x24	; 36
 238:	a4 ef       	ldi	r26, 0xF4	; 244
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	bc 01       	movw	r22, r24
 23e:	cd 01       	movw	r24, r26
 240:	00 80       	ld	r0, Z
 242:	04 c0       	rjmp	.+8      	; 0x24c <Timer1_initialize+0x40>
 244:	96 95       	lsr	r25
 246:	87 95       	ror	r24
 248:	77 95       	ror	r23
 24a:	67 95       	ror	r22
 24c:	0a 94       	dec	r0
 24e:	d2 f7       	brpl	.-12     	; 0x244 <Timer1_initialize+0x38>
 250:	a7 01       	movw	r20, r14
 252:	96 01       	movw	r18, r12
 254:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodsi4>
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
 25c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 260:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    TCCR1A = 0x00;
 264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // AABBCCMM - lower two bits of 4-bit mode MMMM

    TCCR1B = 0x08 | (0x07 & prescaler);
 268:	c7 70       	andi	r28, 0x07	; 7
 26a:	c8 60       	ori	r28, 0x08	; 8
 26c:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // ??-MMPPP - MM is upper two bits of mode MMMM, PPP is clock rescale
    // where PPP of 011 is clock rescale of 64
    // where MM MM is the Timer mode, we use 01 00 - CTC

    TIFR1  = 0;
 270:	16 ba       	out	0x16, r1	; 22
    // reset any pending Timer1 interrupts
    // (note: entirely redundant as none is pending - it was never used before)

    TIMSK1 = (1<<OCIE1A);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        //  ICIE1  - enable Timer1 capture interrupt
        //  OCIE1A - enable Timer1 match OCR1A match interrupt
        //  TOIE1  - enable Timer1 overflow interrupt
}
 278:	cf 91       	pop	r28
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	df 90       	pop	r13
 280:	cf 90       	pop	r12
 282:	08 95       	ret

00000284 <Timer1_shutdown>:

void Timer1_shutdown ()
{
    TIMSK1 &= ~(1<<TOIE1 | 1<<OCIE1A | 1<<OCIE1B | 1<<TOIE1);
 284:	ef e6       	ldi	r30, 0x6F	; 111
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 7f       	andi	r24, 0xF8	; 248
 28c:	80 83       	st	Z, r24
    // disable all Timer1 interrupts
    // which is the same effort as disabling just one interrupt but can be reused in other examples

    TCCR1A = 0;
 28e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0;
 292:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0;
 296:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    TIMSK1 = 0;
 29a:	10 82       	st	Z, r1
    TIFR1  = 0;
 29c:	16 ba       	out	0x16, r1	; 22
 29e:	08 95       	ret

000002a0 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
 2c2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 2c6:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
 2ca:	09 95       	icall
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <uart0_initialize>:


uint8_t uart0_ready_TX ()
{
    return ( 0 != (UCSR0A & 1<<UDRE0) );
}
 2ee:	9c 01       	movw	r18, r24
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	60 e4       	ldi	r22, 0x40	; 64
 2f6:	72 e4       	ldi	r23, 0x42	; 66
 2f8:	8f e0       	ldi	r24, 0x0F	; 15
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 57 03 	call	0x6ae	; 0x6ae <__divmodsi4>
 300:	ba 01       	movw	r22, r20
 302:	a9 01       	movw	r20, r18
 304:	41 50       	subi	r20, 0x01	; 1
 306:	51 09       	sbc	r21, r1
 308:	61 09       	sbc	r22, r1
 30a:	71 09       	sbc	r23, r1
 30c:	85 2f       	mov	r24, r21
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 314:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 324:	08 95       	ret

00000326 <uart0_putc>:

void uart0_putc (char c)
{
    while( 0 == (UCSR0A & 1<<UDRE0) ) ;
 326:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 32a:	95 ff       	sbrs	r25, 5
 32c:	fc cf       	rjmp	.-8      	; 0x326 <uart0_putc>
    UDR0 = c;
 32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 332:	08 95       	ret

00000334 <uart0_puts>:
}

void uart0_puts (const char* const s)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
    for ( const char* p = s; *p!='\0'; ++p )
 33a:	03 c0       	rjmp	.+6      	; 0x342 <uart0_puts+0xe>
        uart0_putc(*p);
 33c:	0e 94 93 01 	call	0x326	; 0x326 <uart0_putc>
    UDR0 = c;
}

void uart0_puts (const char* const s)
{
    for ( const char* p = s; *p!='\0'; ++p )
 340:	21 96       	adiw	r28, 0x01	; 1
 342:	88 81       	ld	r24, Y
 344:	81 11       	cpse	r24, r1
 346:	fa cf       	rjmp	.-12     	; 0x33c <uart0_puts+0x8>
        uart0_putc(*p);
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <LimitSwitchesInit>:
    return CheckLimitSwitch(LS_NEG_X | LS_POS_X);
}

bool CheckLimitSwitchesY() {
    return CheckLimitSwitch(LS_NEG_Y | LS_POS_Y);
}
 34e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <GetDDRD>
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SetDDRD>
 358:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GetPortD>
 35c:	80 6f       	ori	r24, 0xF0	; 240
 35e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SetPortD>
 362:	08 95       	ret

00000364 <CheckLimitSwitch>:
 364:	cf 93       	push	r28
 366:	c8 2f       	mov	r28, r24
 368:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GetPortD>
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	c9 01       	movw	r24, r18
 372:	80 95       	com	r24
 374:	90 95       	com	r25
 376:	2c 2f       	mov	r18, r28
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	28 23       	and	r18, r24
 37c:	39 23       	and	r19, r25
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	23 2b       	or	r18, r19
 382:	09 f4       	brne	.+2      	; 0x386 <CheckLimitSwitch+0x22>
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <CheckLimitSwitchesAll>:

bool CheckLimitSwitchesAll() {
    return CheckLimitSwitch(LS_ALL);
 38a:	80 ef       	ldi	r24, 0xF0	; 240
 38c:	0e 94 b2 01 	call	0x364	; 0x364 <CheckLimitSwitch>
 390:	08 95       	ret

00000392 <main>:
#define B_ALL   0b00001111

int main(void)
{

    sei();
 392:	78 94       	sei


    uart0_initialize(uart_bps_9600);
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	95 e2       	ldi	r25, 0x25	; 37
 398:	0e 94 77 01 	call	0x2ee	; 0x2ee <uart0_initialize>

    StepperInit();
 39c:	0e 94 27 02 	call	0x44e	; 0x44e <StepperInit>
    SetDDRC(GetDDRC() & ~B_ALL);
 3a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GetDDRC>
 3a4:	80 7f       	andi	r24, 0xF0	; 240
 3a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SetDDRC>
    SetPortC(GetPortC() | B_ALL);
 3aa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GetPortC>
 3ae:	8f 60       	ori	r24, 0x0F	; 15
 3b0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SetPortC>


    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;
 3b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GetPortC>

        int steps_x = 0;
        int steps_y = 0;

        if(!(buttons & B_X_NEG)) {
 3b8:	80 ff       	sbrs	r24, 0
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <main+0x30>
    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int steps_x = 0;
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <main+0x34>
        int steps_y = 0;

        if(!(buttons & B_X_NEG)) {
            steps_x = -20;
 3c2:	2c ee       	ldi	r18, 0xEC	; 236
 3c4:	3f ef       	ldi	r19, 0xFF	; 255
        }
        if(!(buttons & B_X_POS)) {
 3c6:	81 fd       	sbrc	r24, 1
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <main+0x3c>
            steps_x = 20;
 3ca:	24 e1       	ldi	r18, 0x14	; 20
 3cc:	30 e0       	ldi	r19, 0x00	; 0
        }
        if(!(buttons & B_Y_NEG)) {
 3ce:	82 ff       	sbrs	r24, 2
 3d0:	03 c0       	rjmp	.+6      	; 0x3d8 <main+0x46>
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int steps_x = 0;
        int steps_y = 0;
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <main+0x4a>
        }
        if(!(buttons & B_X_POS)) {
            steps_x = 20;
        }
        if(!(buttons & B_Y_NEG)) {
            steps_y = -20;
 3d8:	6c ee       	ldi	r22, 0xEC	; 236
 3da:	7f ef       	ldi	r23, 0xFF	; 255
        }
        if(!(buttons & B_Y_POS)) {
 3dc:	83 fd       	sbrc	r24, 3
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <main+0x52>
            steps_y = 20;
 3e0:	64 e1       	ldi	r22, 0x14	; 20
 3e2:	70 e0       	ldi	r23, 0x00	; 0
        }

        MoveSteps(steps_x, steps_y);
 3e4:	c9 01       	movw	r24, r18
 3e6:	0e 94 34 02 	call	0x468	; 0x468 <MoveSteps>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8f e8       	ldi	r24, 0x8F	; 143
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x5c>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x62>
 3f4:	00 00       	nop
 3f6:	de cf       	rjmp	.-68     	; 0x3b4 <main+0x22>

000003f8 <PulseFn>:
void PulseFn(void) {

    static uint16_t cnt = 0;

    //increment count if still under the max value, otherwise reset
    if(cnt<pwm_res) cnt++;
 3f8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <cnt.1934>
 3fc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cnt.1934+0x1>
 400:	8a 30       	cpi	r24, 0x0A	; 10
 402:	91 05       	cpc	r25, r1
 404:	30 f4       	brcc	.+12     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <cnt.1934+0x1>
 40c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <cnt.1934>
 410:	07 c0       	rjmp	.+14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
    else {
        cnt = 0;
 412:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <cnt.1934+0x1>
 416:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <cnt.1934>
        semaphore = 1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <semaphore>
    }

    //generates the pulse for the percentage of the duty cycle
    if(duty_cycle>cnt) {
 420:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <cnt.1934>
 424:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <cnt.1934+0x1>
 428:	05 97       	sbiw	r24, 0x05	; 5
 42a:	40 f4       	brcc	.+16     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
        SetPortB(GetPortB() | active_steppers);
 42c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 430:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <active_steppers>
 434:	89 2b       	or	r24, r25
 436:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 43a:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~active_steppers);
 43c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 440:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <active_steppers>
 444:	90 95       	com	r25
 446:	89 23       	and	r24, r25
 448:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 44c:	08 95       	ret

0000044e <StepperInit>:
}

//sets up the stepper motor pins as outputs
void StepperInit(void)
{
    LimitSwitchesInit();
 44e:	0e 94 a7 01 	call	0x34e	; 0x34e <LimitSwitchesInit>
    SetDDRB(GetDDRB() | (STEP_X | STEP_Y) | (DIR_X | DIR_Y));
 452:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GetDDRB>
 456:	8f 60       	ori	r24, 0x0F	; 15
 458:	0e 94 00 01 	call	0x200	; 0x200 <SetDDRB>
    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
 45c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 460:	80 7f       	andi	r24, 0xF0	; 240
 462:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
 466:	08 95       	ret

00000468 <MoveSteps>:




//Moves both stepper motors the specified number of steps
bool MoveSteps(int steps_x, int steps_y) {
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
 47e:	a0 97       	sbiw	r28, 0x20	; 32
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	7c 01       	movw	r14, r24
 48c:	6b 01       	movw	r12, r22

    if(steps_x == 0 && steps_y == 0) {
 48e:	89 2b       	or	r24, r25
 490:	49 f4       	brne	.+18     	; 0x4a4 <MoveSteps+0x3c>
 492:	67 2b       	or	r22, r23
 494:	39 f4       	brne	.+14     	; 0x4a4 <MoveSteps+0x3c>
        SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 496:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 49a:	8a 7f       	andi	r24, 0xFA	; 250
 49c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
        return true;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	96 c0       	rjmp	.+300    	; 0x5d0 <MoveSteps+0x168>
    }

    //used to decide which steppers to pulse
    active_steppers = 0;
 4a4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <active_steppers>

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;

    //set x axis active and direction
    if(steps_x != 0) {
 4a8:	e1 14       	cp	r14, r1
 4aa:	f1 04       	cpc	r15, r1
 4ac:	51 f0       	breq	.+20     	; 0x4c2 <MoveSteps+0x5a>
        active_steppers |= STEP_X;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_steppers>
        if(steps_x < 0) {
 4b4:	ff 20       	and	r15, r15
 4b6:	54 f0       	brlt	.+20     	; 0x4cc <MoveSteps+0x64>

    //used to decide which steppers to pulse
    active_steppers = 0;

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;
 4b8:	0f 2e       	mov	r0, r31
 4ba:	fa e0       	ldi	r31, 0x0A	; 10
 4bc:	bf 2e       	mov	r11, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <MoveSteps+0x6a>
 4c2:	0f 2e       	mov	r0, r31
 4c4:	fa e0       	ldi	r31, 0x0A	; 10
 4c6:	bf 2e       	mov	r11, r31
 4c8:	f0 2d       	mov	r31, r0
 4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <MoveSteps+0x6a>

    //set x axis active and direction
    if(steps_x != 0) {
        active_steppers |= STEP_X;
        if(steps_x < 0) {
            direction &= ~DIR_X;
 4cc:	68 94       	set
 4ce:	bb 24       	eor	r11, r11
 4d0:	b3 f8       	bld	r11, 3
        }
    }

    //set y axis active and direction
    if(steps_y != 0) {
 4d2:	c1 14       	cp	r12, r1
 4d4:	d1 04       	cpc	r13, r1
 4d6:	51 f0       	breq	.+20     	; 0x4ec <MoveSteps+0x84>
        active_steppers |= STEP_Y;
 4d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_steppers>
 4dc:	84 60       	ori	r24, 0x04	; 4
 4de:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_steppers>
        if(steps_y < 0) {
 4e2:	dd 20       	and	r13, r13
 4e4:	1c f4       	brge	.+6      	; 0x4ec <MoveSteps+0x84>
            direction &= ~DIR_Y;
 4e6:	8b 2d       	mov	r24, r11
 4e8:	87 7f       	andi	r24, 0xF7	; 247
 4ea:	b8 2e       	mov	r11, r24
        }
    }

    char buffer[32];
    dtostrf((float)steps_x, 5, 3, buffer);
 4ec:	b7 01       	movw	r22, r14
 4ee:	0f 2c       	mov	r0, r15
 4f0:	00 0c       	add	r0, r0
 4f2:	88 0b       	sbc	r24, r24
 4f4:	99 0b       	sbc	r25, r25
 4f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__floatsisf>
 4fa:	8e 01       	movw	r16, r28
 4fc:	0f 5f       	subi	r16, 0xFF	; 255
 4fe:	1f 4f       	sbci	r17, 0xFF	; 255
 500:	23 e0       	ldi	r18, 0x03	; 3
 502:	45 e0       	ldi	r20, 0x05	; 5
 504:	0e 94 76 03 	call	0x6ec	; 0x6ec <dtostrf>
    uart0_puts(buffer);
 508:	c8 01       	movw	r24, r16
 50a:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>
    uart0_puts("\t\n");
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>

    if(CheckLimitSwitchesAll()) {
 516:	0e 94 c5 01 	call	0x38a	; 0x38a <CheckLimitSwitchesAll>
 51a:	88 23       	and	r24, r24
 51c:	21 f0       	breq	.+8      	; 0x526 <MoveSteps+0xbe>
        uart0_puts("Switches on");
 51e:	89 e0       	ldi	r24, 0x09	; 9
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>
    }

    steps_x = abs(steps_x);
 526:	87 01       	movw	r16, r14
 528:	ff 20       	and	r15, r15
 52a:	24 f4       	brge	.+8      	; 0x534 <MoveSteps+0xcc>
 52c:	00 27       	eor	r16, r16
 52e:	11 27       	eor	r17, r17
 530:	0e 19       	sub	r16, r14
 532:	1f 09       	sbc	r17, r15
    steps_y = abs(steps_y);
 534:	76 01       	movw	r14, r12
 536:	dd 20       	and	r13, r13
 538:	24 f4       	brge	.+8      	; 0x542 <MoveSteps+0xda>
 53a:	ee 24       	eor	r14, r14
 53c:	ff 24       	eor	r15, r15
 53e:	ec 18       	sub	r14, r12
 540:	fd 08       	sbc	r15, r13



    if(active_steppers) {
 542:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_steppers>
 546:	88 23       	and	r24, r24
 548:	31 f0       	breq	.+12     	; 0x556 <MoveSteps+0xee>
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
 54a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 54e:	85 7f       	andi	r24, 0xF5	; 245
 550:	8b 29       	or	r24, r11
 552:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
 556:	24 e0       	ldi	r18, 0x04	; 4
 558:	4c ef       	ldi	r20, 0xFC	; 252
 55a:	51 e0       	ldi	r21, 0x01	; 1
 55c:	68 ef       	ldi	r22, 0xF8	; 248
 55e:	7a e2       	ldi	r23, 0x2A	; 42
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 06 01 	call	0x20c	; 0x20c <Timer1_initialize>

    while(1) {
        while(semaphore == 0);
 568:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <semaphore>
 56c:	88 23       	and	r24, r24
 56e:	e1 f3       	breq	.-8      	; 0x568 <MoveSteps+0x100>
        semaphore = 0;
 570:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <semaphore>

        //keeps track of steps and deactivates stepper when number of steps is complete

        if(CheckLimitSwitchesAll()) {
 574:	0e 94 c5 01 	call	0x38a	; 0x38a <CheckLimitSwitchesAll>
 578:	88 23       	and	r24, r24
 57a:	49 f0       	breq	.+18     	; 0x58e <MoveSteps+0x126>
            SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 57c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 580:	8a 7f       	andi	r24, 0xFA	; 250
 582:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
            Timer1_shutdown();
 586:	0e 94 42 01 	call	0x284	; 0x284 <Timer1_shutdown>
            return false;
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	21 c0       	rjmp	.+66     	; 0x5d0 <MoveSteps+0x168>
        }

        if(steps_x >= 0) {
 58e:	11 23       	and	r17, r17
 590:	1c f0       	brlt	.+6      	; 0x598 <MoveSteps+0x130>
            steps_x--;
 592:	01 50       	subi	r16, 0x01	; 1
 594:	11 09       	sbc	r17, r1
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <MoveSteps+0x13a>
        } else {
            active_steppers &= ~STEP_X;
 598:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_steppers>
 59c:	8e 7f       	andi	r24, 0xFE	; 254
 59e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_steppers>
        }


        if(steps_y >= 0) {
 5a2:	ff 20       	and	r15, r15
 5a4:	24 f0       	brlt	.+8      	; 0x5ae <MoveSteps+0x146>
            steps_y--;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	e8 1a       	sub	r14, r24
 5aa:	f1 08       	sbc	r15, r1
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <MoveSteps+0x150>
        } else {
            active_steppers &= ~STEP_Y;
 5ae:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_steppers>
 5b2:	8b 7f       	andi	r24, 0xFB	; 251
 5b4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <active_steppers>
        }

        //If both steppers are no longer active, job is done so exit
        if(active_steppers == 0) {
 5b8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <active_steppers>
 5bc:	81 11       	cpse	r24, r1
 5be:	d4 cf       	rjmp	.-88     	; 0x568 <MoveSteps+0x100>
            break;
        }
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
 5c0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
 5c4:	8a 7f       	andi	r24, 0xFA	; 250
 5c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    Timer1_shutdown();
 5ca:	0e 94 42 01 	call	0x284	; 0x284 <Timer1_shutdown>
    return true;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
}
 5d0:	a0 96       	adiw	r28, 0x20	; 32
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	df 90       	pop	r13
 5ea:	cf 90       	pop	r12
 5ec:	bf 90       	pop	r11
 5ee:	08 95       	ret

000005f0 <__floatunsisf>:
 5f0:	e8 94       	clt
 5f2:	09 c0       	rjmp	.+18     	; 0x606 <__floatsisf+0x12>

000005f4 <__floatsisf>:
 5f4:	97 fb       	bst	r25, 7
 5f6:	3e f4       	brtc	.+14     	; 0x606 <__floatsisf+0x12>
 5f8:	90 95       	com	r25
 5fa:	80 95       	com	r24
 5fc:	70 95       	com	r23
 5fe:	61 95       	neg	r22
 600:	7f 4f       	sbci	r23, 0xFF	; 255
 602:	8f 4f       	sbci	r24, 0xFF	; 255
 604:	9f 4f       	sbci	r25, 0xFF	; 255
 606:	99 23       	and	r25, r25
 608:	a9 f0       	breq	.+42     	; 0x634 <__floatsisf+0x40>
 60a:	f9 2f       	mov	r31, r25
 60c:	96 e9       	ldi	r25, 0x96	; 150
 60e:	bb 27       	eor	r27, r27
 610:	93 95       	inc	r25
 612:	f6 95       	lsr	r31
 614:	87 95       	ror	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b7 95       	ror	r27
 61c:	f1 11       	cpse	r31, r1
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <__floatsisf+0x1c>
 620:	fa f4       	brpl	.+62     	; 0x660 <__floatsisf+0x6c>
 622:	bb 0f       	add	r27, r27
 624:	11 f4       	brne	.+4      	; 0x62a <__floatsisf+0x36>
 626:	60 ff       	sbrs	r22, 0
 628:	1b c0       	rjmp	.+54     	; 0x660 <__floatsisf+0x6c>
 62a:	6f 5f       	subi	r22, 0xFF	; 255
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	8f 4f       	sbci	r24, 0xFF	; 255
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	16 c0       	rjmp	.+44     	; 0x660 <__floatsisf+0x6c>
 634:	88 23       	and	r24, r24
 636:	11 f0       	breq	.+4      	; 0x63c <__floatsisf+0x48>
 638:	96 e9       	ldi	r25, 0x96	; 150
 63a:	11 c0       	rjmp	.+34     	; 0x65e <__floatsisf+0x6a>
 63c:	77 23       	and	r23, r23
 63e:	21 f0       	breq	.+8      	; 0x648 <__floatsisf+0x54>
 640:	9e e8       	ldi	r25, 0x8E	; 142
 642:	87 2f       	mov	r24, r23
 644:	76 2f       	mov	r23, r22
 646:	05 c0       	rjmp	.+10     	; 0x652 <__floatsisf+0x5e>
 648:	66 23       	and	r22, r22
 64a:	71 f0       	breq	.+28     	; 0x668 <__floatsisf+0x74>
 64c:	96 e8       	ldi	r25, 0x86	; 134
 64e:	86 2f       	mov	r24, r22
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	2a f0       	brmi	.+10     	; 0x660 <__floatsisf+0x6c>
 656:	9a 95       	dec	r25
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	da f7       	brpl	.-10     	; 0x656 <__floatsisf+0x62>
 660:	88 0f       	add	r24, r24
 662:	96 95       	lsr	r25
 664:	87 95       	ror	r24
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <__udivmodsi4>:
 66a:	a1 e2       	ldi	r26, 0x21	; 33
 66c:	1a 2e       	mov	r1, r26
 66e:	aa 1b       	sub	r26, r26
 670:	bb 1b       	sub	r27, r27
 672:	fd 01       	movw	r30, r26
 674:	0d c0       	rjmp	.+26     	; 0x690 <__udivmodsi4_ep>

00000676 <__udivmodsi4_loop>:
 676:	aa 1f       	adc	r26, r26
 678:	bb 1f       	adc	r27, r27
 67a:	ee 1f       	adc	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	a2 17       	cp	r26, r18
 680:	b3 07       	cpc	r27, r19
 682:	e4 07       	cpc	r30, r20
 684:	f5 07       	cpc	r31, r21
 686:	20 f0       	brcs	.+8      	; 0x690 <__udivmodsi4_ep>
 688:	a2 1b       	sub	r26, r18
 68a:	b3 0b       	sbc	r27, r19
 68c:	e4 0b       	sbc	r30, r20
 68e:	f5 0b       	sbc	r31, r21

00000690 <__udivmodsi4_ep>:
 690:	66 1f       	adc	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a 94       	dec	r1
 69a:	69 f7       	brne	.-38     	; 0x676 <__udivmodsi4_loop>
 69c:	60 95       	com	r22
 69e:	70 95       	com	r23
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	9b 01       	movw	r18, r22
 6a6:	ac 01       	movw	r20, r24
 6a8:	bd 01       	movw	r22, r26
 6aa:	cf 01       	movw	r24, r30
 6ac:	08 95       	ret

000006ae <__divmodsi4>:
 6ae:	05 2e       	mov	r0, r21
 6b0:	97 fb       	bst	r25, 7
 6b2:	1e f4       	brtc	.+6      	; 0x6ba <__divmodsi4+0xc>
 6b4:	00 94       	com	r0
 6b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__negsi2>
 6ba:	57 fd       	sbrc	r21, 7
 6bc:	07 d0       	rcall	.+14     	; 0x6cc <__divmodsi4_neg2>
 6be:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodsi4>
 6c2:	07 fc       	sbrc	r0, 7
 6c4:	03 d0       	rcall	.+6      	; 0x6cc <__divmodsi4_neg2>
 6c6:	4e f4       	brtc	.+18     	; 0x6da <__divmodsi4_exit>
 6c8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__negsi2>

000006cc <__divmodsi4_neg2>:
 6cc:	50 95       	com	r21
 6ce:	40 95       	com	r20
 6d0:	30 95       	com	r19
 6d2:	21 95       	neg	r18
 6d4:	3f 4f       	sbci	r19, 0xFF	; 255
 6d6:	4f 4f       	sbci	r20, 0xFF	; 255
 6d8:	5f 4f       	sbci	r21, 0xFF	; 255

000006da <__divmodsi4_exit>:
 6da:	08 95       	ret

000006dc <__negsi2>:
 6dc:	90 95       	com	r25
 6de:	80 95       	com	r24
 6e0:	70 95       	com	r23
 6e2:	61 95       	neg	r22
 6e4:	7f 4f       	sbci	r23, 0xFF	; 255
 6e6:	8f 4f       	sbci	r24, 0xFF	; 255
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	08 95       	ret

000006ec <dtostrf>:
 6ec:	ef 92       	push	r14
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	e8 01       	movw	r28, r16
 6f8:	47 fd       	sbrc	r20, 7
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <dtostrf+0x14>
 6fc:	34 e0       	ldi	r19, 0x04	; 4
 6fe:	01 c0       	rjmp	.+2      	; 0x702 <dtostrf+0x16>
 700:	34 e1       	ldi	r19, 0x14	; 20
 702:	04 2e       	mov	r0, r20
 704:	00 0c       	add	r0, r0
 706:	55 0b       	sbc	r21, r21
 708:	57 ff       	sbrs	r21, 7
 70a:	03 c0       	rjmp	.+6      	; 0x712 <dtostrf+0x26>
 70c:	51 95       	neg	r21
 70e:	41 95       	neg	r20
 710:	51 09       	sbc	r21, r1
 712:	e3 2e       	mov	r14, r19
 714:	02 2f       	mov	r16, r18
 716:	24 2f       	mov	r18, r20
 718:	ae 01       	movw	r20, r28
 71a:	0e 94 96 03 	call	0x72c	; 0x72c <dtoa_prf>
 71e:	ce 01       	movw	r24, r28
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	ef 90       	pop	r14
 72a:	08 95       	ret

0000072c <dtoa_prf>:
 72c:	a9 e0       	ldi	r26, 0x09	; 9
 72e:	b0 e0       	ldi	r27, 0x00	; 0
 730:	ec e9       	ldi	r30, 0x9C	; 156
 732:	f3 e0       	ldi	r31, 0x03	; 3
 734:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__prologue_saves__+0xc>
 738:	6a 01       	movw	r12, r20
 73a:	12 2f       	mov	r17, r18
 73c:	b0 2e       	mov	r11, r16
 73e:	2b e3       	ldi	r18, 0x3B	; 59
 740:	20 17       	cp	r18, r16
 742:	20 f0       	brcs	.+8      	; 0x74c <dtoa_prf+0x20>
 744:	ff 24       	eor	r15, r15
 746:	f3 94       	inc	r15
 748:	f0 0e       	add	r15, r16
 74a:	02 c0       	rjmp	.+4      	; 0x750 <dtoa_prf+0x24>
 74c:	2c e3       	ldi	r18, 0x3C	; 60
 74e:	f2 2e       	mov	r15, r18
 750:	0f 2d       	mov	r16, r15
 752:	27 e0       	ldi	r18, 0x07	; 7
 754:	ae 01       	movw	r20, r28
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
 75a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__ftoa_engine>
 75e:	bc 01       	movw	r22, r24
 760:	49 81       	ldd	r20, Y+1	; 0x01
 762:	84 2f       	mov	r24, r20
 764:	89 70       	andi	r24, 0x09	; 9
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	31 f0       	breq	.+12     	; 0x776 <dtoa_prf+0x4a>
 76a:	e1 fc       	sbrc	r14, 1
 76c:	06 c0       	rjmp	.+12     	; 0x77a <dtoa_prf+0x4e>
 76e:	e0 fe       	sbrs	r14, 0
 770:	06 c0       	rjmp	.+12     	; 0x77e <dtoa_prf+0x52>
 772:	90 e2       	ldi	r25, 0x20	; 32
 774:	05 c0       	rjmp	.+10     	; 0x780 <dtoa_prf+0x54>
 776:	9d e2       	ldi	r25, 0x2D	; 45
 778:	03 c0       	rjmp	.+6      	; 0x780 <dtoa_prf+0x54>
 77a:	9b e2       	ldi	r25, 0x2B	; 43
 77c:	01 c0       	rjmp	.+2      	; 0x780 <dtoa_prf+0x54>
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	5e 2d       	mov	r21, r14
 782:	50 71       	andi	r21, 0x10	; 16
 784:	43 ff       	sbrs	r20, 3
 786:	3c c0       	rjmp	.+120    	; 0x800 <__DATA_REGION_LENGTH__>
 788:	91 11       	cpse	r25, r1
 78a:	02 c0       	rjmp	.+4      	; 0x790 <dtoa_prf+0x64>
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	01 c0       	rjmp	.+2      	; 0x792 <dtoa_prf+0x66>
 790:	84 e0       	ldi	r24, 0x04	; 4
 792:	81 17       	cp	r24, r17
 794:	18 f4       	brcc	.+6      	; 0x79c <dtoa_prf+0x70>
 796:	21 2f       	mov	r18, r17
 798:	28 1b       	sub	r18, r24
 79a:	01 c0       	rjmp	.+2      	; 0x79e <dtoa_prf+0x72>
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	51 11       	cpse	r21, r1
 7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <dtoa_prf+0x8c>
 7a2:	f6 01       	movw	r30, r12
 7a4:	82 2f       	mov	r24, r18
 7a6:	30 e2       	ldi	r19, 0x20	; 32
 7a8:	88 23       	and	r24, r24
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <dtoa_prf+0x86>
 7ac:	31 93       	st	Z+, r19
 7ae:	81 50       	subi	r24, 0x01	; 1
 7b0:	fb cf       	rjmp	.-10     	; 0x7a8 <dtoa_prf+0x7c>
 7b2:	c2 0e       	add	r12, r18
 7b4:	d1 1c       	adc	r13, r1
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	99 23       	and	r25, r25
 7ba:	29 f0       	breq	.+10     	; 0x7c6 <dtoa_prf+0x9a>
 7bc:	d6 01       	movw	r26, r12
 7be:	9c 93       	st	X, r25
 7c0:	f6 01       	movw	r30, r12
 7c2:	31 96       	adiw	r30, 0x01	; 1
 7c4:	6f 01       	movw	r12, r30
 7c6:	c6 01       	movw	r24, r12
 7c8:	03 96       	adiw	r24, 0x03	; 3
 7ca:	e2 fe       	sbrs	r14, 2
 7cc:	0a c0       	rjmp	.+20     	; 0x7e2 <dtoa_prf+0xb6>
 7ce:	3e e4       	ldi	r19, 0x4E	; 78
 7d0:	d6 01       	movw	r26, r12
 7d2:	3c 93       	st	X, r19
 7d4:	41 e4       	ldi	r20, 0x41	; 65
 7d6:	11 96       	adiw	r26, 0x01	; 1
 7d8:	4c 93       	st	X, r20
 7da:	11 97       	sbiw	r26, 0x01	; 1
 7dc:	12 96       	adiw	r26, 0x02	; 2
 7de:	3c 93       	st	X, r19
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <dtoa_prf+0xc2>
 7e2:	3e e6       	ldi	r19, 0x6E	; 110
 7e4:	f6 01       	movw	r30, r12
 7e6:	30 83       	st	Z, r19
 7e8:	41 e6       	ldi	r20, 0x61	; 97
 7ea:	41 83       	std	Z+1, r20	; 0x01
 7ec:	32 83       	std	Z+2, r19	; 0x02
 7ee:	fc 01       	movw	r30, r24
 7f0:	32 2f       	mov	r19, r18
 7f2:	40 e2       	ldi	r20, 0x20	; 32
 7f4:	33 23       	and	r19, r19
 7f6:	09 f4       	brne	.+2      	; 0x7fa <dtoa_prf+0xce>
 7f8:	42 c0       	rjmp	.+132    	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 7fa:	41 93       	st	Z+, r20
 7fc:	31 50       	subi	r19, 0x01	; 1
 7fe:	fa cf       	rjmp	.-12     	; 0x7f4 <dtoa_prf+0xc8>
 800:	42 ff       	sbrs	r20, 2
 802:	44 c0       	rjmp	.+136    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 804:	91 11       	cpse	r25, r1
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	01 c0       	rjmp	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	84 e0       	ldi	r24, 0x04	; 4
 80e:	81 17       	cp	r24, r17
 810:	18 f4       	brcc	.+6      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 812:	21 2f       	mov	r18, r17
 814:	28 1b       	sub	r18, r24
 816:	01 c0       	rjmp	.+2      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	51 11       	cpse	r21, r1
 81c:	0b c0       	rjmp	.+22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 81e:	f6 01       	movw	r30, r12
 820:	82 2f       	mov	r24, r18
 822:	30 e2       	ldi	r19, 0x20	; 32
 824:	88 23       	and	r24, r24
 826:	19 f0       	breq	.+6      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 828:	31 93       	st	Z+, r19
 82a:	81 50       	subi	r24, 0x01	; 1
 82c:	fb cf       	rjmp	.-10     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82e:	c2 0e       	add	r12, r18
 830:	d1 1c       	adc	r13, r1
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	99 23       	and	r25, r25
 836:	29 f0       	breq	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 838:	d6 01       	movw	r26, r12
 83a:	9c 93       	st	X, r25
 83c:	f6 01       	movw	r30, r12
 83e:	31 96       	adiw	r30, 0x01	; 1
 840:	6f 01       	movw	r12, r30
 842:	c6 01       	movw	r24, r12
 844:	03 96       	adiw	r24, 0x03	; 3
 846:	e2 fe       	sbrs	r14, 2
 848:	0b c0       	rjmp	.+22     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 84a:	39 e4       	ldi	r19, 0x49	; 73
 84c:	d6 01       	movw	r26, r12
 84e:	3c 93       	st	X, r19
 850:	3e e4       	ldi	r19, 0x4E	; 78
 852:	11 96       	adiw	r26, 0x01	; 1
 854:	3c 93       	st	X, r19
 856:	11 97       	sbiw	r26, 0x01	; 1
 858:	36 e4       	ldi	r19, 0x46	; 70
 85a:	12 96       	adiw	r26, 0x02	; 2
 85c:	3c 93       	st	X, r19
 85e:	07 c0       	rjmp	.+14     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
 860:	39 e6       	ldi	r19, 0x69	; 105
 862:	f6 01       	movw	r30, r12
 864:	30 83       	st	Z, r19
 866:	3e e6       	ldi	r19, 0x6E	; 110
 868:	31 83       	std	Z+1, r19	; 0x01
 86a:	36 e6       	ldi	r19, 0x66	; 102
 86c:	32 83       	std	Z+2, r19	; 0x02
 86e:	fc 01       	movw	r30, r24
 870:	32 2f       	mov	r19, r18
 872:	40 e2       	ldi	r20, 0x20	; 32
 874:	33 23       	and	r19, r19
 876:	19 f0       	breq	.+6      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 878:	41 93       	st	Z+, r20
 87a:	31 50       	subi	r19, 0x01	; 1
 87c:	fb cf       	rjmp	.-10     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 87e:	fc 01       	movw	r30, r24
 880:	e2 0f       	add	r30, r18
 882:	f1 1d       	adc	r31, r1
 884:	10 82       	st	Z, r1
 886:	8e ef       	ldi	r24, 0xFE	; 254
 888:	9f ef       	ldi	r25, 0xFF	; 255
 88a:	a6 c0       	rjmp	.+332    	; 0x9d8 <__stack+0xd9>
 88c:	21 e0       	ldi	r18, 0x01	; 1
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	91 11       	cpse	r25, r1
 892:	02 c0       	rjmp	.+4      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 894:	20 e0       	ldi	r18, 0x00	; 0
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	16 16       	cp	r1, r22
 89a:	17 06       	cpc	r1, r23
 89c:	1c f4       	brge	.+6      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
 89e:	fb 01       	movw	r30, r22
 8a0:	31 96       	adiw	r30, 0x01	; 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8a4:	e1 e0       	ldi	r30, 0x01	; 1
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	2e 0f       	add	r18, r30
 8aa:	3f 1f       	adc	r19, r31
 8ac:	bb 20       	and	r11, r11
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8b0:	eb 2d       	mov	r30, r11
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	31 96       	adiw	r30, 0x01	; 1
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8b8:	e0 e0       	ldi	r30, 0x00	; 0
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	2e 0f       	add	r18, r30
 8be:	3f 1f       	adc	r19, r31
 8c0:	e1 2f       	mov	r30, r17
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	2e 17       	cp	r18, r30
 8c6:	3f 07       	cpc	r19, r31
 8c8:	1c f4       	brge	.+6      	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 8ca:	12 1b       	sub	r17, r18
 8cc:	21 2f       	mov	r18, r17
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__DATA_REGION_LENGTH__+0xd2>
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	8e 2d       	mov	r24, r14
 8d4:	88 71       	andi	r24, 0x18	; 24
 8d6:	59 f4       	brne	.+22     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8d8:	f6 01       	movw	r30, r12
 8da:	82 2f       	mov	r24, r18
 8dc:	30 e2       	ldi	r19, 0x20	; 32
 8de:	88 23       	and	r24, r24
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 8e2:	31 93       	st	Z+, r19
 8e4:	81 50       	subi	r24, 0x01	; 1
 8e6:	fb cf       	rjmp	.-10     	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 8e8:	c2 0e       	add	r12, r18
 8ea:	d1 1c       	adc	r13, r1
 8ec:	20 e0       	ldi	r18, 0x00	; 0
 8ee:	99 23       	and	r25, r25
 8f0:	29 f0       	breq	.+10     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f2:	d6 01       	movw	r26, r12
 8f4:	9c 93       	st	X, r25
 8f6:	f6 01       	movw	r30, r12
 8f8:	31 96       	adiw	r30, 0x01	; 1
 8fa:	6f 01       	movw	r12, r30
 8fc:	51 11       	cpse	r21, r1
 8fe:	0b c0       	rjmp	.+22     	; 0x916 <__stack+0x17>
 900:	f6 01       	movw	r30, r12
 902:	82 2f       	mov	r24, r18
 904:	90 e3       	ldi	r25, 0x30	; 48
 906:	88 23       	and	r24, r24
 908:	19 f0       	breq	.+6      	; 0x910 <__stack+0x11>
 90a:	91 93       	st	Z+, r25
 90c:	81 50       	subi	r24, 0x01	; 1
 90e:	fb cf       	rjmp	.-10     	; 0x906 <__stack+0x7>
 910:	c2 0e       	add	r12, r18
 912:	d1 1c       	adc	r13, r1
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	0f 2d       	mov	r16, r15
 918:	06 0f       	add	r16, r22
 91a:	9a 81       	ldd	r25, Y+2	; 0x02
 91c:	34 2f       	mov	r19, r20
 91e:	30 71       	andi	r19, 0x10	; 16
 920:	44 ff       	sbrs	r20, 4
 922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
 924:	91 33       	cpi	r25, 0x31	; 49
 926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
 928:	01 50       	subi	r16, 0x01	; 1
 92a:	10 16       	cp	r1, r16
 92c:	24 f4       	brge	.+8      	; 0x936 <__stack+0x37>
 92e:	09 30       	cpi	r16, 0x09	; 9
 930:	18 f0       	brcs	.+6      	; 0x938 <__stack+0x39>
 932:	08 e0       	ldi	r16, 0x08	; 8
 934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
 936:	01 e0       	ldi	r16, 0x01	; 1
 938:	ab 01       	movw	r20, r22
 93a:	77 ff       	sbrs	r23, 7
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	40 e0       	ldi	r20, 0x00	; 0
 940:	50 e0       	ldi	r21, 0x00	; 0
 942:	fb 01       	movw	r30, r22
 944:	e4 1b       	sub	r30, r20
 946:	f5 0b       	sbc	r31, r21
 948:	a1 e0       	ldi	r26, 0x01	; 1
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	ac 0f       	add	r26, r28
 94e:	bd 1f       	adc	r27, r29
 950:	ea 0f       	add	r30, r26
 952:	fb 1f       	adc	r31, r27
 954:	8e e2       	ldi	r24, 0x2E	; 46
 956:	a8 2e       	mov	r10, r24
 958:	4b 01       	movw	r8, r22
 95a:	80 1a       	sub	r8, r16
 95c:	91 08       	sbc	r9, r1
 95e:	0b 2d       	mov	r16, r11
 960:	10 e0       	ldi	r17, 0x00	; 0
 962:	11 95       	neg	r17
 964:	01 95       	neg	r16
 966:	11 09       	sbc	r17, r1
 968:	4f 3f       	cpi	r20, 0xFF	; 255
 96a:	bf ef       	ldi	r27, 0xFF	; 255
 96c:	5b 07       	cpc	r21, r27
 96e:	21 f4       	brne	.+8      	; 0x978 <__stack+0x79>
 970:	d6 01       	movw	r26, r12
 972:	ac 92       	st	X, r10
 974:	11 96       	adiw	r26, 0x01	; 1
 976:	6d 01       	movw	r12, r26
 978:	64 17       	cp	r22, r20
 97a:	75 07       	cpc	r23, r21
 97c:	2c f0       	brlt	.+10     	; 0x988 <__stack+0x89>
 97e:	84 16       	cp	r8, r20
 980:	95 06       	cpc	r9, r21
 982:	14 f4       	brge	.+4      	; 0x988 <__stack+0x89>
 984:	81 81       	ldd	r24, Z+1	; 0x01
 986:	01 c0       	rjmp	.+2      	; 0x98a <__stack+0x8b>
 988:	80 e3       	ldi	r24, 0x30	; 48
 98a:	41 50       	subi	r20, 0x01	; 1
 98c:	51 09       	sbc	r21, r1
 98e:	31 96       	adiw	r30, 0x01	; 1
 990:	d6 01       	movw	r26, r12
 992:	11 96       	adiw	r26, 0x01	; 1
 994:	7d 01       	movw	r14, r26
 996:	40 17       	cp	r20, r16
 998:	51 07       	cpc	r21, r17
 99a:	24 f0       	brlt	.+8      	; 0x9a4 <__stack+0xa5>
 99c:	d6 01       	movw	r26, r12
 99e:	8c 93       	st	X, r24
 9a0:	67 01       	movw	r12, r14
 9a2:	e2 cf       	rjmp	.-60     	; 0x968 <__stack+0x69>
 9a4:	64 17       	cp	r22, r20
 9a6:	75 07       	cpc	r23, r21
 9a8:	39 f4       	brne	.+14     	; 0x9b8 <__stack+0xb9>
 9aa:	96 33       	cpi	r25, 0x36	; 54
 9ac:	20 f4       	brcc	.+8      	; 0x9b6 <__stack+0xb7>
 9ae:	95 33       	cpi	r25, 0x35	; 53
 9b0:	19 f4       	brne	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	31 11       	cpse	r19, r1
 9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <__stack+0xb9>
 9b6:	81 e3       	ldi	r24, 0x31	; 49
 9b8:	f6 01       	movw	r30, r12
 9ba:	80 83       	st	Z, r24
 9bc:	f7 01       	movw	r30, r14
 9be:	82 2f       	mov	r24, r18
 9c0:	90 e2       	ldi	r25, 0x20	; 32
 9c2:	88 23       	and	r24, r24
 9c4:	19 f0       	breq	.+6      	; 0x9cc <__stack+0xcd>
 9c6:	91 93       	st	Z+, r25
 9c8:	81 50       	subi	r24, 0x01	; 1
 9ca:	fb cf       	rjmp	.-10     	; 0x9c2 <__stack+0xc3>
 9cc:	f7 01       	movw	r30, r14
 9ce:	e2 0f       	add	r30, r18
 9d0:	f1 1d       	adc	r31, r1
 9d2:	10 82       	st	Z, r1
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	29 96       	adiw	r28, 0x09	; 9
 9da:	ec e0       	ldi	r30, 0x0C	; 12
 9dc:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__epilogue_restores__+0xc>

000009e0 <__ftoa_engine>:
 9e0:	28 30       	cpi	r18, 0x08	; 8
 9e2:	08 f0       	brcs	.+2      	; 0x9e6 <__ftoa_engine+0x6>
 9e4:	27 e0       	ldi	r18, 0x07	; 7
 9e6:	33 27       	eor	r19, r19
 9e8:	da 01       	movw	r26, r20
 9ea:	99 0f       	add	r25, r25
 9ec:	31 1d       	adc	r19, r1
 9ee:	87 fd       	sbrc	r24, 7
 9f0:	91 60       	ori	r25, 0x01	; 1
 9f2:	00 96       	adiw	r24, 0x00	; 0
 9f4:	61 05       	cpc	r22, r1
 9f6:	71 05       	cpc	r23, r1
 9f8:	39 f4       	brne	.+14     	; 0xa08 <__ftoa_engine+0x28>
 9fa:	32 60       	ori	r19, 0x02	; 2
 9fc:	2e 5f       	subi	r18, 0xFE	; 254
 9fe:	3d 93       	st	X+, r19
 a00:	30 e3       	ldi	r19, 0x30	; 48
 a02:	2a 95       	dec	r18
 a04:	e1 f7       	brne	.-8      	; 0x9fe <__ftoa_engine+0x1e>
 a06:	08 95       	ret
 a08:	9f 3f       	cpi	r25, 0xFF	; 255
 a0a:	30 f0       	brcs	.+12     	; 0xa18 <__ftoa_engine+0x38>
 a0c:	80 38       	cpi	r24, 0x80	; 128
 a0e:	71 05       	cpc	r23, r1
 a10:	61 05       	cpc	r22, r1
 a12:	09 f0       	breq	.+2      	; 0xa16 <__ftoa_engine+0x36>
 a14:	3c 5f       	subi	r19, 0xFC	; 252
 a16:	3c 5f       	subi	r19, 0xFC	; 252
 a18:	3d 93       	st	X+, r19
 a1a:	91 30       	cpi	r25, 0x01	; 1
 a1c:	08 f0       	brcs	.+2      	; 0xa20 <__ftoa_engine+0x40>
 a1e:	80 68       	ori	r24, 0x80	; 128
 a20:	91 1d       	adc	r25, r1
 a22:	df 93       	push	r29
 a24:	cf 93       	push	r28
 a26:	1f 93       	push	r17
 a28:	0f 93       	push	r16
 a2a:	ff 92       	push	r15
 a2c:	ef 92       	push	r14
 a2e:	19 2f       	mov	r17, r25
 a30:	98 7f       	andi	r25, 0xF8	; 248
 a32:	96 95       	lsr	r25
 a34:	e9 2f       	mov	r30, r25
 a36:	96 95       	lsr	r25
 a38:	96 95       	lsr	r25
 a3a:	e9 0f       	add	r30, r25
 a3c:	ff 27       	eor	r31, r31
 a3e:	ee 53       	subi	r30, 0x3E	; 62
 a40:	ff 4f       	sbci	r31, 0xFF	; 255
 a42:	99 27       	eor	r25, r25
 a44:	33 27       	eor	r19, r19
 a46:	ee 24       	eor	r14, r14
 a48:	ff 24       	eor	r15, r15
 a4a:	a7 01       	movw	r20, r14
 a4c:	e7 01       	movw	r28, r14
 a4e:	05 90       	lpm	r0, Z+
 a50:	08 94       	sec
 a52:	07 94       	ror	r0
 a54:	28 f4       	brcc	.+10     	; 0xa60 <__ftoa_engine+0x80>
 a56:	36 0f       	add	r19, r22
 a58:	e7 1e       	adc	r14, r23
 a5a:	f8 1e       	adc	r15, r24
 a5c:	49 1f       	adc	r20, r25
 a5e:	51 1d       	adc	r21, r1
 a60:	66 0f       	add	r22, r22
 a62:	77 1f       	adc	r23, r23
 a64:	88 1f       	adc	r24, r24
 a66:	99 1f       	adc	r25, r25
 a68:	06 94       	lsr	r0
 a6a:	a1 f7       	brne	.-24     	; 0xa54 <__ftoa_engine+0x74>
 a6c:	05 90       	lpm	r0, Z+
 a6e:	07 94       	ror	r0
 a70:	28 f4       	brcc	.+10     	; 0xa7c <__ftoa_engine+0x9c>
 a72:	e7 0e       	add	r14, r23
 a74:	f8 1e       	adc	r15, r24
 a76:	49 1f       	adc	r20, r25
 a78:	56 1f       	adc	r21, r22
 a7a:	c1 1d       	adc	r28, r1
 a7c:	77 0f       	add	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	99 1f       	adc	r25, r25
 a82:	66 1f       	adc	r22, r22
 a84:	06 94       	lsr	r0
 a86:	a1 f7       	brne	.-24     	; 0xa70 <__ftoa_engine+0x90>
 a88:	05 90       	lpm	r0, Z+
 a8a:	07 94       	ror	r0
 a8c:	28 f4       	brcc	.+10     	; 0xa98 <__ftoa_engine+0xb8>
 a8e:	f8 0e       	add	r15, r24
 a90:	49 1f       	adc	r20, r25
 a92:	56 1f       	adc	r21, r22
 a94:	c7 1f       	adc	r28, r23
 a96:	d1 1d       	adc	r29, r1
 a98:	88 0f       	add	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	66 1f       	adc	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	06 94       	lsr	r0
 aa2:	a1 f7       	brne	.-24     	; 0xa8c <__ftoa_engine+0xac>
 aa4:	05 90       	lpm	r0, Z+
 aa6:	07 94       	ror	r0
 aa8:	20 f4       	brcc	.+8      	; 0xab2 <__ftoa_engine+0xd2>
 aaa:	49 0f       	add	r20, r25
 aac:	56 1f       	adc	r21, r22
 aae:	c7 1f       	adc	r28, r23
 ab0:	d8 1f       	adc	r29, r24
 ab2:	99 0f       	add	r25, r25
 ab4:	66 1f       	adc	r22, r22
 ab6:	77 1f       	adc	r23, r23
 ab8:	88 1f       	adc	r24, r24
 aba:	06 94       	lsr	r0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__ftoa_engine+0xc8>
 abe:	84 91       	lpm	r24, Z
 ac0:	10 95       	com	r17
 ac2:	17 70       	andi	r17, 0x07	; 7
 ac4:	41 f0       	breq	.+16     	; 0xad6 <__ftoa_engine+0xf6>
 ac6:	d6 95       	lsr	r29
 ac8:	c7 95       	ror	r28
 aca:	57 95       	ror	r21
 acc:	47 95       	ror	r20
 ace:	f7 94       	ror	r15
 ad0:	e7 94       	ror	r14
 ad2:	1a 95       	dec	r17
 ad4:	c1 f7       	brne	.-16     	; 0xac6 <__ftoa_engine+0xe6>
 ad6:	e8 e6       	ldi	r30, 0x68	; 104
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	68 94       	set
 adc:	15 90       	lpm	r1, Z+
 ade:	15 91       	lpm	r17, Z+
 ae0:	35 91       	lpm	r19, Z+
 ae2:	65 91       	lpm	r22, Z+
 ae4:	95 91       	lpm	r25, Z+
 ae6:	05 90       	lpm	r0, Z+
 ae8:	7f e2       	ldi	r23, 0x2F	; 47
 aea:	73 95       	inc	r23
 aec:	e1 18       	sub	r14, r1
 aee:	f1 0a       	sbc	r15, r17
 af0:	43 0b       	sbc	r20, r19
 af2:	56 0b       	sbc	r21, r22
 af4:	c9 0b       	sbc	r28, r25
 af6:	d0 09       	sbc	r29, r0
 af8:	c0 f7       	brcc	.-16     	; 0xaea <__ftoa_engine+0x10a>
 afa:	e1 0c       	add	r14, r1
 afc:	f1 1e       	adc	r15, r17
 afe:	43 1f       	adc	r20, r19
 b00:	56 1f       	adc	r21, r22
 b02:	c9 1f       	adc	r28, r25
 b04:	d0 1d       	adc	r29, r0
 b06:	7e f4       	brtc	.+30     	; 0xb26 <__ftoa_engine+0x146>
 b08:	70 33       	cpi	r23, 0x30	; 48
 b0a:	11 f4       	brne	.+4      	; 0xb10 <__ftoa_engine+0x130>
 b0c:	8a 95       	dec	r24
 b0e:	e6 cf       	rjmp	.-52     	; 0xadc <__ftoa_engine+0xfc>
 b10:	e8 94       	clt
 b12:	01 50       	subi	r16, 0x01	; 1
 b14:	30 f0       	brcs	.+12     	; 0xb22 <__ftoa_engine+0x142>
 b16:	08 0f       	add	r16, r24
 b18:	0a f4       	brpl	.+2      	; 0xb1c <__ftoa_engine+0x13c>
 b1a:	00 27       	eor	r16, r16
 b1c:	02 17       	cp	r16, r18
 b1e:	08 f4       	brcc	.+2      	; 0xb22 <__ftoa_engine+0x142>
 b20:	20 2f       	mov	r18, r16
 b22:	23 95       	inc	r18
 b24:	02 2f       	mov	r16, r18
 b26:	7a 33       	cpi	r23, 0x3A	; 58
 b28:	28 f0       	brcs	.+10     	; 0xb34 <__ftoa_engine+0x154>
 b2a:	79 e3       	ldi	r23, 0x39	; 57
 b2c:	7d 93       	st	X+, r23
 b2e:	2a 95       	dec	r18
 b30:	e9 f7       	brne	.-6      	; 0xb2c <__ftoa_engine+0x14c>
 b32:	10 c0       	rjmp	.+32     	; 0xb54 <__ftoa_engine+0x174>
 b34:	7d 93       	st	X+, r23
 b36:	2a 95       	dec	r18
 b38:	89 f6       	brne	.-94     	; 0xadc <__ftoa_engine+0xfc>
 b3a:	06 94       	lsr	r0
 b3c:	97 95       	ror	r25
 b3e:	67 95       	ror	r22
 b40:	37 95       	ror	r19
 b42:	17 95       	ror	r17
 b44:	17 94       	ror	r1
 b46:	e1 18       	sub	r14, r1
 b48:	f1 0a       	sbc	r15, r17
 b4a:	43 0b       	sbc	r20, r19
 b4c:	56 0b       	sbc	r21, r22
 b4e:	c9 0b       	sbc	r28, r25
 b50:	d0 09       	sbc	r29, r0
 b52:	98 f0       	brcs	.+38     	; 0xb7a <__ftoa_engine+0x19a>
 b54:	23 95       	inc	r18
 b56:	7e 91       	ld	r23, -X
 b58:	73 95       	inc	r23
 b5a:	7a 33       	cpi	r23, 0x3A	; 58
 b5c:	08 f0       	brcs	.+2      	; 0xb60 <__ftoa_engine+0x180>
 b5e:	70 e3       	ldi	r23, 0x30	; 48
 b60:	7c 93       	st	X, r23
 b62:	20 13       	cpse	r18, r16
 b64:	b8 f7       	brcc	.-18     	; 0xb54 <__ftoa_engine+0x174>
 b66:	7e 91       	ld	r23, -X
 b68:	70 61       	ori	r23, 0x10	; 16
 b6a:	7d 93       	st	X+, r23
 b6c:	30 f0       	brcs	.+12     	; 0xb7a <__ftoa_engine+0x19a>
 b6e:	83 95       	inc	r24
 b70:	71 e3       	ldi	r23, 0x31	; 49
 b72:	7d 93       	st	X+, r23
 b74:	70 e3       	ldi	r23, 0x30	; 48
 b76:	2a 95       	dec	r18
 b78:	e1 f7       	brne	.-8      	; 0xb72 <__ftoa_engine+0x192>
 b7a:	11 24       	eor	r1, r1
 b7c:	ef 90       	pop	r14
 b7e:	ff 90       	pop	r15
 b80:	0f 91       	pop	r16
 b82:	1f 91       	pop	r17
 b84:	cf 91       	pop	r28
 b86:	df 91       	pop	r29
 b88:	99 27       	eor	r25, r25
 b8a:	87 fd       	sbrc	r24, 7
 b8c:	90 95       	com	r25
 b8e:	08 95       	ret

00000b90 <__prologue_saves__>:
 b90:	2f 92       	push	r2
 b92:	3f 92       	push	r3
 b94:	4f 92       	push	r4
 b96:	5f 92       	push	r5
 b98:	6f 92       	push	r6
 b9a:	7f 92       	push	r7
 b9c:	8f 92       	push	r8
 b9e:	9f 92       	push	r9
 ba0:	af 92       	push	r10
 ba2:	bf 92       	push	r11
 ba4:	cf 92       	push	r12
 ba6:	df 92       	push	r13
 ba8:	ef 92       	push	r14
 baa:	ff 92       	push	r15
 bac:	0f 93       	push	r16
 bae:	1f 93       	push	r17
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	cd b7       	in	r28, 0x3d	; 61
 bb6:	de b7       	in	r29, 0x3e	; 62
 bb8:	ca 1b       	sub	r28, r26
 bba:	db 0b       	sbc	r29, r27
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	f8 94       	cli
 bc0:	de bf       	out	0x3e, r29	; 62
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	cd bf       	out	0x3d, r28	; 61
 bc6:	09 94       	ijmp

00000bc8 <__epilogue_restores__>:
 bc8:	2a 88       	ldd	r2, Y+18	; 0x12
 bca:	39 88       	ldd	r3, Y+17	; 0x11
 bcc:	48 88       	ldd	r4, Y+16	; 0x10
 bce:	5f 84       	ldd	r5, Y+15	; 0x0f
 bd0:	6e 84       	ldd	r6, Y+14	; 0x0e
 bd2:	7d 84       	ldd	r7, Y+13	; 0x0d
 bd4:	8c 84       	ldd	r8, Y+12	; 0x0c
 bd6:	9b 84       	ldd	r9, Y+11	; 0x0b
 bd8:	aa 84       	ldd	r10, Y+10	; 0x0a
 bda:	b9 84       	ldd	r11, Y+9	; 0x09
 bdc:	c8 84       	ldd	r12, Y+8	; 0x08
 bde:	df 80       	ldd	r13, Y+7	; 0x07
 be0:	ee 80       	ldd	r14, Y+6	; 0x06
 be2:	fd 80       	ldd	r15, Y+5	; 0x05
 be4:	0c 81       	ldd	r16, Y+4	; 0x04
 be6:	1b 81       	ldd	r17, Y+3	; 0x03
 be8:	aa 81       	ldd	r26, Y+2	; 0x02
 bea:	b9 81       	ldd	r27, Y+1	; 0x01
 bec:	ce 0f       	add	r28, r30
 bee:	d1 1d       	adc	r29, r1
 bf0:	0f b6       	in	r0, 0x3f	; 63
 bf2:	f8 94       	cli
 bf4:	de bf       	out	0x3e, r29	; 62
 bf6:	0f be       	out	0x3f, r0	; 63
 bf8:	cd bf       	out	0x3d, r28	; 61
 bfa:	ed 01       	movw	r28, r26
 bfc:	08 95       	ret

00000bfe <_exit>:
 bfe:	f8 94       	cli

00000c00 <__stop_program>:
 c00:	ff cf       	rjmp	.-2      	; 0xc00 <__stop_program>
