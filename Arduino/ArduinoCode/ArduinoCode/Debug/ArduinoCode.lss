
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00001046  000010da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080010a  0080010a  000010e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af6  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  00002e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ac  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001134  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__floatsisf+0x2c>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <MoveSteps+0x152>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <main+0x4c>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <SetPortC+0x4>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e6 e4       	ldi	r30, 0x46	; 70
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	aa 30       	cpi	r26, 0x0A	; 10
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	aa e0       	ldi	r26, 0x0A	; 10
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a8 31       	cpi	r26, 0x18	; 24
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 ca 01 	call	0x394	; 0x394 <main>
     198:	0c 94 21 08 	jmp	0x1042	; 0x1042 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <GetPortD>:
///////PORT D/////////


uint8_t GetPortD(void)
{
    return (PIND & MASK_PORTD);
     1a0:	89 b1       	in	r24, 0x09	; 9
}
     1a2:	8c 7f       	andi	r24, 0xFC	; 252
     1a4:	08 95       	ret

000001a6 <SetPortD>:

void SetPortD(uint8_t out)
{
    PORTD = (PORTD & ~MASK_PORTD) | ((out & MASK_PORTD));
     1a6:	9b b1       	in	r25, 0x0b	; 11
     1a8:	93 70       	andi	r25, 0x03	; 3
     1aa:	8c 7f       	andi	r24, 0xFC	; 252
     1ac:	89 2b       	or	r24, r25
     1ae:	8b b9       	out	0x0b, r24	; 11
     1b0:	08 95       	ret

000001b2 <GetDDRD>:
}

uint8_t GetDDRD(void)
{
    return (DDRD & MASK_PORTD);
     1b2:	8a b1       	in	r24, 0x0a	; 10
}
     1b4:	8c 7f       	andi	r24, 0xFC	; 252
     1b6:	08 95       	ret

000001b8 <SetDDRD>:

void SetDDRD(uint8_t direction)
{
    DDRD = (DDRD & ~MASK_PORTD) | (direction & MASK_PORTD);
     1b8:	9a b1       	in	r25, 0x0a	; 10
     1ba:	93 70       	andi	r25, 0x03	; 3
     1bc:	8c 7f       	andi	r24, 0xFC	; 252
     1be:	89 2b       	or	r24, r25
     1c0:	8a b9       	out	0x0a, r24	; 10
     1c2:	08 95       	ret

000001c4 <GetPortC>:
///////PORT C/////////


uint8_t GetPortC (void)
{
    return(PINC & MASK_PORTC);
     1c4:	86 b1       	in	r24, 0x06	; 6
}
     1c6:	8f 73       	andi	r24, 0x3F	; 63
     1c8:	08 95       	ret

000001ca <SetPortC>:

void SetPortC(uint8_t x)
{
    PORTC = (PORTC & ~MASK_PORTC) | (x & MASK_PORTC);
     1ca:	98 b1       	in	r25, 0x08	; 8
     1cc:	90 7c       	andi	r25, 0xC0	; 192
     1ce:	8f 73       	andi	r24, 0x3F	; 63
     1d0:	89 2b       	or	r24, r25
     1d2:	88 b9       	out	0x08, r24	; 8
     1d4:	08 95       	ret

000001d6 <GetDDRC>:
}

uint8_t GetDDRC(void)
{
    return(DDRC & MASK_PORTC);
     1d6:	87 b1       	in	r24, 0x07	; 7
}
     1d8:	8f 73       	andi	r24, 0x3F	; 63
     1da:	08 95       	ret

000001dc <SetDDRC>:

void SetDDRC(uint8_t direction)
{
    DDRC = (DDRC & ~MASK_PORTC) | (direction & MASK_PORTC);
     1dc:	97 b1       	in	r25, 0x07	; 7
     1de:	90 7c       	andi	r25, 0xC0	; 192
     1e0:	8f 73       	andi	r24, 0x3F	; 63
     1e2:	89 2b       	or	r24, r25
     1e4:	87 b9       	out	0x07, r24	; 7
     1e6:	08 95       	ret

000001e8 <GetPortB>:
///////PORT B/////////


uint8_t GetPortB (void)
{
    return(PINB & MASK_PORTB);
     1e8:	83 b1       	in	r24, 0x03	; 3
}
     1ea:	8f 73       	andi	r24, 0x3F	; 63
     1ec:	08 95       	ret

000001ee <SetPortB>:

void SetPortB(uint8_t x)
{
    PORTB = (PORTB & ~MASK_PORTB) | (x & MASK_PORTB);
     1ee:	95 b1       	in	r25, 0x05	; 5
     1f0:	90 7c       	andi	r25, 0xC0	; 192
     1f2:	8f 73       	andi	r24, 0x3F	; 63
     1f4:	89 2b       	or	r24, r25
     1f6:	85 b9       	out	0x05, r24	; 5
     1f8:	08 95       	ret

000001fa <GetDDRB>:
}

uint8_t GetDDRB(void)
{
    return(DDRB & MASK_PORTB);
     1fa:	84 b1       	in	r24, 0x04	; 4
}
     1fc:	8f 73       	andi	r24, 0x3F	; 63
     1fe:	08 95       	ret

00000200 <SetDDRB>:

void SetDDRB(uint8_t direction)
{
    DDRB = (DDRB & ~MASK_PORTB) | (direction & MASK_PORTB);
     200:	94 b1       	in	r25, 0x04	; 4
     202:	90 7c       	andi	r25, 0xC0	; 192
     204:	8f 73       	andi	r24, 0x3F	; 63
     206:	89 2b       	or	r24, r25
     208:	84 b9       	out	0x04, r24	; 4
     20a:	08 95       	ret

0000020c <Timer1_initialize>:
#define xtal 16000000L

static void (*Timer1_Overflow_function)(void) = 0;

void Timer1_initialize ( uint32_t frequency, void (*handle_overflow)(void), uint8_t prescaler )
{
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	cf 93       	push	r28
     216:	6b 01       	movw	r12, r22
     218:	7c 01       	movw	r14, r24
     21a:	c2 2f       	mov	r28, r18
                                      // -  1  8 64 256 1024
    const static uint8_t prescales[] = {0, 0, 3, 6, 8, 10};

    Timer1_Overflow_function = handle_overflow;
     21c:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <__data_end+0x1>
     220:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <__data_end>

    TCNT1=0x00;
     224:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     228:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    // set timer0 counter initial value to 0
    // (note: entirely redundant as it was never used before)

    OCR1A = ((uint32_t)(xtal)>>prescales[prescaler]) / frequency - 1;
     22c:	e2 2f       	mov	r30, r18
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	e0 50       	subi	r30, 0x00	; 0
     232:	ff 4f       	sbci	r31, 0xFF	; 255
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	94 e2       	ldi	r25, 0x24	; 36
     238:	a4 ef       	ldi	r26, 0xF4	; 244
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	bc 01       	movw	r22, r24
     23e:	cd 01       	movw	r24, r26
     240:	00 80       	ld	r0, Z
     242:	04 c0       	rjmp	.+8      	; 0x24c <Timer1_initialize+0x40>
     244:	96 95       	lsr	r25
     246:	87 95       	ror	r24
     248:	77 95       	ror	r23
     24a:	67 95       	ror	r22
     24c:	0a 94       	dec	r0
     24e:	d2 f7       	brpl	.-12     	; 0x244 <Timer1_initialize+0x38>
     250:	a7 01       	movw	r20, r14
     252:	96 01       	movw	r18, r12
     254:	0e 94 57 05 	call	0xaae	; 0xaae <__udivmodsi4>
     258:	21 50       	subi	r18, 0x01	; 1
     25a:	31 09       	sbc	r19, r1
     25c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     260:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    TCCR1A = 0x00;
     264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // AABBCCMM - lower two bits of 4-bit mode MMMM

    TCCR1B = 0x08 | (0x07 & prescaler);
     268:	c7 70       	andi	r28, 0x07	; 7
     26a:	c8 60       	ori	r28, 0x08	; 8
     26c:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // ??-MMPPP - MM is upper two bits of mode MMMM, PPP is clock rescale
    // where PPP of 011 is clock rescale of 64
    // where MM MM is the Timer mode, we use 01 00 - CTC

    TIFR1  = 0;
     270:	16 ba       	out	0x16, r1	; 22
    // reset any pending Timer1 interrupts
    // (note: entirely redundant as none is pending - it was never used before)

    TIMSK1 = (1<<OCIE1A);
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        //  ICIE1  - enable Timer1 capture interrupt
        //  OCIE1A - enable Timer1 match OCR1A match interrupt
        //  TOIE1  - enable Timer1 overflow interrupt
}
     278:	cf 91       	pop	r28
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	08 95       	ret

00000284 <Timer1_shutdown>:

void Timer1_shutdown ()
{
    TIMSK1 &= ~(1<<TOIE1 | 1<<OCIE1A | 1<<OCIE1B | 1<<TOIE1);
     284:	ef e6       	ldi	r30, 0x6F	; 111
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	88 7f       	andi	r24, 0xF8	; 248
     28c:	80 83       	st	Z, r24
    // disable all Timer1 interrupts
    // which is the same effort as disabling just one interrupt but can be reused in other examples

    TCCR1A = 0;
     28e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0;
     292:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0;
     296:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    TIMSK1 = 0;
     29a:	10 82       	st	Z, r1
    TIFR1  = 0;
     29c:	16 ba       	out	0x16, r1	; 22
     29e:	08 95       	ret

000002a0 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	af 93       	push	r26
     2bc:	bf 93       	push	r27
     2be:	ef 93       	push	r30
     2c0:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
     2c2:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
     2c6:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
     2ca:	09 95       	icall
}
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	bf 91       	pop	r27
     2d2:	af 91       	pop	r26
     2d4:	9f 91       	pop	r25
     2d6:	8f 91       	pop	r24
     2d8:	7f 91       	pop	r23
     2da:	6f 91       	pop	r22
     2dc:	5f 91       	pop	r21
     2de:	4f 91       	pop	r20
     2e0:	3f 91       	pop	r19
     2e2:	2f 91       	pop	r18
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <uart0_initialize>:


uint8_t uart0_ready_TX ()
{
    return ( 0 != (UCSR0A & 1<<UDRE0) );
}
     2ee:	9c 01       	movw	r18, r24
     2f0:	40 e0       	ldi	r20, 0x00	; 0
     2f2:	50 e0       	ldi	r21, 0x00	; 0
     2f4:	60 e4       	ldi	r22, 0x40	; 64
     2f6:	72 e4       	ldi	r23, 0x42	; 66
     2f8:	8f e0       	ldi	r24, 0x0F	; 15
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divmodsi4>
     300:	ba 01       	movw	r22, r20
     302:	a9 01       	movw	r20, r18
     304:	41 50       	subi	r20, 0x01	; 1
     306:	51 09       	sbc	r21, r1
     308:	61 09       	sbc	r22, r1
     30a:	71 09       	sbc	r23, r1
     30c:	85 2f       	mov	r24, r21
     30e:	8f 70       	andi	r24, 0x0F	; 15
     310:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     314:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     318:	88 e1       	ldi	r24, 0x18	; 24
     31a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     31e:	8e e0       	ldi	r24, 0x0E	; 14
     320:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     324:	08 95       	ret

00000326 <uart0_putc>:

void uart0_putc (char c)
{
    while( 0 == (UCSR0A & 1<<UDRE0) ) ;
     326:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     32a:	95 ff       	sbrs	r25, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <uart0_putc>
    UDR0 = c;
     32e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     332:	08 95       	ret

00000334 <uart0_puts>:
}

void uart0_puts (const char* const s)
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	ec 01       	movw	r28, r24
    for ( const char* p = s; *p!='\0'; ++p )
     33a:	03 c0       	rjmp	.+6      	; 0x342 <uart0_puts+0xe>
        uart0_putc(*p);
     33c:	0e 94 93 01 	call	0x326	; 0x326 <uart0_putc>
    UDR0 = c;
}

void uart0_puts (const char* const s)
{
    for ( const char* p = s; *p!='\0'; ++p )
     340:	21 96       	adiw	r28, 0x01	; 1
     342:	88 81       	ld	r24, Y
     344:	81 11       	cpse	r24, r1
     346:	fa cf       	rjmp	.-12     	; 0x33c <uart0_puts+0x8>
        uart0_putc(*p);
}
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <CommandsInit>:
#include "commands.h"
#include "Bios/bios_uart0.h"


void CommandsInit() {
    uart0_initialize(uart_bps_9600);
     34e:	80 e8       	ldi	r24, 0x80	; 128
     350:	95 e2       	ldi	r25, 0x25	; 37
     352:	0e 94 77 01 	call	0x2ee	; 0x2ee <uart0_initialize>
     356:	08 95       	ret

00000358 <LimitSwitchesInit>:

#include "limit_switches.h"


void LimitSwitchesInit() {
    SetDDRD(GetDDRD() & ~LS_ALL);
     358:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <GetDDRD>
     35c:	8f 70       	andi	r24, 0x0F	; 15
     35e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SetDDRD>
    SetPortD(GetPortD() | LS_ALL);
     362:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GetPortD>
     366:	80 6f       	ori	r24, 0xF0	; 240
     368:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SetPortD>
     36c:	08 95       	ret

0000036e <CheckLimitSwitch>:
}

//returns whether or not a specific limit switch is activated
bool CheckLimitSwitch(uint8_t limit_switch) {
     36e:	cf 93       	push	r28
     370:	c8 2f       	mov	r28, r24
    bool out = (bool)(~GetPortD() & limit_switch);
     372:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <GetPortD>
     376:	28 2f       	mov	r18, r24
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	c9 01       	movw	r24, r18
     37c:	80 95       	com	r24
     37e:	90 95       	com	r25
     380:	2c 2f       	mov	r18, r28
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	28 23       	and	r18, r24
     386:	39 23       	and	r19, r25
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	23 2b       	or	r18, r19
     38c:	09 f4       	brne	.+2      	; 0x390 <CheckLimitSwitch+0x22>
     38e:	80 e0       	ldi	r24, 0x00	; 0
    return out;
}
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <main>:
#define B_ALL   0b00001111

int main(void)
{

    sei();
     394:	78 94       	sei


    CommandsInit();
     396:	0e 94 a7 01 	call	0x34e	; 0x34e <CommandsInit>

    StepperInit();
     39a:	0e 94 a1 02 	call	0x542	; 0x542 <StepperInit>
    SetDDRC(GetDDRC() & ~B_ALL);
     39e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <GetDDRC>
     3a2:	80 7f       	andi	r24, 0xF0	; 240
     3a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SetDDRC>
    SetPortC(GetPortC() | B_ALL);
     3a8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <GetPortC>
     3ac:	8f 60       	ori	r24, 0x0F	; 15
     3ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <SetPortC>
//         _delay_ms(500);
//         MoveSteps(-500, 0);
//         _delay_ms(500);
//         MoveSteps(0, -500);

        setPosition(0,10);
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e2       	ldi	r20, 0x20	; 32
     3b8:	51 e4       	ldi	r21, 0x41	; 65
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	cb 01       	movw	r24, r22
     3c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <setPosition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	2f ef       	ldi	r18, 0xFF	; 255
     3c6:	81 e1       	ldi	r24, 0x11	; 17
     3c8:	9a e7       	ldi	r25, 0x7A	; 122
     3ca:	21 50       	subi	r18, 0x01	; 1
     3cc:	80 40       	sbci	r24, 0x00	; 0
     3ce:	90 40       	sbci	r25, 0x00	; 0
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <main+0x36>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x40>
     3d4:	00 00       	nop
        _delay_ms(2500);
        setPosition(0,-10);
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	40 e2       	ldi	r20, 0x20	; 32
     3dc:	51 ec       	ldi	r21, 0xC1	; 193
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	cb 01       	movw	r24, r22
     3e4:	0e 94 fe 01 	call	0x3fc	; 0x3fc <setPosition>
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	81 e1       	ldi	r24, 0x11	; 17
     3ec:	9a e7       	ldi	r25, 0x7A	; 122
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <main+0x5a>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <main+0x64>
     3f8:	00 00       	nop
     3fa:	db cf       	rjmp	.-74     	; 0x3b2 <main+0x1e>

000003fc <setPosition>:
}




void setPosition(float x, float y) {
     3fc:	4f 92       	push	r4
     3fe:	5f 92       	push	r5
     400:	6f 92       	push	r6
     402:	7f 92       	push	r7
     404:	8f 92       	push	r8
     406:	9f 92       	push	r9
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	69 01       	movw	r12, r18
     416:	7a 01       	movw	r14, r20
    float delta_x = x - x_position;
     418:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <x_position>
     41c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <x_position+0x1>
     420:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <x_position+0x2>
     424:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <x_position+0x3>
     428:	0e 94 b4 03 	call	0x768	; 0x768 <__subsf3>
     42c:	4b 01       	movw	r8, r22
     42e:	5c 01       	movw	r10, r24
    float delta_y = y - y_position;
     430:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <y_position>
     434:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <y_position+0x1>
     438:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <y_position+0x2>
     43c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <y_position+0x3>
     440:	c7 01       	movw	r24, r14
     442:	b6 01       	movw	r22, r12
     444:	0e 94 b4 03 	call	0x768	; 0x768 <__subsf3>
     448:	6b 01       	movw	r12, r22
     44a:	7c 01       	movw	r14, r24

    int steps_x = (int)(delta_x / X_STEPS_TO_CM);
     44c:	24 ee       	ldi	r18, 0xE4	; 228
     44e:	36 e5       	ldi	r19, 0x56	; 86
     450:	47 ef       	ldi	r20, 0xF7	; 247
     452:	5b e3       	ldi	r21, 0x3B	; 59
     454:	c5 01       	movw	r24, r10
     456:	b4 01       	movw	r22, r8
     458:	0e 94 21 04 	call	0x842	; 0x842 <__divsf3>
     45c:	0e 94 93 04 	call	0x926	; 0x926 <__fixsfsi>
     460:	2b 01       	movw	r4, r22
     462:	3c 01       	movw	r6, r24
    int steps_y = (int)(delta_y / Y_STEPS_TO_CM);
     464:	26 e1       	ldi	r18, 0x16	; 22
     466:	3e ed       	ldi	r19, 0xDE	; 222
     468:	45 ee       	ldi	r20, 0xE5	; 229
     46a:	5b e3       	ldi	r21, 0x3B	; 59
     46c:	c7 01       	movw	r24, r14
     46e:	b6 01       	movw	r22, r12
     470:	0e 94 21 04 	call	0x842	; 0x842 <__divsf3>
     474:	0e 94 93 04 	call	0x926	; 0x926 <__fixsfsi>

    bool succeeded = MoveSteps(steps_x, steps_y);
     478:	c2 01       	movw	r24, r4
     47a:	0e 94 ae 02 	call	0x55c	; 0x55c <MoveSteps>
    if(succeeded) {
     47e:	88 23       	and	r24, r24
     480:	41 f1       	breq	.+80     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
        x_position += delta_x;
     482:	a5 01       	movw	r20, r10
     484:	94 01       	movw	r18, r8
     486:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <x_position>
     48a:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <x_position+0x1>
     48e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <x_position+0x2>
     492:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <x_position+0x3>
     496:	0e 94 b5 03 	call	0x76a	; 0x76a <__addsf3>
     49a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <x_position>
     49e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <x_position+0x1>
     4a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <x_position+0x2>
     4a6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <x_position+0x3>
        y_position += delta_y;
     4aa:	a7 01       	movw	r20, r14
     4ac:	96 01       	movw	r18, r12
     4ae:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <y_position>
     4b2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <y_position+0x1>
     4b6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <y_position+0x2>
     4ba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <y_position+0x3>
     4be:	0e 94 b5 03 	call	0x76a	; 0x76a <__addsf3>
     4c2:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <y_position>
     4c6:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <y_position+0x1>
     4ca:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <y_position+0x2>
     4ce:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <y_position+0x3>
    }

     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	7f 90       	pop	r7
     4e4:	6f 90       	pop	r6
     4e6:	5f 90       	pop	r5
     4e8:	4f 90       	pop	r4
     4ea:	08 95       	ret

000004ec <PulseFn>:
void PulseFn(void) {

    static uint16_t cnt = 0;

    //increment count if still under the max value, otherwise reset
    if(cnt<pwm_res) cnt++;
     4ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt.1949>
     4f0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt.1949+0x1>
     4f4:	8a 30       	cpi	r24, 0x0A	; 10
     4f6:	91 05       	cpc	r25, r1
     4f8:	30 f4       	brcc	.+12     	; 0x506 <PulseFn+0x1a>
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <cnt.1949+0x1>
     500:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <cnt.1949>
     504:	07 c0       	rjmp	.+14     	; 0x514 <PulseFn+0x28>
    else {
        cnt = 0;
     506:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <cnt.1949+0x1>
     50a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <cnt.1949>
        semaphore = 1;
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <semaphore>
    }

    //generates the pulse for the percentage of the duty cycle
    if(duty_cycle>cnt) {
     514:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <cnt.1949>
     518:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <cnt.1949+0x1>
     51c:	05 97       	sbiw	r24, 0x05	; 5
     51e:	40 f4       	brcc	.+16     	; 0x530 <PulseFn+0x44>
        SetPortB(GetPortB() | active_steppers);
     520:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     524:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <active_steppers>
     528:	89 2b       	or	r24, r25
     52a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
     52e:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~active_steppers);
     530:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     534:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <active_steppers>
     538:	90 95       	com	r25
     53a:	89 23       	and	r24, r25
     53c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
     540:	08 95       	ret

00000542 <StepperInit>:
}

//sets up the stepper motor pins as outputs
void StepperInit(void)
{
    LimitSwitchesInit();
     542:	0e 94 ac 01 	call	0x358	; 0x358 <LimitSwitchesInit>
    SetDDRB(GetDDRB() | (STEP_X | STEP_Y) | (DIR_X | DIR_Y));
     546:	0e 94 fd 00 	call	0x1fa	; 0x1fa <GetDDRB>
     54a:	8f 60       	ori	r24, 0x0F	; 15
     54c:	0e 94 00 01 	call	0x200	; 0x200 <SetDDRB>
    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
     550:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     554:	80 7f       	andi	r24, 0xF0	; 240
     556:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
     55a:	08 95       	ret

0000055c <MoveSteps>:




//Moves both stepper motors the specified number of steps
bool MoveSteps(int steps_x, int steps_y) {
     55c:	8f 92       	push	r8
     55e:	9f 92       	push	r9
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	a0 97       	sbiw	r28, 0x20	; 32
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61

    if(steps_x == 0 && steps_y == 0) {
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	21 f4       	brne	.+8      	; 0x58e <MoveSteps+0x32>
     586:	61 15       	cp	r22, r1
     588:	71 05       	cpc	r23, r1
     58a:	09 f4       	brne	.+2      	; 0x58e <MoveSteps+0x32>
     58c:	d2 c0       	rjmp	.+420    	; 0x732 <MoveSteps+0x1d6>
        return true;
    }

    //used to decide which steppers to pulse
    active_steppers = 0;
     58e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <active_steppers>

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;

    //set x axis active and direction
    if(steps_x != 0) {
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	51 f0       	breq	.+20     	; 0x5aa <MoveSteps+0x4e>
        active_steppers |= STEP_X;
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <active_steppers>
        if(steps_x < 0) {
     59c:	99 23       	and	r25, r25
     59e:	54 f0       	brlt	.+20     	; 0x5b4 <MoveSteps+0x58>

    //used to decide which steppers to pulse
    active_steppers = 0;

    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;
     5a0:	0f 2e       	mov	r0, r31
     5a2:	fa e0       	ldi	r31, 0x0A	; 10
     5a4:	bf 2e       	mov	r11, r31
     5a6:	f0 2d       	mov	r31, r0
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <MoveSteps+0x5e>
     5aa:	0f 2e       	mov	r0, r31
     5ac:	fa e0       	ldi	r31, 0x0A	; 10
     5ae:	bf 2e       	mov	r11, r31
     5b0:	f0 2d       	mov	r31, r0
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <MoveSteps+0x5e>

    //set x axis active and direction
    if(steps_x != 0) {
        active_steppers |= STEP_X;
        if(steps_x < 0) {
            direction &= ~DIR_X;
     5b4:	68 94       	set
     5b6:	bb 24       	eor	r11, r11
     5b8:	b3 f8       	bld	r11, 3
        }
    }

    //set y axis active and direction
    if(steps_y != 0) {
     5ba:	61 15       	cp	r22, r1
     5bc:	71 05       	cpc	r23, r1
     5be:	51 f0       	breq	.+20     	; 0x5d4 <MoveSteps+0x78>
        active_steppers |= STEP_Y;
     5c0:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <active_steppers>
     5c4:	24 60       	ori	r18, 0x04	; 4
     5c6:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <active_steppers>
        if(steps_y < 0) {
     5ca:	77 23       	and	r23, r23
     5cc:	1c f4       	brge	.+6      	; 0x5d4 <MoveSteps+0x78>
            direction &= ~DIR_Y;
     5ce:	2b 2d       	mov	r18, r11
     5d0:	27 7f       	andi	r18, 0xF7	; 247
     5d2:	b2 2e       	mov	r11, r18
     5d4:	4b 01       	movw	r8, r22
     5d6:	7c 01       	movw	r14, r24
        }
    }

    char buffer[32];
    dtostrf((float)steps_x, 5, 3, buffer);
     5d8:	bc 01       	movw	r22, r24
     5da:	99 0f       	add	r25, r25
     5dc:	88 0b       	sbc	r24, r24
     5de:	99 0b       	sbc	r25, r25
     5e0:	0e 94 cb 04 	call	0x996	; 0x996 <__floatsisf>
     5e4:	8e 01       	movw	r16, r28
     5e6:	0f 5f       	subi	r16, 0xFF	; 255
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	23 e0       	ldi	r18, 0x03	; 3
     5ec:	45 e0       	ldi	r20, 0x05	; 5
     5ee:	0e 94 98 05 	call	0xb30	; 0xb30 <dtostrf>
    uart0_puts(buffer);
     5f2:	c8 01       	movw	r24, r16
     5f4:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>
    uart0_puts("\t\n");
     5f8:	86 e0       	ldi	r24, 0x06	; 6
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 9a 01 	call	0x334	; 0x334 <uart0_puts>


    if(CheckLimitSwitch(LS_NEG_X)) {
     600:	80 e1       	ldi	r24, 0x10	; 16
     602:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     606:	88 23       	and	r24, r24
     608:	19 f0       	breq	.+6      	; 0x610 <MoveSteps+0xb4>
        if(steps_x < 0) {
     60a:	ff 20       	and	r15, r15
     60c:	0c f4       	brge	.+2      	; 0x610 <MoveSteps+0xb4>
     60e:	93 c0       	rjmp	.+294    	; 0x736 <MoveSteps+0x1da>
            return false;
        }
    }
    if (CheckLimitSwitch(LS_POS_X)) {
     610:	80 e2       	ldi	r24, 0x20	; 32
     612:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     616:	88 23       	and	r24, r24
     618:	21 f0       	breq	.+8      	; 0x622 <MoveSteps+0xc6>
        if(steps_x > 0) {
     61a:	1e 14       	cp	r1, r14
     61c:	1f 04       	cpc	r1, r15
     61e:	0c f4       	brge	.+2      	; 0x622 <MoveSteps+0xc6>
     620:	8c c0       	rjmp	.+280    	; 0x73a <MoveSteps+0x1de>
            return false;
        }
    }

    if(CheckLimitSwitch(LS_NEG_Y)) {
     622:	80 e4       	ldi	r24, 0x40	; 64
     624:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     628:	88 23       	and	r24, r24
     62a:	19 f0       	breq	.+6      	; 0x632 <MoveSteps+0xd6>
        if(steps_y < 0) {
     62c:	99 20       	and	r9, r9
     62e:	0c f4       	brge	.+2      	; 0x632 <MoveSteps+0xd6>
     630:	86 c0       	rjmp	.+268    	; 0x73e <MoveSteps+0x1e2>
            return false;
        }
    }
    if (CheckLimitSwitch(LS_POS_Y)) {
     632:	80 e8       	ldi	r24, 0x80	; 128
     634:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     638:	88 23       	and	r24, r24
     63a:	21 f0       	breq	.+8      	; 0x644 <MoveSteps+0xe8>
        if(steps_y > 0) {
     63c:	18 14       	cp	r1, r8
     63e:	19 04       	cpc	r1, r9
     640:	0c f4       	brge	.+2      	; 0x644 <MoveSteps+0xe8>
     642:	7f c0       	rjmp	.+254    	; 0x742 <MoveSteps+0x1e6>
    }




    steps_x = abs(steps_x);
     644:	c7 01       	movw	r24, r14
     646:	99 23       	and	r25, r25
     648:	24 f4       	brge	.+8      	; 0x652 <MoveSteps+0xf6>
     64a:	88 27       	eor	r24, r24
     64c:	99 27       	eor	r25, r25
     64e:	8e 19       	sub	r24, r14
     650:	9f 09       	sbc	r25, r15
     652:	7c 01       	movw	r14, r24
    steps_y = abs(steps_y);
     654:	64 01       	movw	r12, r8
     656:	99 20       	and	r9, r9
     658:	24 f4       	brge	.+8      	; 0x662 <MoveSteps+0x106>
     65a:	cc 24       	eor	r12, r12
     65c:	dd 24       	eor	r13, r13
     65e:	c8 18       	sub	r12, r8
     660:	d9 08       	sbc	r13, r9



    if(active_steppers) {
     662:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_steppers>
     666:	88 23       	and	r24, r24
     668:	31 f0       	breq	.+12     	; 0x676 <MoveSteps+0x11a>
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
     66a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     66e:	85 7f       	andi	r24, 0xF5	; 245
     670:	8b 29       	or	r24, r11
     672:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
     676:	24 e0       	ldi	r18, 0x04	; 4
     678:	46 e7       	ldi	r20, 0x76	; 118
     67a:	52 e0       	ldi	r21, 0x02	; 2
     67c:	68 ef       	ldi	r22, 0xF8	; 248
     67e:	7a e2       	ldi	r23, 0x2A	; 42
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 06 01 	call	0x20c	; 0x20c <Timer1_initialize>

    while(1) {
        while(semaphore == 0);
     688:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <semaphore>
     68c:	88 23       	and	r24, r24
     68e:	e1 f3       	breq	.-8      	; 0x688 <MoveSteps+0x12c>
        semaphore = 0;
     690:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <semaphore>

        //keeps track of steps and deactivates stepper when number of steps is complete

        bool limitSwitchHit = false;
        if(CheckLimitSwitch(LS_NEG_X)) {
     694:	80 e1       	ldi	r24, 0x10	; 16
     696:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     69a:	88 23       	and	r24, r24
     69c:	21 f0       	breq	.+8      	; 0x6a6 <MoveSteps+0x14a>
            if(!(direction & DIR_X)) {
     69e:	b1 fe       	sbrs	r11, 1
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <MoveSteps+0x14e>
        while(semaphore == 0);
        semaphore = 0;

        //keeps track of steps and deactivates stepper when number of steps is complete

        bool limitSwitchHit = false;
     6a2:	10 e0       	ldi	r17, 0x00	; 0
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <MoveSteps+0x150>
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <MoveSteps+0x150>
        if(CheckLimitSwitch(LS_NEG_X)) {
            if(!(direction & DIR_X)) {
                limitSwitchHit = true;
     6aa:	11 e0       	ldi	r17, 0x01	; 1
            }
        }
        if (CheckLimitSwitch(LS_POS_X)) {
     6ac:	80 e2       	ldi	r24, 0x20	; 32
     6ae:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     6b2:	88 23       	and	r24, r24
     6b4:	11 f0       	breq	.+4      	; 0x6ba <MoveSteps+0x15e>
            if((direction & DIR_X)) {
     6b6:	b1 fc       	sbrc	r11, 1
                limitSwitchHit = true;
     6b8:	11 e0       	ldi	r17, 0x01	; 1
            }
        }

        if(CheckLimitSwitch(LS_NEG_Y)) {
     6ba:	80 e4       	ldi	r24, 0x40	; 64
     6bc:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     6c0:	88 23       	and	r24, r24
     6c2:	11 f0       	breq	.+4      	; 0x6c8 <MoveSteps+0x16c>
            if(!(direction & DIR_Y)) {
     6c4:	b3 fe       	sbrs	r11, 3
                limitSwitchHit = true;
     6c6:	11 e0       	ldi	r17, 0x01	; 1
            }
        }
        if (CheckLimitSwitch(LS_POS_Y)) {
     6c8:	80 e8       	ldi	r24, 0x80	; 128
     6ca:	0e 94 b7 01 	call	0x36e	; 0x36e <CheckLimitSwitch>
     6ce:	88 23       	and	r24, r24
     6d0:	11 f0       	breq	.+4      	; 0x6d6 <MoveSteps+0x17a>
            if(direction & DIR_Y) {
     6d2:	b3 fc       	sbrc	r11, 3
                limitSwitchHit = true;
     6d4:	11 e0       	ldi	r17, 0x01	; 1
            }
        }

        if(limitSwitchHit) {
     6d6:	11 23       	and	r17, r17
     6d8:	49 f0       	breq	.+18     	; 0x6ec <MoveSteps+0x190>
            SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
     6da:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     6de:	8a 7f       	andi	r24, 0xFA	; 250
     6e0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
            Timer1_shutdown();
     6e4:	0e 94 42 01 	call	0x284	; 0x284 <Timer1_shutdown>
            return false;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	2c c0       	rjmp	.+88     	; 0x744 <MoveSteps+0x1e8>
        }




        if(steps_x >= 0) {
     6ec:	ff 20       	and	r15, r15
     6ee:	24 f0       	brlt	.+8      	; 0x6f8 <MoveSteps+0x19c>
            steps_x--;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	e8 1a       	sub	r14, r24
     6f4:	f1 08       	sbc	r15, r1
     6f6:	05 c0       	rjmp	.+10     	; 0x702 <MoveSteps+0x1a6>
        } else {
            active_steppers &= ~STEP_X;
     6f8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_steppers>
     6fc:	8e 7f       	andi	r24, 0xFE	; 254
     6fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <active_steppers>
        }


        if(steps_y >= 0) {
     702:	dd 20       	and	r13, r13
     704:	24 f0       	brlt	.+8      	; 0x70e <MoveSteps+0x1b2>
            steps_y--;
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	c2 1a       	sub	r12, r18
     70a:	d1 08       	sbc	r13, r1
     70c:	05 c0       	rjmp	.+10     	; 0x718 <MoveSteps+0x1bc>
        } else {
            active_steppers &= ~STEP_Y;
     70e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_steppers>
     712:	8b 7f       	andi	r24, 0xFB	; 251
     714:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <active_steppers>
        }

        //If both steppers are no longer active, job is done so exit
        if(active_steppers == 0) {
     718:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <active_steppers>
     71c:	81 11       	cpse	r24, r1
     71e:	b4 cf       	rjmp	.-152    	; 0x688 <MoveSteps+0x12c>
            break;
        }
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
     720:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <GetPortB>
     724:	8a 7f       	andi	r24, 0xFA	; 250
     726:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SetPortB>
    Timer1_shutdown();
     72a:	0e 94 42 01 	call	0x284	; 0x284 <Timer1_shutdown>
    return true;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	09 c0       	rjmp	.+18     	; 0x744 <MoveSteps+0x1e8>

//Moves both stepper motors the specified number of steps
bool MoveSteps(int steps_x, int steps_y) {

    if(steps_x == 0 && steps_y == 0) {
        return true;
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	07 c0       	rjmp	.+14     	; 0x744 <MoveSteps+0x1e8>
    uart0_puts("\t\n");


    if(CheckLimitSwitch(LS_NEG_X)) {
        if(steps_x < 0) {
            return false;
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	05 c0       	rjmp	.+10     	; 0x744 <MoveSteps+0x1e8>
        }
    }
    if (CheckLimitSwitch(LS_POS_X)) {
        if(steps_x > 0) {
            return false;
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	03 c0       	rjmp	.+6      	; 0x744 <MoveSteps+0x1e8>
        }
    }

    if(CheckLimitSwitch(LS_NEG_Y)) {
        if(steps_y < 0) {
            return false;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	01 c0       	rjmp	.+2      	; 0x744 <MoveSteps+0x1e8>
        }
    }
    if (CheckLimitSwitch(LS_POS_Y)) {
        if(steps_y > 0) {
            return false;
     742:	80 e0       	ldi	r24, 0x00	; 0
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)) );
    Timer1_shutdown();
    return true;
}
     744:	a0 96       	adiw	r28, 0x20	; 32
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	08 95       	ret

00000768 <__subsf3>:
     768:	50 58       	subi	r21, 0x80	; 128

0000076a <__addsf3>:
     76a:	bb 27       	eor	r27, r27
     76c:	aa 27       	eor	r26, r26
     76e:	0e 94 cc 03 	call	0x798	; 0x798 <__addsf3x>
     772:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_round>
     776:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscA>
     77a:	38 f0       	brcs	.+14     	; 0x78a <__addsf3+0x20>
     77c:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscB>
     780:	20 f0       	brcs	.+8      	; 0x78a <__addsf3+0x20>
     782:	39 f4       	brne	.+14     	; 0x792 <__addsf3+0x28>
     784:	9f 3f       	cpi	r25, 0xFF	; 255
     786:	19 f4       	brne	.+6      	; 0x78e <__addsf3+0x24>
     788:	26 f4       	brtc	.+8      	; 0x792 <__addsf3+0x28>
     78a:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_nan>
     78e:	0e f4       	brtc	.+2      	; 0x792 <__addsf3+0x28>
     790:	e0 95       	com	r30
     792:	e7 fb       	bst	r30, 7
     794:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_inf>

00000798 <__addsf3x>:
     798:	e9 2f       	mov	r30, r25
     79a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_split3>
     79e:	58 f3       	brcs	.-42     	; 0x776 <__addsf3+0xc>
     7a0:	ba 17       	cp	r27, r26
     7a2:	62 07       	cpc	r22, r18
     7a4:	73 07       	cpc	r23, r19
     7a6:	84 07       	cpc	r24, r20
     7a8:	95 07       	cpc	r25, r21
     7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__addsf3x+0x1c>
     7ac:	79 f4       	brne	.+30     	; 0x7cc <__addsf3x+0x34>
     7ae:	a6 f5       	brtc	.+104    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7b0:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_zero>
     7b4:	0e f4       	brtc	.+2      	; 0x7b8 <__addsf3x+0x20>
     7b6:	e0 95       	com	r30
     7b8:	0b 2e       	mov	r0, r27
     7ba:	ba 2f       	mov	r27, r26
     7bc:	a0 2d       	mov	r26, r0
     7be:	0b 01       	movw	r0, r22
     7c0:	b9 01       	movw	r22, r18
     7c2:	90 01       	movw	r18, r0
     7c4:	0c 01       	movw	r0, r24
     7c6:	ca 01       	movw	r24, r20
     7c8:	a0 01       	movw	r20, r0
     7ca:	11 24       	eor	r1, r1
     7cc:	ff 27       	eor	r31, r31
     7ce:	59 1b       	sub	r21, r25
     7d0:	99 f0       	breq	.+38     	; 0x7f8 <__addsf3x+0x60>
     7d2:	59 3f       	cpi	r21, 0xF9	; 249
     7d4:	50 f4       	brcc	.+20     	; 0x7ea <__addsf3x+0x52>
     7d6:	50 3e       	cpi	r21, 0xE0	; 224
     7d8:	68 f1       	brcs	.+90     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     7da:	1a 16       	cp	r1, r26
     7dc:	f0 40       	sbci	r31, 0x00	; 0
     7de:	a2 2f       	mov	r26, r18
     7e0:	23 2f       	mov	r18, r19
     7e2:	34 2f       	mov	r19, r20
     7e4:	44 27       	eor	r20, r20
     7e6:	58 5f       	subi	r21, 0xF8	; 248
     7e8:	f3 cf       	rjmp	.-26     	; 0x7d0 <__addsf3x+0x38>
     7ea:	46 95       	lsr	r20
     7ec:	37 95       	ror	r19
     7ee:	27 95       	ror	r18
     7f0:	a7 95       	ror	r26
     7f2:	f0 40       	sbci	r31, 0x00	; 0
     7f4:	53 95       	inc	r21
     7f6:	c9 f7       	brne	.-14     	; 0x7ea <__addsf3x+0x52>
     7f8:	7e f4       	brtc	.+30     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     7fa:	1f 16       	cp	r1, r31
     7fc:	ba 0b       	sbc	r27, r26
     7fe:	62 0b       	sbc	r22, r18
     800:	73 0b       	sbc	r23, r19
     802:	84 0b       	sbc	r24, r20
     804:	ba f0       	brmi	.+46     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     806:	91 50       	subi	r25, 0x01	; 1
     808:	a1 f0       	breq	.+40     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     80a:	ff 0f       	add	r31, r31
     80c:	bb 1f       	adc	r27, r27
     80e:	66 1f       	adc	r22, r22
     810:	77 1f       	adc	r23, r23
     812:	88 1f       	adc	r24, r24
     814:	c2 f7       	brpl	.-16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     816:	0e c0       	rjmp	.+28     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     818:	ba 0f       	add	r27, r26
     81a:	62 1f       	adc	r22, r18
     81c:	73 1f       	adc	r23, r19
     81e:	84 1f       	adc	r24, r20
     820:	48 f4       	brcc	.+18     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     822:	87 95       	ror	r24
     824:	77 95       	ror	r23
     826:	67 95       	ror	r22
     828:	b7 95       	ror	r27
     82a:	f7 95       	ror	r31
     82c:	9e 3f       	cpi	r25, 0xFE	; 254
     82e:	08 f0       	brcs	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     830:	b0 cf       	rjmp	.-160    	; 0x792 <__addsf3+0x28>
     832:	93 95       	inc	r25
     834:	88 0f       	add	r24, r24
     836:	08 f0       	brcs	.+2      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     838:	99 27       	eor	r25, r25
     83a:	ee 0f       	add	r30, r30
     83c:	97 95       	ror	r25
     83e:	87 95       	ror	r24
     840:	08 95       	ret

00000842 <__divsf3>:
     842:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3x>
     846:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__fp_round>
     84a:	0e 94 16 05 	call	0xa2c	; 0xa2c <__fp_pscB>
     84e:	58 f0       	brcs	.+22     	; 0x866 <__divsf3+0x24>
     850:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__fp_pscA>
     854:	40 f0       	brcs	.+16     	; 0x866 <__divsf3+0x24>
     856:	29 f4       	brne	.+10     	; 0x862 <__divsf3+0x20>
     858:	5f 3f       	cpi	r21, 0xFF	; 255
     85a:	29 f0       	breq	.+10     	; 0x866 <__divsf3+0x24>
     85c:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_inf>
     860:	51 11       	cpse	r21, r1
     862:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_szero>
     866:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__fp_nan>

0000086a <__divsf3x>:
     86a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_split3>
     86e:	68 f3       	brcs	.-38     	; 0x84a <__divsf3+0x8>

00000870 <__divsf3_pse>:
     870:	99 23       	and	r25, r25
     872:	b1 f3       	breq	.-20     	; 0x860 <__divsf3+0x1e>
     874:	55 23       	and	r21, r21
     876:	91 f3       	breq	.-28     	; 0x85c <__divsf3+0x1a>
     878:	95 1b       	sub	r25, r21
     87a:	55 0b       	sbc	r21, r21
     87c:	bb 27       	eor	r27, r27
     87e:	aa 27       	eor	r26, r26
     880:	62 17       	cp	r22, r18
     882:	73 07       	cpc	r23, r19
     884:	84 07       	cpc	r24, r20
     886:	38 f0       	brcs	.+14     	; 0x896 <__divsf3_pse+0x26>
     888:	9f 5f       	subi	r25, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	22 0f       	add	r18, r18
     88e:	33 1f       	adc	r19, r19
     890:	44 1f       	adc	r20, r20
     892:	aa 1f       	adc	r26, r26
     894:	a9 f3       	breq	.-22     	; 0x880 <__divsf3_pse+0x10>
     896:	35 d0       	rcall	.+106    	; 0x902 <__stack+0x3>
     898:	0e 2e       	mov	r0, r30
     89a:	3a f0       	brmi	.+14     	; 0x8aa <__divsf3_pse+0x3a>
     89c:	e0 e8       	ldi	r30, 0x80	; 128
     89e:	32 d0       	rcall	.+100    	; 0x904 <__stack+0x5>
     8a0:	91 50       	subi	r25, 0x01	; 1
     8a2:	50 40       	sbci	r21, 0x00	; 0
     8a4:	e6 95       	lsr	r30
     8a6:	00 1c       	adc	r0, r0
     8a8:	ca f7       	brpl	.-14     	; 0x89c <__divsf3_pse+0x2c>
     8aa:	2b d0       	rcall	.+86     	; 0x902 <__stack+0x3>
     8ac:	fe 2f       	mov	r31, r30
     8ae:	29 d0       	rcall	.+82     	; 0x902 <__stack+0x3>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	bb 1f       	adc	r27, r27
     8b8:	26 17       	cp	r18, r22
     8ba:	37 07       	cpc	r19, r23
     8bc:	48 07       	cpc	r20, r24
     8be:	ab 07       	cpc	r26, r27
     8c0:	b0 e8       	ldi	r27, 0x80	; 128
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <__divsf3_pse+0x56>
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	80 2d       	mov	r24, r0
     8c8:	bf 01       	movw	r22, r30
     8ca:	ff 27       	eor	r31, r31
     8cc:	93 58       	subi	r25, 0x83	; 131
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	3a f0       	brmi	.+14     	; 0x8e0 <__divsf3_pse+0x70>
     8d2:	9e 3f       	cpi	r25, 0xFE	; 254
     8d4:	51 05       	cpc	r21, r1
     8d6:	78 f0       	brcs	.+30     	; 0x8f6 <__divsf3_pse+0x86>
     8d8:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_inf>
     8dc:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_szero>
     8e0:	5f 3f       	cpi	r21, 0xFF	; 255
     8e2:	e4 f3       	brlt	.-8      	; 0x8dc <__divsf3_pse+0x6c>
     8e4:	98 3e       	cpi	r25, 0xE8	; 232
     8e6:	d4 f3       	brlt	.-12     	; 0x8dc <__divsf3_pse+0x6c>
     8e8:	86 95       	lsr	r24
     8ea:	77 95       	ror	r23
     8ec:	67 95       	ror	r22
     8ee:	b7 95       	ror	r27
     8f0:	f7 95       	ror	r31
     8f2:	9f 5f       	subi	r25, 0xFF	; 255
     8f4:	c9 f7       	brne	.-14     	; 0x8e8 <__divsf3_pse+0x78>
     8f6:	88 0f       	add	r24, r24
     8f8:	91 1d       	adc	r25, r1
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	97 f9       	bld	r25, 7
     900:	08 95       	ret
     902:	e1 e0       	ldi	r30, 0x01	; 1
     904:	66 0f       	add	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	88 1f       	adc	r24, r24
     90a:	bb 1f       	adc	r27, r27
     90c:	62 17       	cp	r22, r18
     90e:	73 07       	cpc	r23, r19
     910:	84 07       	cpc	r24, r20
     912:	ba 07       	cpc	r27, r26
     914:	20 f0       	brcs	.+8      	; 0x91e <__stack+0x1f>
     916:	62 1b       	sub	r22, r18
     918:	73 0b       	sbc	r23, r19
     91a:	84 0b       	sbc	r24, r20
     91c:	ba 0b       	sbc	r27, r26
     91e:	ee 1f       	adc	r30, r30
     920:	88 f7       	brcc	.-30     	; 0x904 <__stack+0x5>
     922:	e0 95       	com	r30
     924:	08 95       	ret

00000926 <__fixsfsi>:
     926:	0e 94 9a 04 	call	0x934	; 0x934 <__fixunssfsi>
     92a:	68 94       	set
     92c:	b1 11       	cpse	r27, r1
     92e:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__fp_szero>
     932:	08 95       	ret

00000934 <__fixunssfsi>:
     934:	0e 94 36 05 	call	0xa6c	; 0xa6c <__fp_splitA>
     938:	88 f0       	brcs	.+34     	; 0x95c <__fixunssfsi+0x28>
     93a:	9f 57       	subi	r25, 0x7F	; 127
     93c:	98 f0       	brcs	.+38     	; 0x964 <__fixunssfsi+0x30>
     93e:	b9 2f       	mov	r27, r25
     940:	99 27       	eor	r25, r25
     942:	b7 51       	subi	r27, 0x17	; 23
     944:	b0 f0       	brcs	.+44     	; 0x972 <__fixunssfsi+0x3e>
     946:	e1 f0       	breq	.+56     	; 0x980 <__fixunssfsi+0x4c>
     948:	66 0f       	add	r22, r22
     94a:	77 1f       	adc	r23, r23
     94c:	88 1f       	adc	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	1a f0       	brmi	.+6      	; 0x958 <__fixunssfsi+0x24>
     952:	ba 95       	dec	r27
     954:	c9 f7       	brne	.-14     	; 0x948 <__fixunssfsi+0x14>
     956:	14 c0       	rjmp	.+40     	; 0x980 <__fixunssfsi+0x4c>
     958:	b1 30       	cpi	r27, 0x01	; 1
     95a:	91 f0       	breq	.+36     	; 0x980 <__fixunssfsi+0x4c>
     95c:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fp_zero>
     960:	b1 e0       	ldi	r27, 0x01	; 1
     962:	08 95       	ret
     964:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_zero>
     968:	67 2f       	mov	r22, r23
     96a:	78 2f       	mov	r23, r24
     96c:	88 27       	eor	r24, r24
     96e:	b8 5f       	subi	r27, 0xF8	; 248
     970:	39 f0       	breq	.+14     	; 0x980 <__fixunssfsi+0x4c>
     972:	b9 3f       	cpi	r27, 0xF9	; 249
     974:	cc f3       	brlt	.-14     	; 0x968 <__fixunssfsi+0x34>
     976:	86 95       	lsr	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b3 95       	inc	r27
     97e:	d9 f7       	brne	.-10     	; 0x976 <__fixunssfsi+0x42>
     980:	3e f4       	brtc	.+14     	; 0x990 <__fixunssfsi+0x5c>
     982:	90 95       	com	r25
     984:	80 95       	com	r24
     986:	70 95       	com	r23
     988:	61 95       	neg	r22
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	8f 4f       	sbci	r24, 0xFF	; 255
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	08 95       	ret

00000992 <__floatunsisf>:
     992:	e8 94       	clt
     994:	09 c0       	rjmp	.+18     	; 0x9a8 <__floatsisf+0x12>

00000996 <__floatsisf>:
     996:	97 fb       	bst	r25, 7
     998:	3e f4       	brtc	.+14     	; 0x9a8 <__floatsisf+0x12>
     99a:	90 95       	com	r25
     99c:	80 95       	com	r24
     99e:	70 95       	com	r23
     9a0:	61 95       	neg	r22
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
     9a4:	8f 4f       	sbci	r24, 0xFF	; 255
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	99 23       	and	r25, r25
     9aa:	a9 f0       	breq	.+42     	; 0x9d6 <__floatsisf+0x40>
     9ac:	f9 2f       	mov	r31, r25
     9ae:	96 e9       	ldi	r25, 0x96	; 150
     9b0:	bb 27       	eor	r27, r27
     9b2:	93 95       	inc	r25
     9b4:	f6 95       	lsr	r31
     9b6:	87 95       	ror	r24
     9b8:	77 95       	ror	r23
     9ba:	67 95       	ror	r22
     9bc:	b7 95       	ror	r27
     9be:	f1 11       	cpse	r31, r1
     9c0:	f8 cf       	rjmp	.-16     	; 0x9b2 <__floatsisf+0x1c>
     9c2:	fa f4       	brpl	.+62     	; 0xa02 <__floatsisf+0x6c>
     9c4:	bb 0f       	add	r27, r27
     9c6:	11 f4       	brne	.+4      	; 0x9cc <__floatsisf+0x36>
     9c8:	60 ff       	sbrs	r22, 0
     9ca:	1b c0       	rjmp	.+54     	; 0xa02 <__floatsisf+0x6c>
     9cc:	6f 5f       	subi	r22, 0xFF	; 255
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	8f 4f       	sbci	r24, 0xFF	; 255
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	16 c0       	rjmp	.+44     	; 0xa02 <__floatsisf+0x6c>
     9d6:	88 23       	and	r24, r24
     9d8:	11 f0       	breq	.+4      	; 0x9de <__floatsisf+0x48>
     9da:	96 e9       	ldi	r25, 0x96	; 150
     9dc:	11 c0       	rjmp	.+34     	; 0xa00 <__floatsisf+0x6a>
     9de:	77 23       	and	r23, r23
     9e0:	21 f0       	breq	.+8      	; 0x9ea <__floatsisf+0x54>
     9e2:	9e e8       	ldi	r25, 0x8E	; 142
     9e4:	87 2f       	mov	r24, r23
     9e6:	76 2f       	mov	r23, r22
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <__floatsisf+0x5e>
     9ea:	66 23       	and	r22, r22
     9ec:	71 f0       	breq	.+28     	; 0xa0a <__floatsisf+0x74>
     9ee:	96 e8       	ldi	r25, 0x86	; 134
     9f0:	86 2f       	mov	r24, r22
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	2a f0       	brmi	.+10     	; 0xa02 <__floatsisf+0x6c>
     9f8:	9a 95       	dec	r25
     9fa:	66 0f       	add	r22, r22
     9fc:	77 1f       	adc	r23, r23
     9fe:	88 1f       	adc	r24, r24
     a00:	da f7       	brpl	.-10     	; 0x9f8 <__floatsisf+0x62>
     a02:	88 0f       	add	r24, r24
     a04:	96 95       	lsr	r25
     a06:	87 95       	ror	r24
     a08:	97 f9       	bld	r25, 7
     a0a:	08 95       	ret

00000a0c <__fp_inf>:
     a0c:	97 f9       	bld	r25, 7
     a0e:	9f 67       	ori	r25, 0x7F	; 127
     a10:	80 e8       	ldi	r24, 0x80	; 128
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	08 95       	ret

00000a18 <__fp_nan>:
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	80 ec       	ldi	r24, 0xC0	; 192
     a1c:	08 95       	ret

00000a1e <__fp_pscA>:
     a1e:	00 24       	eor	r0, r0
     a20:	0a 94       	dec	r0
     a22:	16 16       	cp	r1, r22
     a24:	17 06       	cpc	r1, r23
     a26:	18 06       	cpc	r1, r24
     a28:	09 06       	cpc	r0, r25
     a2a:	08 95       	ret

00000a2c <__fp_pscB>:
     a2c:	00 24       	eor	r0, r0
     a2e:	0a 94       	dec	r0
     a30:	12 16       	cp	r1, r18
     a32:	13 06       	cpc	r1, r19
     a34:	14 06       	cpc	r1, r20
     a36:	05 06       	cpc	r0, r21
     a38:	08 95       	ret

00000a3a <__fp_round>:
     a3a:	09 2e       	mov	r0, r25
     a3c:	03 94       	inc	r0
     a3e:	00 0c       	add	r0, r0
     a40:	11 f4       	brne	.+4      	; 0xa46 <__fp_round+0xc>
     a42:	88 23       	and	r24, r24
     a44:	52 f0       	brmi	.+20     	; 0xa5a <__fp_round+0x20>
     a46:	bb 0f       	add	r27, r27
     a48:	40 f4       	brcc	.+16     	; 0xa5a <__fp_round+0x20>
     a4a:	bf 2b       	or	r27, r31
     a4c:	11 f4       	brne	.+4      	; 0xa52 <__fp_round+0x18>
     a4e:	60 ff       	sbrs	r22, 0
     a50:	04 c0       	rjmp	.+8      	; 0xa5a <__fp_round+0x20>
     a52:	6f 5f       	subi	r22, 0xFF	; 255
     a54:	7f 4f       	sbci	r23, 0xFF	; 255
     a56:	8f 4f       	sbci	r24, 0xFF	; 255
     a58:	9f 4f       	sbci	r25, 0xFF	; 255
     a5a:	08 95       	ret

00000a5c <__fp_split3>:
     a5c:	57 fd       	sbrc	r21, 7
     a5e:	90 58       	subi	r25, 0x80	; 128
     a60:	44 0f       	add	r20, r20
     a62:	55 1f       	adc	r21, r21
     a64:	59 f0       	breq	.+22     	; 0xa7c <__fp_splitA+0x10>
     a66:	5f 3f       	cpi	r21, 0xFF	; 255
     a68:	71 f0       	breq	.+28     	; 0xa86 <__fp_splitA+0x1a>
     a6a:	47 95       	ror	r20

00000a6c <__fp_splitA>:
     a6c:	88 0f       	add	r24, r24
     a6e:	97 fb       	bst	r25, 7
     a70:	99 1f       	adc	r25, r25
     a72:	61 f0       	breq	.+24     	; 0xa8c <__fp_splitA+0x20>
     a74:	9f 3f       	cpi	r25, 0xFF	; 255
     a76:	79 f0       	breq	.+30     	; 0xa96 <__fp_splitA+0x2a>
     a78:	87 95       	ror	r24
     a7a:	08 95       	ret
     a7c:	12 16       	cp	r1, r18
     a7e:	13 06       	cpc	r1, r19
     a80:	14 06       	cpc	r1, r20
     a82:	55 1f       	adc	r21, r21
     a84:	f2 cf       	rjmp	.-28     	; 0xa6a <__fp_split3+0xe>
     a86:	46 95       	lsr	r20
     a88:	f1 df       	rcall	.-30     	; 0xa6c <__fp_splitA>
     a8a:	08 c0       	rjmp	.+16     	; 0xa9c <__fp_splitA+0x30>
     a8c:	16 16       	cp	r1, r22
     a8e:	17 06       	cpc	r1, r23
     a90:	18 06       	cpc	r1, r24
     a92:	99 1f       	adc	r25, r25
     a94:	f1 cf       	rjmp	.-30     	; 0xa78 <__fp_splitA+0xc>
     a96:	86 95       	lsr	r24
     a98:	71 05       	cpc	r23, r1
     a9a:	61 05       	cpc	r22, r1
     a9c:	08 94       	sec
     a9e:	08 95       	ret

00000aa0 <__fp_zero>:
     aa0:	e8 94       	clt

00000aa2 <__fp_szero>:
     aa2:	bb 27       	eor	r27, r27
     aa4:	66 27       	eor	r22, r22
     aa6:	77 27       	eor	r23, r23
     aa8:	cb 01       	movw	r24, r22
     aaa:	97 f9       	bld	r25, 7
     aac:	08 95       	ret

00000aae <__udivmodsi4>:
     aae:	a1 e2       	ldi	r26, 0x21	; 33
     ab0:	1a 2e       	mov	r1, r26
     ab2:	aa 1b       	sub	r26, r26
     ab4:	bb 1b       	sub	r27, r27
     ab6:	fd 01       	movw	r30, r26
     ab8:	0d c0       	rjmp	.+26     	; 0xad4 <__udivmodsi4_ep>

00000aba <__udivmodsi4_loop>:
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	ee 1f       	adc	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	a2 17       	cp	r26, r18
     ac4:	b3 07       	cpc	r27, r19
     ac6:	e4 07       	cpc	r30, r20
     ac8:	f5 07       	cpc	r31, r21
     aca:	20 f0       	brcs	.+8      	; 0xad4 <__udivmodsi4_ep>
     acc:	a2 1b       	sub	r26, r18
     ace:	b3 0b       	sbc	r27, r19
     ad0:	e4 0b       	sbc	r30, r20
     ad2:	f5 0b       	sbc	r31, r21

00000ad4 <__udivmodsi4_ep>:
     ad4:	66 1f       	adc	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	88 1f       	adc	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	1a 94       	dec	r1
     ade:	69 f7       	brne	.-38     	; 0xaba <__udivmodsi4_loop>
     ae0:	60 95       	com	r22
     ae2:	70 95       	com	r23
     ae4:	80 95       	com	r24
     ae6:	90 95       	com	r25
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
     aec:	bd 01       	movw	r22, r26
     aee:	cf 01       	movw	r24, r30
     af0:	08 95       	ret

00000af2 <__divmodsi4>:
     af2:	05 2e       	mov	r0, r21
     af4:	97 fb       	bst	r25, 7
     af6:	1e f4       	brtc	.+6      	; 0xafe <__divmodsi4+0xc>
     af8:	00 94       	com	r0
     afa:	0e 94 90 05 	call	0xb20	; 0xb20 <__negsi2>
     afe:	57 fd       	sbrc	r21, 7
     b00:	07 d0       	rcall	.+14     	; 0xb10 <__divmodsi4_neg2>
     b02:	0e 94 57 05 	call	0xaae	; 0xaae <__udivmodsi4>
     b06:	07 fc       	sbrc	r0, 7
     b08:	03 d0       	rcall	.+6      	; 0xb10 <__divmodsi4_neg2>
     b0a:	4e f4       	brtc	.+18     	; 0xb1e <__divmodsi4_exit>
     b0c:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__negsi2>

00000b10 <__divmodsi4_neg2>:
     b10:	50 95       	com	r21
     b12:	40 95       	com	r20
     b14:	30 95       	com	r19
     b16:	21 95       	neg	r18
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	4f 4f       	sbci	r20, 0xFF	; 255
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255

00000b1e <__divmodsi4_exit>:
     b1e:	08 95       	ret

00000b20 <__negsi2>:
     b20:	90 95       	com	r25
     b22:	80 95       	com	r24
     b24:	70 95       	com	r23
     b26:	61 95       	neg	r22
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	8f 4f       	sbci	r24, 0xFF	; 255
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	08 95       	ret

00000b30 <dtostrf>:
     b30:	ef 92       	push	r14
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	e8 01       	movw	r28, r16
     b3c:	47 fd       	sbrc	r20, 7
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <dtostrf+0x14>
     b40:	34 e0       	ldi	r19, 0x04	; 4
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <dtostrf+0x16>
     b44:	34 e1       	ldi	r19, 0x14	; 20
     b46:	04 2e       	mov	r0, r20
     b48:	00 0c       	add	r0, r0
     b4a:	55 0b       	sbc	r21, r21
     b4c:	57 ff       	sbrs	r21, 7
     b4e:	03 c0       	rjmp	.+6      	; 0xb56 <dtostrf+0x26>
     b50:	51 95       	neg	r21
     b52:	41 95       	neg	r20
     b54:	51 09       	sbc	r21, r1
     b56:	e3 2e       	mov	r14, r19
     b58:	02 2f       	mov	r16, r18
     b5a:	24 2f       	mov	r18, r20
     b5c:	ae 01       	movw	r20, r28
     b5e:	0e 94 b8 05 	call	0xb70	; 0xb70 <dtoa_prf>
     b62:	ce 01       	movw	r24, r28
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ef 90       	pop	r14
     b6e:	08 95       	ret

00000b70 <dtoa_prf>:
     b70:	a9 e0       	ldi	r26, 0x09	; 9
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ee eb       	ldi	r30, 0xBE	; 190
     b76:	f5 e0       	ldi	r31, 0x05	; 5
     b78:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__prologue_saves__+0xc>
     b7c:	6a 01       	movw	r12, r20
     b7e:	12 2f       	mov	r17, r18
     b80:	b0 2e       	mov	r11, r16
     b82:	2b e3       	ldi	r18, 0x3B	; 59
     b84:	20 17       	cp	r18, r16
     b86:	20 f0       	brcs	.+8      	; 0xb90 <dtoa_prf+0x20>
     b88:	ff 24       	eor	r15, r15
     b8a:	f3 94       	inc	r15
     b8c:	f0 0e       	add	r15, r16
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <dtoa_prf+0x24>
     b90:	2c e3       	ldi	r18, 0x3C	; 60
     b92:	f2 2e       	mov	r15, r18
     b94:	0f 2d       	mov	r16, r15
     b96:	27 e0       	ldi	r18, 0x07	; 7
     b98:	ae 01       	movw	r20, r28
     b9a:	4f 5f       	subi	r20, 0xFF	; 255
     b9c:	5f 4f       	sbci	r21, 0xFF	; 255
     b9e:	0e 94 12 07 	call	0xe24	; 0xe24 <__ftoa_engine>
     ba2:	bc 01       	movw	r22, r24
     ba4:	49 81       	ldd	r20, Y+1	; 0x01
     ba6:	84 2f       	mov	r24, r20
     ba8:	89 70       	andi	r24, 0x09	; 9
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	31 f0       	breq	.+12     	; 0xbba <dtoa_prf+0x4a>
     bae:	e1 fc       	sbrc	r14, 1
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <dtoa_prf+0x4e>
     bb2:	e0 fe       	sbrs	r14, 0
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <dtoa_prf+0x52>
     bb6:	90 e2       	ldi	r25, 0x20	; 32
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <dtoa_prf+0x54>
     bba:	9d e2       	ldi	r25, 0x2D	; 45
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <dtoa_prf+0x54>
     bbe:	9b e2       	ldi	r25, 0x2B	; 43
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <dtoa_prf+0x54>
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	5e 2d       	mov	r21, r14
     bc6:	50 71       	andi	r21, 0x10	; 16
     bc8:	43 ff       	sbrs	r20, 3
     bca:	3c c0       	rjmp	.+120    	; 0xc44 <dtoa_prf+0xd4>
     bcc:	91 11       	cpse	r25, r1
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <dtoa_prf+0x64>
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <dtoa_prf+0x66>
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	81 17       	cp	r24, r17
     bd8:	18 f4       	brcc	.+6      	; 0xbe0 <dtoa_prf+0x70>
     bda:	21 2f       	mov	r18, r17
     bdc:	28 1b       	sub	r18, r24
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <dtoa_prf+0x72>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	51 11       	cpse	r21, r1
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <dtoa_prf+0x8c>
     be6:	f6 01       	movw	r30, r12
     be8:	82 2f       	mov	r24, r18
     bea:	30 e2       	ldi	r19, 0x20	; 32
     bec:	88 23       	and	r24, r24
     bee:	19 f0       	breq	.+6      	; 0xbf6 <dtoa_prf+0x86>
     bf0:	31 93       	st	Z+, r19
     bf2:	81 50       	subi	r24, 0x01	; 1
     bf4:	fb cf       	rjmp	.-10     	; 0xbec <dtoa_prf+0x7c>
     bf6:	c2 0e       	add	r12, r18
     bf8:	d1 1c       	adc	r13, r1
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	99 23       	and	r25, r25
     bfe:	29 f0       	breq	.+10     	; 0xc0a <dtoa_prf+0x9a>
     c00:	d6 01       	movw	r26, r12
     c02:	9c 93       	st	X, r25
     c04:	f6 01       	movw	r30, r12
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	6f 01       	movw	r12, r30
     c0a:	c6 01       	movw	r24, r12
     c0c:	03 96       	adiw	r24, 0x03	; 3
     c0e:	e2 fe       	sbrs	r14, 2
     c10:	0a c0       	rjmp	.+20     	; 0xc26 <dtoa_prf+0xb6>
     c12:	3e e4       	ldi	r19, 0x4E	; 78
     c14:	d6 01       	movw	r26, r12
     c16:	3c 93       	st	X, r19
     c18:	41 e4       	ldi	r20, 0x41	; 65
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	4c 93       	st	X, r20
     c1e:	11 97       	sbiw	r26, 0x01	; 1
     c20:	12 96       	adiw	r26, 0x02	; 2
     c22:	3c 93       	st	X, r19
     c24:	06 c0       	rjmp	.+12     	; 0xc32 <dtoa_prf+0xc2>
     c26:	3e e6       	ldi	r19, 0x6E	; 110
     c28:	f6 01       	movw	r30, r12
     c2a:	30 83       	st	Z, r19
     c2c:	41 e6       	ldi	r20, 0x61	; 97
     c2e:	41 83       	std	Z+1, r20	; 0x01
     c30:	32 83       	std	Z+2, r19	; 0x02
     c32:	fc 01       	movw	r30, r24
     c34:	32 2f       	mov	r19, r18
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	33 23       	and	r19, r19
     c3a:	09 f4       	brne	.+2      	; 0xc3e <dtoa_prf+0xce>
     c3c:	42 c0       	rjmp	.+132    	; 0xcc2 <dtoa_prf+0x152>
     c3e:	41 93       	st	Z+, r20
     c40:	31 50       	subi	r19, 0x01	; 1
     c42:	fa cf       	rjmp	.-12     	; 0xc38 <dtoa_prf+0xc8>
     c44:	42 ff       	sbrs	r20, 2
     c46:	44 c0       	rjmp	.+136    	; 0xcd0 <dtoa_prf+0x160>
     c48:	91 11       	cpse	r25, r1
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <dtoa_prf+0xe0>
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <dtoa_prf+0xe2>
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	81 17       	cp	r24, r17
     c54:	18 f4       	brcc	.+6      	; 0xc5c <dtoa_prf+0xec>
     c56:	21 2f       	mov	r18, r17
     c58:	28 1b       	sub	r18, r24
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <dtoa_prf+0xee>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	51 11       	cpse	r21, r1
     c60:	0b c0       	rjmp	.+22     	; 0xc78 <dtoa_prf+0x108>
     c62:	f6 01       	movw	r30, r12
     c64:	82 2f       	mov	r24, r18
     c66:	30 e2       	ldi	r19, 0x20	; 32
     c68:	88 23       	and	r24, r24
     c6a:	19 f0       	breq	.+6      	; 0xc72 <dtoa_prf+0x102>
     c6c:	31 93       	st	Z+, r19
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	fb cf       	rjmp	.-10     	; 0xc68 <dtoa_prf+0xf8>
     c72:	c2 0e       	add	r12, r18
     c74:	d1 1c       	adc	r13, r1
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	99 23       	and	r25, r25
     c7a:	29 f0       	breq	.+10     	; 0xc86 <dtoa_prf+0x116>
     c7c:	d6 01       	movw	r26, r12
     c7e:	9c 93       	st	X, r25
     c80:	f6 01       	movw	r30, r12
     c82:	31 96       	adiw	r30, 0x01	; 1
     c84:	6f 01       	movw	r12, r30
     c86:	c6 01       	movw	r24, r12
     c88:	03 96       	adiw	r24, 0x03	; 3
     c8a:	e2 fe       	sbrs	r14, 2
     c8c:	0b c0       	rjmp	.+22     	; 0xca4 <dtoa_prf+0x134>
     c8e:	39 e4       	ldi	r19, 0x49	; 73
     c90:	d6 01       	movw	r26, r12
     c92:	3c 93       	st	X, r19
     c94:	3e e4       	ldi	r19, 0x4E	; 78
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	3c 93       	st	X, r19
     c9a:	11 97       	sbiw	r26, 0x01	; 1
     c9c:	36 e4       	ldi	r19, 0x46	; 70
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	3c 93       	st	X, r19
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <dtoa_prf+0x142>
     ca4:	39 e6       	ldi	r19, 0x69	; 105
     ca6:	f6 01       	movw	r30, r12
     ca8:	30 83       	st	Z, r19
     caa:	3e e6       	ldi	r19, 0x6E	; 110
     cac:	31 83       	std	Z+1, r19	; 0x01
     cae:	36 e6       	ldi	r19, 0x66	; 102
     cb0:	32 83       	std	Z+2, r19	; 0x02
     cb2:	fc 01       	movw	r30, r24
     cb4:	32 2f       	mov	r19, r18
     cb6:	40 e2       	ldi	r20, 0x20	; 32
     cb8:	33 23       	and	r19, r19
     cba:	19 f0       	breq	.+6      	; 0xcc2 <dtoa_prf+0x152>
     cbc:	41 93       	st	Z+, r20
     cbe:	31 50       	subi	r19, 0x01	; 1
     cc0:	fb cf       	rjmp	.-10     	; 0xcb8 <dtoa_prf+0x148>
     cc2:	fc 01       	movw	r30, r24
     cc4:	e2 0f       	add	r30, r18
     cc6:	f1 1d       	adc	r31, r1
     cc8:	10 82       	st	Z, r1
     cca:	8e ef       	ldi	r24, 0xFE	; 254
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	a6 c0       	rjmp	.+332    	; 0xe1c <dtoa_prf+0x2ac>
     cd0:	21 e0       	ldi	r18, 0x01	; 1
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	91 11       	cpse	r25, r1
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <dtoa_prf+0x16c>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	16 16       	cp	r1, r22
     cde:	17 06       	cpc	r1, r23
     ce0:	1c f4       	brge	.+6      	; 0xce8 <dtoa_prf+0x178>
     ce2:	fb 01       	movw	r30, r22
     ce4:	31 96       	adiw	r30, 0x01	; 1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <dtoa_prf+0x17c>
     ce8:	e1 e0       	ldi	r30, 0x01	; 1
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	2e 0f       	add	r18, r30
     cee:	3f 1f       	adc	r19, r31
     cf0:	bb 20       	and	r11, r11
     cf2:	21 f0       	breq	.+8      	; 0xcfc <dtoa_prf+0x18c>
     cf4:	eb 2d       	mov	r30, r11
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	31 96       	adiw	r30, 0x01	; 1
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <dtoa_prf+0x190>
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	2e 0f       	add	r18, r30
     d02:	3f 1f       	adc	r19, r31
     d04:	e1 2f       	mov	r30, r17
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	2e 17       	cp	r18, r30
     d0a:	3f 07       	cpc	r19, r31
     d0c:	1c f4       	brge	.+6      	; 0xd14 <dtoa_prf+0x1a4>
     d0e:	12 1b       	sub	r17, r18
     d10:	21 2f       	mov	r18, r17
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <dtoa_prf+0x1a6>
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	8e 2d       	mov	r24, r14
     d18:	88 71       	andi	r24, 0x18	; 24
     d1a:	59 f4       	brne	.+22     	; 0xd32 <dtoa_prf+0x1c2>
     d1c:	f6 01       	movw	r30, r12
     d1e:	82 2f       	mov	r24, r18
     d20:	30 e2       	ldi	r19, 0x20	; 32
     d22:	88 23       	and	r24, r24
     d24:	19 f0       	breq	.+6      	; 0xd2c <dtoa_prf+0x1bc>
     d26:	31 93       	st	Z+, r19
     d28:	81 50       	subi	r24, 0x01	; 1
     d2a:	fb cf       	rjmp	.-10     	; 0xd22 <dtoa_prf+0x1b2>
     d2c:	c2 0e       	add	r12, r18
     d2e:	d1 1c       	adc	r13, r1
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	99 23       	and	r25, r25
     d34:	29 f0       	breq	.+10     	; 0xd40 <dtoa_prf+0x1d0>
     d36:	d6 01       	movw	r26, r12
     d38:	9c 93       	st	X, r25
     d3a:	f6 01       	movw	r30, r12
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	6f 01       	movw	r12, r30
     d40:	51 11       	cpse	r21, r1
     d42:	0b c0       	rjmp	.+22     	; 0xd5a <dtoa_prf+0x1ea>
     d44:	f6 01       	movw	r30, r12
     d46:	82 2f       	mov	r24, r18
     d48:	90 e3       	ldi	r25, 0x30	; 48
     d4a:	88 23       	and	r24, r24
     d4c:	19 f0       	breq	.+6      	; 0xd54 <dtoa_prf+0x1e4>
     d4e:	91 93       	st	Z+, r25
     d50:	81 50       	subi	r24, 0x01	; 1
     d52:	fb cf       	rjmp	.-10     	; 0xd4a <dtoa_prf+0x1da>
     d54:	c2 0e       	add	r12, r18
     d56:	d1 1c       	adc	r13, r1
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	0f 2d       	mov	r16, r15
     d5c:	06 0f       	add	r16, r22
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	34 2f       	mov	r19, r20
     d62:	30 71       	andi	r19, 0x10	; 16
     d64:	44 ff       	sbrs	r20, 4
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <dtoa_prf+0x1fe>
     d68:	91 33       	cpi	r25, 0x31	; 49
     d6a:	09 f4       	brne	.+2      	; 0xd6e <dtoa_prf+0x1fe>
     d6c:	01 50       	subi	r16, 0x01	; 1
     d6e:	10 16       	cp	r1, r16
     d70:	24 f4       	brge	.+8      	; 0xd7a <dtoa_prf+0x20a>
     d72:	09 30       	cpi	r16, 0x09	; 9
     d74:	18 f0       	brcs	.+6      	; 0xd7c <dtoa_prf+0x20c>
     d76:	08 e0       	ldi	r16, 0x08	; 8
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <dtoa_prf+0x20c>
     d7a:	01 e0       	ldi	r16, 0x01	; 1
     d7c:	ab 01       	movw	r20, r22
     d7e:	77 ff       	sbrs	r23, 7
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <dtoa_prf+0x216>
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	fb 01       	movw	r30, r22
     d88:	e4 1b       	sub	r30, r20
     d8a:	f5 0b       	sbc	r31, r21
     d8c:	a1 e0       	ldi	r26, 0x01	; 1
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	ac 0f       	add	r26, r28
     d92:	bd 1f       	adc	r27, r29
     d94:	ea 0f       	add	r30, r26
     d96:	fb 1f       	adc	r31, r27
     d98:	8e e2       	ldi	r24, 0x2E	; 46
     d9a:	a8 2e       	mov	r10, r24
     d9c:	4b 01       	movw	r8, r22
     d9e:	80 1a       	sub	r8, r16
     da0:	91 08       	sbc	r9, r1
     da2:	0b 2d       	mov	r16, r11
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	11 95       	neg	r17
     da8:	01 95       	neg	r16
     daa:	11 09       	sbc	r17, r1
     dac:	4f 3f       	cpi	r20, 0xFF	; 255
     dae:	bf ef       	ldi	r27, 0xFF	; 255
     db0:	5b 07       	cpc	r21, r27
     db2:	21 f4       	brne	.+8      	; 0xdbc <dtoa_prf+0x24c>
     db4:	d6 01       	movw	r26, r12
     db6:	ac 92       	st	X, r10
     db8:	11 96       	adiw	r26, 0x01	; 1
     dba:	6d 01       	movw	r12, r26
     dbc:	64 17       	cp	r22, r20
     dbe:	75 07       	cpc	r23, r21
     dc0:	2c f0       	brlt	.+10     	; 0xdcc <dtoa_prf+0x25c>
     dc2:	84 16       	cp	r8, r20
     dc4:	95 06       	cpc	r9, r21
     dc6:	14 f4       	brge	.+4      	; 0xdcc <dtoa_prf+0x25c>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	01 c0       	rjmp	.+2      	; 0xdce <dtoa_prf+0x25e>
     dcc:	80 e3       	ldi	r24, 0x30	; 48
     dce:	41 50       	subi	r20, 0x01	; 1
     dd0:	51 09       	sbc	r21, r1
     dd2:	31 96       	adiw	r30, 0x01	; 1
     dd4:	d6 01       	movw	r26, r12
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	7d 01       	movw	r14, r26
     dda:	40 17       	cp	r20, r16
     ddc:	51 07       	cpc	r21, r17
     dde:	24 f0       	brlt	.+8      	; 0xde8 <dtoa_prf+0x278>
     de0:	d6 01       	movw	r26, r12
     de2:	8c 93       	st	X, r24
     de4:	67 01       	movw	r12, r14
     de6:	e2 cf       	rjmp	.-60     	; 0xdac <dtoa_prf+0x23c>
     de8:	64 17       	cp	r22, r20
     dea:	75 07       	cpc	r23, r21
     dec:	39 f4       	brne	.+14     	; 0xdfc <dtoa_prf+0x28c>
     dee:	96 33       	cpi	r25, 0x36	; 54
     df0:	20 f4       	brcc	.+8      	; 0xdfa <dtoa_prf+0x28a>
     df2:	95 33       	cpi	r25, 0x35	; 53
     df4:	19 f4       	brne	.+6      	; 0xdfc <dtoa_prf+0x28c>
     df6:	31 11       	cpse	r19, r1
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <dtoa_prf+0x28c>
     dfa:	81 e3       	ldi	r24, 0x31	; 49
     dfc:	f6 01       	movw	r30, r12
     dfe:	80 83       	st	Z, r24
     e00:	f7 01       	movw	r30, r14
     e02:	82 2f       	mov	r24, r18
     e04:	90 e2       	ldi	r25, 0x20	; 32
     e06:	88 23       	and	r24, r24
     e08:	19 f0       	breq	.+6      	; 0xe10 <dtoa_prf+0x2a0>
     e0a:	91 93       	st	Z+, r25
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	fb cf       	rjmp	.-10     	; 0xe06 <dtoa_prf+0x296>
     e10:	f7 01       	movw	r30, r14
     e12:	e2 0f       	add	r30, r18
     e14:	f1 1d       	adc	r31, r1
     e16:	10 82       	st	Z, r1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	29 96       	adiw	r28, 0x09	; 9
     e1e:	ec e0       	ldi	r30, 0x0C	; 12
     e20:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__epilogue_restores__+0xc>

00000e24 <__ftoa_engine>:
     e24:	28 30       	cpi	r18, 0x08	; 8
     e26:	08 f0       	brcs	.+2      	; 0xe2a <__ftoa_engine+0x6>
     e28:	27 e0       	ldi	r18, 0x07	; 7
     e2a:	33 27       	eor	r19, r19
     e2c:	da 01       	movw	r26, r20
     e2e:	99 0f       	add	r25, r25
     e30:	31 1d       	adc	r19, r1
     e32:	87 fd       	sbrc	r24, 7
     e34:	91 60       	ori	r25, 0x01	; 1
     e36:	00 96       	adiw	r24, 0x00	; 0
     e38:	61 05       	cpc	r22, r1
     e3a:	71 05       	cpc	r23, r1
     e3c:	39 f4       	brne	.+14     	; 0xe4c <__ftoa_engine+0x28>
     e3e:	32 60       	ori	r19, 0x02	; 2
     e40:	2e 5f       	subi	r18, 0xFE	; 254
     e42:	3d 93       	st	X+, r19
     e44:	30 e3       	ldi	r19, 0x30	; 48
     e46:	2a 95       	dec	r18
     e48:	e1 f7       	brne	.-8      	; 0xe42 <__ftoa_engine+0x1e>
     e4a:	08 95       	ret
     e4c:	9f 3f       	cpi	r25, 0xFF	; 255
     e4e:	30 f0       	brcs	.+12     	; 0xe5c <__ftoa_engine+0x38>
     e50:	80 38       	cpi	r24, 0x80	; 128
     e52:	71 05       	cpc	r23, r1
     e54:	61 05       	cpc	r22, r1
     e56:	09 f0       	breq	.+2      	; 0xe5a <__ftoa_engine+0x36>
     e58:	3c 5f       	subi	r19, 0xFC	; 252
     e5a:	3c 5f       	subi	r19, 0xFC	; 252
     e5c:	3d 93       	st	X+, r19
     e5e:	91 30       	cpi	r25, 0x01	; 1
     e60:	08 f0       	brcs	.+2      	; 0xe64 <__ftoa_engine+0x40>
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	91 1d       	adc	r25, r1
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	1f 93       	push	r17
     e6c:	0f 93       	push	r16
     e6e:	ff 92       	push	r15
     e70:	ef 92       	push	r14
     e72:	19 2f       	mov	r17, r25
     e74:	98 7f       	andi	r25, 0xF8	; 248
     e76:	96 95       	lsr	r25
     e78:	e9 2f       	mov	r30, r25
     e7a:	96 95       	lsr	r25
     e7c:	96 95       	lsr	r25
     e7e:	e9 0f       	add	r30, r25
     e80:	ff 27       	eor	r31, r31
     e82:	ee 53       	subi	r30, 0x3E	; 62
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	99 27       	eor	r25, r25
     e88:	33 27       	eor	r19, r19
     e8a:	ee 24       	eor	r14, r14
     e8c:	ff 24       	eor	r15, r15
     e8e:	a7 01       	movw	r20, r14
     e90:	e7 01       	movw	r28, r14
     e92:	05 90       	lpm	r0, Z+
     e94:	08 94       	sec
     e96:	07 94       	ror	r0
     e98:	28 f4       	brcc	.+10     	; 0xea4 <__ftoa_engine+0x80>
     e9a:	36 0f       	add	r19, r22
     e9c:	e7 1e       	adc	r14, r23
     e9e:	f8 1e       	adc	r15, r24
     ea0:	49 1f       	adc	r20, r25
     ea2:	51 1d       	adc	r21, r1
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	06 94       	lsr	r0
     eae:	a1 f7       	brne	.-24     	; 0xe98 <__ftoa_engine+0x74>
     eb0:	05 90       	lpm	r0, Z+
     eb2:	07 94       	ror	r0
     eb4:	28 f4       	brcc	.+10     	; 0xec0 <__ftoa_engine+0x9c>
     eb6:	e7 0e       	add	r14, r23
     eb8:	f8 1e       	adc	r15, r24
     eba:	49 1f       	adc	r20, r25
     ebc:	56 1f       	adc	r21, r22
     ebe:	c1 1d       	adc	r28, r1
     ec0:	77 0f       	add	r23, r23
     ec2:	88 1f       	adc	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	66 1f       	adc	r22, r22
     ec8:	06 94       	lsr	r0
     eca:	a1 f7       	brne	.-24     	; 0xeb4 <__ftoa_engine+0x90>
     ecc:	05 90       	lpm	r0, Z+
     ece:	07 94       	ror	r0
     ed0:	28 f4       	brcc	.+10     	; 0xedc <__ftoa_engine+0xb8>
     ed2:	f8 0e       	add	r15, r24
     ed4:	49 1f       	adc	r20, r25
     ed6:	56 1f       	adc	r21, r22
     ed8:	c7 1f       	adc	r28, r23
     eda:	d1 1d       	adc	r29, r1
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	66 1f       	adc	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	06 94       	lsr	r0
     ee6:	a1 f7       	brne	.-24     	; 0xed0 <__ftoa_engine+0xac>
     ee8:	05 90       	lpm	r0, Z+
     eea:	07 94       	ror	r0
     eec:	20 f4       	brcc	.+8      	; 0xef6 <__ftoa_engine+0xd2>
     eee:	49 0f       	add	r20, r25
     ef0:	56 1f       	adc	r21, r22
     ef2:	c7 1f       	adc	r28, r23
     ef4:	d8 1f       	adc	r29, r24
     ef6:	99 0f       	add	r25, r25
     ef8:	66 1f       	adc	r22, r22
     efa:	77 1f       	adc	r23, r23
     efc:	88 1f       	adc	r24, r24
     efe:	06 94       	lsr	r0
     f00:	a9 f7       	brne	.-22     	; 0xeec <__ftoa_engine+0xc8>
     f02:	84 91       	lpm	r24, Z
     f04:	10 95       	com	r17
     f06:	17 70       	andi	r17, 0x07	; 7
     f08:	41 f0       	breq	.+16     	; 0xf1a <__ftoa_engine+0xf6>
     f0a:	d6 95       	lsr	r29
     f0c:	c7 95       	ror	r28
     f0e:	57 95       	ror	r21
     f10:	47 95       	ror	r20
     f12:	f7 94       	ror	r15
     f14:	e7 94       	ror	r14
     f16:	1a 95       	dec	r17
     f18:	c1 f7       	brne	.-16     	; 0xf0a <__ftoa_engine+0xe6>
     f1a:	e8 e6       	ldi	r30, 0x68	; 104
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	68 94       	set
     f20:	15 90       	lpm	r1, Z+
     f22:	15 91       	lpm	r17, Z+
     f24:	35 91       	lpm	r19, Z+
     f26:	65 91       	lpm	r22, Z+
     f28:	95 91       	lpm	r25, Z+
     f2a:	05 90       	lpm	r0, Z+
     f2c:	7f e2       	ldi	r23, 0x2F	; 47
     f2e:	73 95       	inc	r23
     f30:	e1 18       	sub	r14, r1
     f32:	f1 0a       	sbc	r15, r17
     f34:	43 0b       	sbc	r20, r19
     f36:	56 0b       	sbc	r21, r22
     f38:	c9 0b       	sbc	r28, r25
     f3a:	d0 09       	sbc	r29, r0
     f3c:	c0 f7       	brcc	.-16     	; 0xf2e <__ftoa_engine+0x10a>
     f3e:	e1 0c       	add	r14, r1
     f40:	f1 1e       	adc	r15, r17
     f42:	43 1f       	adc	r20, r19
     f44:	56 1f       	adc	r21, r22
     f46:	c9 1f       	adc	r28, r25
     f48:	d0 1d       	adc	r29, r0
     f4a:	7e f4       	brtc	.+30     	; 0xf6a <__ftoa_engine+0x146>
     f4c:	70 33       	cpi	r23, 0x30	; 48
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__ftoa_engine+0x130>
     f50:	8a 95       	dec	r24
     f52:	e6 cf       	rjmp	.-52     	; 0xf20 <__ftoa_engine+0xfc>
     f54:	e8 94       	clt
     f56:	01 50       	subi	r16, 0x01	; 1
     f58:	30 f0       	brcs	.+12     	; 0xf66 <__ftoa_engine+0x142>
     f5a:	08 0f       	add	r16, r24
     f5c:	0a f4       	brpl	.+2      	; 0xf60 <__ftoa_engine+0x13c>
     f5e:	00 27       	eor	r16, r16
     f60:	02 17       	cp	r16, r18
     f62:	08 f4       	brcc	.+2      	; 0xf66 <__ftoa_engine+0x142>
     f64:	20 2f       	mov	r18, r16
     f66:	23 95       	inc	r18
     f68:	02 2f       	mov	r16, r18
     f6a:	7a 33       	cpi	r23, 0x3A	; 58
     f6c:	28 f0       	brcs	.+10     	; 0xf78 <__ftoa_engine+0x154>
     f6e:	79 e3       	ldi	r23, 0x39	; 57
     f70:	7d 93       	st	X+, r23
     f72:	2a 95       	dec	r18
     f74:	e9 f7       	brne	.-6      	; 0xf70 <__ftoa_engine+0x14c>
     f76:	10 c0       	rjmp	.+32     	; 0xf98 <__ftoa_engine+0x174>
     f78:	7d 93       	st	X+, r23
     f7a:	2a 95       	dec	r18
     f7c:	89 f6       	brne	.-94     	; 0xf20 <__ftoa_engine+0xfc>
     f7e:	06 94       	lsr	r0
     f80:	97 95       	ror	r25
     f82:	67 95       	ror	r22
     f84:	37 95       	ror	r19
     f86:	17 95       	ror	r17
     f88:	17 94       	ror	r1
     f8a:	e1 18       	sub	r14, r1
     f8c:	f1 0a       	sbc	r15, r17
     f8e:	43 0b       	sbc	r20, r19
     f90:	56 0b       	sbc	r21, r22
     f92:	c9 0b       	sbc	r28, r25
     f94:	d0 09       	sbc	r29, r0
     f96:	98 f0       	brcs	.+38     	; 0xfbe <__ftoa_engine+0x19a>
     f98:	23 95       	inc	r18
     f9a:	7e 91       	ld	r23, -X
     f9c:	73 95       	inc	r23
     f9e:	7a 33       	cpi	r23, 0x3A	; 58
     fa0:	08 f0       	brcs	.+2      	; 0xfa4 <__ftoa_engine+0x180>
     fa2:	70 e3       	ldi	r23, 0x30	; 48
     fa4:	7c 93       	st	X, r23
     fa6:	20 13       	cpse	r18, r16
     fa8:	b8 f7       	brcc	.-18     	; 0xf98 <__ftoa_engine+0x174>
     faa:	7e 91       	ld	r23, -X
     fac:	70 61       	ori	r23, 0x10	; 16
     fae:	7d 93       	st	X+, r23
     fb0:	30 f0       	brcs	.+12     	; 0xfbe <__ftoa_engine+0x19a>
     fb2:	83 95       	inc	r24
     fb4:	71 e3       	ldi	r23, 0x31	; 49
     fb6:	7d 93       	st	X+, r23
     fb8:	70 e3       	ldi	r23, 0x30	; 48
     fba:	2a 95       	dec	r18
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <__ftoa_engine+0x192>
     fbe:	11 24       	eor	r1, r1
     fc0:	ef 90       	pop	r14
     fc2:	ff 90       	pop	r15
     fc4:	0f 91       	pop	r16
     fc6:	1f 91       	pop	r17
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	99 27       	eor	r25, r25
     fce:	87 fd       	sbrc	r24, 7
     fd0:	90 95       	com	r25
     fd2:	08 95       	ret

00000fd4 <__prologue_saves__>:
     fd4:	2f 92       	push	r2
     fd6:	3f 92       	push	r3
     fd8:	4f 92       	push	r4
     fda:	5f 92       	push	r5
     fdc:	6f 92       	push	r6
     fde:	7f 92       	push	r7
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	ca 1b       	sub	r28, r26
     ffe:	db 0b       	sbc	r29, r27
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	09 94       	ijmp

0000100c <__epilogue_restores__>:
    100c:	2a 88       	ldd	r2, Y+18	; 0x12
    100e:	39 88       	ldd	r3, Y+17	; 0x11
    1010:	48 88       	ldd	r4, Y+16	; 0x10
    1012:	5f 84       	ldd	r5, Y+15	; 0x0f
    1014:	6e 84       	ldd	r6, Y+14	; 0x0e
    1016:	7d 84       	ldd	r7, Y+13	; 0x0d
    1018:	8c 84       	ldd	r8, Y+12	; 0x0c
    101a:	9b 84       	ldd	r9, Y+11	; 0x0b
    101c:	aa 84       	ldd	r10, Y+10	; 0x0a
    101e:	b9 84       	ldd	r11, Y+9	; 0x09
    1020:	c8 84       	ldd	r12, Y+8	; 0x08
    1022:	df 80       	ldd	r13, Y+7	; 0x07
    1024:	ee 80       	ldd	r14, Y+6	; 0x06
    1026:	fd 80       	ldd	r15, Y+5	; 0x05
    1028:	0c 81       	ldd	r16, Y+4	; 0x04
    102a:	1b 81       	ldd	r17, Y+3	; 0x03
    102c:	aa 81       	ldd	r26, Y+2	; 0x02
    102e:	b9 81       	ldd	r27, Y+1	; 0x01
    1030:	ce 0f       	add	r28, r30
    1032:	d1 1d       	adc	r29, r1
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	ed 01       	movw	r28, r26
    1040:	08 95       	ret

00001042 <_exit>:
    1042:	f8 94       	cli

00001044 <__stop_program>:
    1044:	ff cf       	rjmp	.-2      	; 0x1044 <__stop_program>
