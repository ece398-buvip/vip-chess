
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000057c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  00000616  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000616  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7c  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ac  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000085e  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b2  00000000  00000000  00002a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042d  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000345f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  9e:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GetPortD>:
///////PORT D/////////


uint8_t GetPortD(void)
{
    return (PIND & MASK_PORTD);
  a6:	89 b1       	in	r24, 0x09	; 9
}
  a8:	8c 7f       	andi	r24, 0xFC	; 252
  aa:	08 95       	ret

000000ac <SetPortD>:

void SetPortD(uint8_t out)
{
    PORTD = (PORTD & ~MASK_PORTD) | ((out & MASK_PORTD));
  ac:	9b b1       	in	r25, 0x0b	; 11
  ae:	93 70       	andi	r25, 0x03	; 3
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	89 2b       	or	r24, r25
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	08 95       	ret

000000b8 <GetDDRD>:
}

uint8_t GetDDRD(void)
{
    return (DDRD & MASK_PORTD);
  b8:	8a b1       	in	r24, 0x0a	; 10
}
  ba:	8c 7f       	andi	r24, 0xFC	; 252
  bc:	08 95       	ret

000000be <SetDDRD>:

void SetDDRD(uint8_t direction)
{
    DDRD = (DDRD & ~MASK_PORTD) | (direction & MASK_PORTD);
  be:	9a b1       	in	r25, 0x0a	; 10
  c0:	93 70       	andi	r25, 0x03	; 3
  c2:	8c 7f       	andi	r24, 0xFC	; 252
  c4:	89 2b       	or	r24, r25
  c6:	8a b9       	out	0x0a, r24	; 10
  c8:	08 95       	ret

000000ca <GetPortC>:
///////PORT C/////////


uint8_t GetPortC (void)
{
    return(PINC & MASK_PORTC);
  ca:	86 b1       	in	r24, 0x06	; 6
}
  cc:	8f 73       	andi	r24, 0x3F	; 63
  ce:	08 95       	ret

000000d0 <SetPortC>:

void SetPortC(uint8_t x)
{
    PORTC = (PORTC & ~MASK_PORTC) | (x & MASK_PORTC);
  d0:	98 b1       	in	r25, 0x08	; 8
  d2:	90 7c       	andi	r25, 0xC0	; 192
  d4:	8f 73       	andi	r24, 0x3F	; 63
  d6:	89 2b       	or	r24, r25
  d8:	88 b9       	out	0x08, r24	; 8
  da:	08 95       	ret

000000dc <GetDDRC>:
}

uint8_t GetDDRC(void)
{
    return(DDRC & MASK_PORTC);
  dc:	87 b1       	in	r24, 0x07	; 7
}
  de:	8f 73       	andi	r24, 0x3F	; 63
  e0:	08 95       	ret

000000e2 <SetDDRC>:

void SetDDRC(uint8_t direction)
{
    DDRC = (DDRC & ~MASK_PORTC) | (direction & MASK_PORTC);
  e2:	97 b1       	in	r25, 0x07	; 7
  e4:	90 7c       	andi	r25, 0xC0	; 192
  e6:	8f 73       	andi	r24, 0x3F	; 63
  e8:	89 2b       	or	r24, r25
  ea:	87 b9       	out	0x07, r24	; 7
  ec:	08 95       	ret

000000ee <GetPortB>:
///////PORT B/////////


uint8_t GetPortB (void)
{
    return(PINB & MASK_PORTB);
  ee:	83 b1       	in	r24, 0x03	; 3
}
  f0:	8f 73       	andi	r24, 0x3F	; 63
  f2:	08 95       	ret

000000f4 <SetPortB>:

void SetPortB(uint8_t x)
{
    PORTB = (PORTB & ~MASK_PORTB) | (x & MASK_PORTB);
  f4:	95 b1       	in	r25, 0x05	; 5
  f6:	90 7c       	andi	r25, 0xC0	; 192
  f8:	8f 73       	andi	r24, 0x3F	; 63
  fa:	89 2b       	or	r24, r25
  fc:	85 b9       	out	0x05, r24	; 5
  fe:	08 95       	ret

00000100 <GetDDRB>:
}

uint8_t GetDDRB(void)
{
    return(DDRB & MASK_PORTB);
 100:	84 b1       	in	r24, 0x04	; 4
}
 102:	8f 73       	andi	r24, 0x3F	; 63
 104:	08 95       	ret

00000106 <SetDDRB>:

void SetDDRB(uint8_t direction)
{
    DDRB = (DDRB & ~MASK_PORTB) | (direction & MASK_PORTB);
 106:	94 b1       	in	r25, 0x04	; 4
 108:	90 7c       	andi	r25, 0xC0	; 192
 10a:	8f 73       	andi	r24, 0x3F	; 63
 10c:	89 2b       	or	r24, r25
 10e:	84 b9       	out	0x04, r24	; 4
 110:	08 95       	ret

00000112 <Timer1_initialize>:
#define xtal 16000000L

static void (*Timer1_Overflow_function)(void) = 0;

void Timer1_initialize ( uint32_t frequency, void (*handle_overflow)(void), uint8_t prescaler )
{
 112:	cf 92       	push	r12
 114:	df 92       	push	r13
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	cf 93       	push	r28
 11c:	6b 01       	movw	r12, r22
 11e:	7c 01       	movw	r14, r24
 120:	c2 2f       	mov	r28, r18
                                      // -  1  8 64 256 1024
    const static uint8_t prescales[] = {0, 0, 3, 6, 8, 10};

    Timer1_Overflow_function = handle_overflow;
 122:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <__data_end+0x1>
 126:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <__data_end>

    TCNT1=0x00;
 12a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 12e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    // set timer0 counter initial value to 0
    // (note: entirely redundant as it was never used before)

    OCR1A = ((uint32_t)(xtal)>>prescales[prescaler]) / frequency - 1;
 132:	e2 2f       	mov	r30, r18
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e0 50       	subi	r30, 0x00	; 0
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	94 e2       	ldi	r25, 0x24	; 36
 13e:	a4 ef       	ldi	r26, 0xF4	; 244
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	bc 01       	movw	r22, r24
 144:	cd 01       	movw	r24, r26
 146:	00 80       	ld	r0, Z
 148:	04 c0       	rjmp	.+8      	; 0x152 <Timer1_initialize+0x40>
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	77 95       	ror	r23
 150:	67 95       	ror	r22
 152:	0a 94       	dec	r0
 154:	d2 f7       	brpl	.-12     	; 0x14a <Timer1_initialize+0x38>
 156:	a7 01       	movw	r20, r14
 158:	96 01       	movw	r18, r12
 15a:	0e 94 9a 02 	call	0x534	; 0x534 <__udivmodsi4>
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	31 09       	sbc	r19, r1
 162:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 166:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    TCCR1A = 0x00;
 16a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // AABBCCMM - lower two bits of 4-bit mode MMMM

    TCCR1B = 0x08 | (0x07 & prescaler);
 16e:	c7 70       	andi	r28, 0x07	; 7
 170:	c8 60       	ori	r28, 0x08	; 8
 172:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    // ??-MMPPP - MM is upper two bits of mode MMMM, PPP is clock rescale
    // where PPP of 011 is clock rescale of 64
    // where MM MM is the Timer mode, we use 01 00 - CTC

    TIFR1  = 0;
 176:	16 ba       	out	0x16, r1	; 22
    // reset any pending Timer1 interrupts
    // (note: entirely redundant as none is pending - it was never used before)

    TIMSK1 = (1<<OCIE1A);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
        //  ICIE1  - enable Timer1 capture interrupt
        //  OCIE1A - enable Timer1 match OCR1A match interrupt
        //  TOIE1  - enable Timer1 overflow interrupt
}
 17e:	cf 91       	pop	r28
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	cf 90       	pop	r12
 188:	08 95       	ret

0000018a <Timer1_shutdown>:

void Timer1_shutdown ()
{
    TIMSK1 &= ~(1<<TOIE1 | 1<<OCIE1A | 1<<OCIE1B | 1<<TOIE1);
 18a:	ef e6       	ldi	r30, 0x6F	; 111
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	88 7f       	andi	r24, 0xF8	; 248
 192:	80 83       	st	Z, r24
    // disable all Timer1 interrupts
    // which is the same effort as disabling just one interrupt but can be reused in other examples

    TCCR1A = 0;
 194:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = 0;
 198:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCCR1C = 0;
 19c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
    TIMSK1 = 0;
 1a0:	10 82       	st	Z, r1
    TIFR1  = 0;
 1a2:	16 ba       	out	0x16, r1	; 22
 1a4:	08 95       	ret

000001a6 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	3f 93       	push	r19
 1b4:	4f 93       	push	r20
 1b6:	5f 93       	push	r21
 1b8:	6f 93       	push	r22
 1ba:	7f 93       	push	r23
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	af 93       	push	r26
 1c2:	bf 93       	push	r27
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
 1c8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 1cc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 1d0:	09 95       	icall
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <LimitSwitchesInit>:
 */

#include "limit_switches.h"

void LimitSwitchesInit() {
    SetDDRD(GetDDRD() & ~LS_ALL);
 1f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <GetDDRD>
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	0e 94 5f 00 	call	0xbe	; 0xbe <SetDDRD>
    SetPortD(GetPortD() | LS_ALL);
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <GetPortD>
 202:	80 6f       	ori	r24, 0xF0	; 240
 204:	0e 94 56 00 	call	0xac	; 0xac <SetPortD>
 208:	08 95       	ret

0000020a <main>:
#define B_ALL   0b00001111

int main(void)
{

    sei();
 20a:	78 94       	sei

    StepperInit();
 20c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <StepperInit>
    SetDDRC(GetDDRC() & ~B_ALL);
 210:	0e 94 6e 00 	call	0xdc	; 0xdc <GetDDRC>
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	0e 94 71 00 	call	0xe2	; 0xe2 <SetDDRC>
    SetPortC(GetPortC() | B_ALL);
 21a:	0e 94 65 00 	call	0xca	; 0xca <GetPortC>
 21e:	8f 60       	ori	r24, 0x0F	; 15
 220:	0e 94 68 00 	call	0xd0	; 0xd0 <SetPortC>


    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;
 224:	0e 94 65 00 	call	0xca	; 0xca <GetPortC>
 228:	e8 2f       	mov	r30, r24

        int32_t steps_x = 0;
        int32_t steps_y = 0;

        if(!(buttons & B_X_NEG)) {
 22a:	80 ff       	sbrs	r24, 0
 22c:	04 c0       	rjmp	.+8      	; 0x236 <main+0x2c>
    /* Replace with your application code */
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int32_t steps_x = 0;
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	cb 01       	movw	r24, r22
 234:	04 c0       	rjmp	.+8      	; 0x23e <main+0x34>
        int32_t steps_y = 0;

        if(!(buttons & B_X_NEG)) {
            steps_x = -20;
 236:	6c ee       	ldi	r22, 0xEC	; 236
 238:	7f ef       	ldi	r23, 0xFF	; 255
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	9f ef       	ldi	r25, 0xFF	; 255
        }
        if(!(buttons & B_X_POS)) {
 23e:	e1 fd       	sbrc	r30, 1
 240:	04 c0       	rjmp	.+8      	; 0x24a <main+0x40>
            steps_x = 20;
 242:	64 e1       	ldi	r22, 0x14	; 20
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
        }
        if(!(buttons & B_Y_NEG)) {
 24a:	e2 ff       	sbrs	r30, 2
 24c:	04 c0       	rjmp	.+8      	; 0x256 <main+0x4c>
    while (1)
    {
        uint8_t buttons = GetPortC() & B_ALL;

        int32_t steps_x = 0;
        int32_t steps_y = 0;
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	04 c0       	rjmp	.+8      	; 0x25e <main+0x54>
        }
        if(!(buttons & B_X_POS)) {
            steps_x = 20;
        }
        if(!(buttons & B_Y_NEG)) {
            steps_y = -20;
 256:	2c ee       	ldi	r18, 0xEC	; 236
 258:	3f ef       	ldi	r19, 0xFF	; 255
 25a:	4f ef       	ldi	r20, 0xFF	; 255
 25c:	5f ef       	ldi	r21, 0xFF	; 255
        }
        if(!(buttons & B_Y_POS)) {
 25e:	e3 fd       	sbrc	r30, 3
 260:	04 c0       	rjmp	.+8      	; 0x26a <main+0x60>
            steps_y = 20;
 262:	24 e1       	ldi	r18, 0x14	; 20
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	50 e0       	ldi	r21, 0x00	; 0
        }

        MoveSteps(steps_x, steps_y);
 26a:	0e 94 77 01 	call	0x2ee	; 0x2ee <MoveSteps>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	89 ef       	ldi	r24, 0xF9	; 249
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x68>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x6e>
 278:	00 00       	nop
 27a:	d4 cf       	rjmp	.-88     	; 0x224 <main+0x1a>

0000027c <PulseFn>:
//Could be made better by placing a lot of this code inside the MoveSteps function
void PulseFn(void) {
    static uint16_t cnt = 0;

    //increment count if still under the max value, otherwise reset
    if(cnt<pwm_res) cnt++;
 27c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cnt.1739>
 280:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cnt.1739+0x1>
 284:	8f 3f       	cpi	r24, 0xFF	; 255
 286:	91 05       	cpc	r25, r1
 288:	30 f4       	brcc	.+12     	; 0x296 <PulseFn+0x1a>
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <cnt.1739+0x1>
 290:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <cnt.1739>
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <PulseFn+0x28>
    else {
        cnt = 0;
 296:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <cnt.1739+0x1>
 29a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <cnt.1739>
        semaphore = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <semaphore>
    }

    //generates the pulse for the percentage of the duty cycle
    if(duty_cycle>cnt) {
 2a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <cnt.1739>
 2a8:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <cnt.1739+0x1>
 2ac:	8f 37       	cpi	r24, 0x7F	; 127
 2ae:	91 05       	cpc	r25, r1
 2b0:	40 f4       	brcc	.+16     	; 0x2c2 <PulseFn+0x46>
        SetPortB(GetPortB() | active_steppers);
 2b2:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 2b6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <active_steppers>
 2ba:	89 2b       	or	r24, r25
 2bc:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 2c0:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~active_steppers);
 2c2:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 2c6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <active_steppers>
 2ca:	90 95       	com	r25
 2cc:	89 23       	and	r24, r25
 2ce:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 2d2:	08 95       	ret

000002d4 <StepperInit>:
}

//sets up the stepper motor pins as outputs
void StepperInit(void)
{
    LimitSwitchesInit();
 2d4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LimitSwitchesInit>
    SetDDRB(GetDDRB() | (STEP_X | STEP_Y) | (DIR_X | DIR_Y));
 2d8:	0e 94 80 00 	call	0x100	; 0x100 <GetDDRB>
 2dc:	8f 60       	ori	r24, 0x0F	; 15
 2de:	0e 94 83 00 	call	0x106	; 0x106 <SetDDRB>
    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
 2e2:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 2e6:	80 7f       	andi	r24, 0xF0	; 240
 2e8:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
 2ec:	08 95       	ret

000002ee <MoveSteps>:

}


//Moves both stepper motors the specified number of steps
void MoveSteps(int32_t steps_x, int32_t steps_y) {
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	cf 93       	push	r28
 300:	49 01       	movw	r8, r18
 302:	5a 01       	movw	r10, r20
    //used to decide which steppers to pulse
    active_steppers = 0;
 304:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <active_steppers>
    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;

    //set x axis active and direction
    if(steps_x != 0) {
 308:	61 15       	cp	r22, r1
 30a:	71 05       	cpc	r23, r1
 30c:	81 05       	cpc	r24, r1
 30e:	91 05       	cpc	r25, r1
 310:	39 f0       	breq	.+14     	; 0x320 <MoveSteps+0x32>
        active_steppers |= STEP_X;
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <active_steppers>
        if(steps_x < 0) {
 318:	99 23       	and	r25, r25
 31a:	24 f0       	brlt	.+8      	; 0x324 <MoveSteps+0x36>
//Moves both stepper motors the specified number of steps
void MoveSteps(int32_t steps_x, int32_t steps_y) {
    //used to decide which steppers to pulse
    active_steppers = 0;
    //assume direction is positive, will set negative if needed later
    uint8_t direction = DIR_X | DIR_Y;
 31c:	ca e0       	ldi	r28, 0x0A	; 10
 31e:	03 c0       	rjmp	.+6      	; 0x326 <MoveSteps+0x38>
 320:	ca e0       	ldi	r28, 0x0A	; 10
 322:	01 c0       	rjmp	.+2      	; 0x326 <MoveSteps+0x38>

    //set x axis active and direction
    if(steps_x != 0) {
        active_steppers |= STEP_X;
        if(steps_x < 0) {
            direction &= ~DIR_X;
 324:	c8 e0       	ldi	r28, 0x08	; 8
        }
    }

    //set y axis active and direction
    if(steps_y != 0) {
 326:	81 14       	cp	r8, r1
 328:	91 04       	cpc	r9, r1
 32a:	a1 04       	cpc	r10, r1
 32c:	b1 04       	cpc	r11, r1
 32e:	41 f0       	breq	.+16     	; 0x340 <MoveSteps+0x52>
        active_steppers |= STEP_Y;
 330:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <active_steppers>
 334:	24 60       	ori	r18, 0x04	; 4
 336:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <active_steppers>
        if(steps_y < 0) {
 33a:	bb 20       	and	r11, r11
 33c:	0c f4       	brge	.+2      	; 0x340 <MoveSteps+0x52>
            direction &= ~DIR_Y;
 33e:	c7 7f       	andi	r28, 0xF7	; 247
        }
    }

    steps_x = fabs(steps_x);
 340:	0e 94 36 02 	call	0x46c	; 0x46c <__floatsisf>
 344:	9f 77       	andi	r25, 0x7F	; 127
 346:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fixsfsi>
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
    steps_y = fabs(steps_y);
 34e:	c5 01       	movw	r24, r10
 350:	b4 01       	movw	r22, r8
 352:	0e 94 36 02 	call	0x46c	; 0x46c <__floatsisf>
 356:	9f 77       	andi	r25, 0x7F	; 127
 358:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__fixsfsi>
 35c:	4b 01       	movw	r8, r22
 35e:	5c 01       	movw	r10, r24



    if(active_steppers) {
 360:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <active_steppers>
 364:	88 23       	and	r24, r24
 366:	31 f0       	breq	.+12     	; 0x374 <MoveSteps+0x86>
        SetPortB((GetPortB() & ~(DIR_X | DIR_Y)) | direction);
 368:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 36c:	85 7f       	andi	r24, 0xF5	; 245
 36e:	8c 2b       	or	r24, r28
 370:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
    }


    Timer1_initialize( timer_freq, &PulseFn, prescaler);
 374:	23 e0       	ldi	r18, 0x03	; 3
 376:	4e e3       	ldi	r20, 0x3E	; 62
 378:	51 e0       	ldi	r21, 0x01	; 1
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	78 ec       	ldi	r23, 0xC8	; 200
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 89 00 	call	0x112	; 0x112 <Timer1_initialize>

    while(1) {
        while(semaphore == 0);
 386:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <semaphore>
 38a:	88 23       	and	r24, r24
 38c:	e1 f3       	breq	.-8      	; 0x386 <MoveSteps+0x98>
        semaphore = 0;
 38e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <semaphore>

        //keeps track of steps and deactivates stepper when number of steps is complete



        if(steps_x != 0) {
 392:	c1 14       	cp	r12, r1
 394:	d1 04       	cpc	r13, r1
 396:	e1 04       	cpc	r14, r1
 398:	f1 04       	cpc	r15, r1
 39a:	31 f0       	breq	.+12     	; 0x3a8 <MoveSteps+0xba>
            steps_x--;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	c8 1a       	sub	r12, r24
 3a0:	d1 08       	sbc	r13, r1
 3a2:	e1 08       	sbc	r14, r1
 3a4:	f1 08       	sbc	r15, r1
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <MoveSteps+0xc4>
        } else {
            active_steppers &= ~STEP_X;
 3a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <active_steppers>
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <active_steppers>
        }


        if(steps_y != 0) {
 3b2:	81 14       	cp	r8, r1
 3b4:	91 04       	cpc	r9, r1
 3b6:	a1 04       	cpc	r10, r1
 3b8:	b1 04       	cpc	r11, r1
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <MoveSteps+0xda>
            steps_y--;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	88 1a       	sub	r8, r24
 3c0:	91 08       	sbc	r9, r1
 3c2:	a1 08       	sbc	r10, r1
 3c4:	b1 08       	sbc	r11, r1
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <MoveSteps+0xe4>
        } else {
            active_steppers &= ~STEP_Y;
 3c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <active_steppers>
 3cc:	8b 7f       	andi	r24, 0xFB	; 251
 3ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <active_steppers>
        }

        //If both steppers are no longer active, job is done so exit
        if(active_steppers == 0) {
 3d2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <active_steppers>
 3d6:	81 11       	cpse	r24, r1
 3d8:	d6 cf       	rjmp	.-84     	; 0x386 <MoveSteps+0x98>
            break;
        }
    }

    SetPortB(GetPortB() & ~((STEP_X | STEP_Y)| (DIR_X | DIR_Y)) );
 3da:	0e 94 77 00 	call	0xee	; 0xee <GetPortB>
 3de:	80 7f       	andi	r24, 0xF0	; 240
 3e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <SetPortB>
    Timer1_shutdown();
 3e4:	0e 94 c5 00 	call	0x18a	; 0x18a <Timer1_shutdown>
}
 3e8:	cf 91       	pop	r28
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	bf 90       	pop	r11
 3f4:	af 90       	pop	r10
 3f6:	9f 90       	pop	r9
 3f8:	8f 90       	pop	r8
 3fa:	08 95       	ret

000003fc <__fixsfsi>:
 3fc:	0e 94 05 02 	call	0x40a	; 0x40a <__fixunssfsi>
 400:	68 94       	set
 402:	b1 11       	cpse	r27, r1
 404:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_szero>
 408:	08 95       	ret

0000040a <__fixunssfsi>:
 40a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__fp_splitA>
 40e:	88 f0       	brcs	.+34     	; 0x432 <__fixunssfsi+0x28>
 410:	9f 57       	subi	r25, 0x7F	; 127
 412:	98 f0       	brcs	.+38     	; 0x43a <__fixunssfsi+0x30>
 414:	b9 2f       	mov	r27, r25
 416:	99 27       	eor	r25, r25
 418:	b7 51       	subi	r27, 0x17	; 23
 41a:	b0 f0       	brcs	.+44     	; 0x448 <__fixunssfsi+0x3e>
 41c:	e1 f0       	breq	.+56     	; 0x456 <__fixunssfsi+0x4c>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	88 1f       	adc	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	1a f0       	brmi	.+6      	; 0x42e <__fixunssfsi+0x24>
 428:	ba 95       	dec	r27
 42a:	c9 f7       	brne	.-14     	; 0x41e <__fixunssfsi+0x14>
 42c:	14 c0       	rjmp	.+40     	; 0x456 <__fixunssfsi+0x4c>
 42e:	b1 30       	cpi	r27, 0x01	; 1
 430:	91 f0       	breq	.+36     	; 0x456 <__fixunssfsi+0x4c>
 432:	0e 94 93 02 	call	0x526	; 0x526 <__fp_zero>
 436:	b1 e0       	ldi	r27, 0x01	; 1
 438:	08 95       	ret
 43a:	0c 94 93 02 	jmp	0x526	; 0x526 <__fp_zero>
 43e:	67 2f       	mov	r22, r23
 440:	78 2f       	mov	r23, r24
 442:	88 27       	eor	r24, r24
 444:	b8 5f       	subi	r27, 0xF8	; 248
 446:	39 f0       	breq	.+14     	; 0x456 <__fixunssfsi+0x4c>
 448:	b9 3f       	cpi	r27, 0xF9	; 249
 44a:	cc f3       	brlt	.-14     	; 0x43e <__fixunssfsi+0x34>
 44c:	86 95       	lsr	r24
 44e:	77 95       	ror	r23
 450:	67 95       	ror	r22
 452:	b3 95       	inc	r27
 454:	d9 f7       	brne	.-10     	; 0x44c <__fixunssfsi+0x42>
 456:	3e f4       	brtc	.+14     	; 0x466 <__fixunssfsi+0x5c>
 458:	90 95       	com	r25
 45a:	80 95       	com	r24
 45c:	70 95       	com	r23
 45e:	61 95       	neg	r22
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	08 95       	ret

00000468 <__floatunsisf>:
 468:	e8 94       	clt
 46a:	09 c0       	rjmp	.+18     	; 0x47e <__floatsisf+0x12>

0000046c <__floatsisf>:
 46c:	97 fb       	bst	r25, 7
 46e:	3e f4       	brtc	.+14     	; 0x47e <__floatsisf+0x12>
 470:	90 95       	com	r25
 472:	80 95       	com	r24
 474:	70 95       	com	r23
 476:	61 95       	neg	r22
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	99 23       	and	r25, r25
 480:	a9 f0       	breq	.+42     	; 0x4ac <__floatsisf+0x40>
 482:	f9 2f       	mov	r31, r25
 484:	96 e9       	ldi	r25, 0x96	; 150
 486:	bb 27       	eor	r27, r27
 488:	93 95       	inc	r25
 48a:	f6 95       	lsr	r31
 48c:	87 95       	ror	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f1 11       	cpse	r31, r1
 496:	f8 cf       	rjmp	.-16     	; 0x488 <__floatsisf+0x1c>
 498:	fa f4       	brpl	.+62     	; 0x4d8 <__floatsisf+0x6c>
 49a:	bb 0f       	add	r27, r27
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__floatsisf+0x36>
 49e:	60 ff       	sbrs	r22, 0
 4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__floatsisf+0x6c>
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	8f 4f       	sbci	r24, 0xFF	; 255
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	16 c0       	rjmp	.+44     	; 0x4d8 <__floatsisf+0x6c>
 4ac:	88 23       	and	r24, r24
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <__floatsisf+0x48>
 4b0:	96 e9       	ldi	r25, 0x96	; 150
 4b2:	11 c0       	rjmp	.+34     	; 0x4d6 <__floatsisf+0x6a>
 4b4:	77 23       	and	r23, r23
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <__floatsisf+0x54>
 4b8:	9e e8       	ldi	r25, 0x8E	; 142
 4ba:	87 2f       	mov	r24, r23
 4bc:	76 2f       	mov	r23, r22
 4be:	05 c0       	rjmp	.+10     	; 0x4ca <__floatsisf+0x5e>
 4c0:	66 23       	and	r22, r22
 4c2:	71 f0       	breq	.+28     	; 0x4e0 <__floatsisf+0x74>
 4c4:	96 e8       	ldi	r25, 0x86	; 134
 4c6:	86 2f       	mov	r24, r22
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	2a f0       	brmi	.+10     	; 0x4d8 <__floatsisf+0x6c>
 4ce:	9a 95       	dec	r25
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	da f7       	brpl	.-10     	; 0x4ce <__floatsisf+0x62>
 4d8:	88 0f       	add	r24, r24
 4da:	96 95       	lsr	r25
 4dc:	87 95       	ror	r24
 4de:	97 f9       	bld	r25, 7
 4e0:	08 95       	ret

000004e2 <__fp_split3>:
 4e2:	57 fd       	sbrc	r21, 7
 4e4:	90 58       	subi	r25, 0x80	; 128
 4e6:	44 0f       	add	r20, r20
 4e8:	55 1f       	adc	r21, r21
 4ea:	59 f0       	breq	.+22     	; 0x502 <__fp_splitA+0x10>
 4ec:	5f 3f       	cpi	r21, 0xFF	; 255
 4ee:	71 f0       	breq	.+28     	; 0x50c <__fp_splitA+0x1a>
 4f0:	47 95       	ror	r20

000004f2 <__fp_splitA>:
 4f2:	88 0f       	add	r24, r24
 4f4:	97 fb       	bst	r25, 7
 4f6:	99 1f       	adc	r25, r25
 4f8:	61 f0       	breq	.+24     	; 0x512 <__fp_splitA+0x20>
 4fa:	9f 3f       	cpi	r25, 0xFF	; 255
 4fc:	79 f0       	breq	.+30     	; 0x51c <__fp_splitA+0x2a>
 4fe:	87 95       	ror	r24
 500:	08 95       	ret
 502:	12 16       	cp	r1, r18
 504:	13 06       	cpc	r1, r19
 506:	14 06       	cpc	r1, r20
 508:	55 1f       	adc	r21, r21
 50a:	f2 cf       	rjmp	.-28     	; 0x4f0 <__fp_split3+0xe>
 50c:	46 95       	lsr	r20
 50e:	f1 df       	rcall	.-30     	; 0x4f2 <__fp_splitA>
 510:	08 c0       	rjmp	.+16     	; 0x522 <__fp_splitA+0x30>
 512:	16 16       	cp	r1, r22
 514:	17 06       	cpc	r1, r23
 516:	18 06       	cpc	r1, r24
 518:	99 1f       	adc	r25, r25
 51a:	f1 cf       	rjmp	.-30     	; 0x4fe <__fp_splitA+0xc>
 51c:	86 95       	lsr	r24
 51e:	71 05       	cpc	r23, r1
 520:	61 05       	cpc	r22, r1
 522:	08 94       	sec
 524:	08 95       	ret

00000526 <__fp_zero>:
 526:	e8 94       	clt

00000528 <__fp_szero>:
 528:	bb 27       	eor	r27, r27
 52a:	66 27       	eor	r22, r22
 52c:	77 27       	eor	r23, r23
 52e:	cb 01       	movw	r24, r22
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret

00000534 <__udivmodsi4>:
 534:	a1 e2       	ldi	r26, 0x21	; 33
 536:	1a 2e       	mov	r1, r26
 538:	aa 1b       	sub	r26, r26
 53a:	bb 1b       	sub	r27, r27
 53c:	fd 01       	movw	r30, r26
 53e:	0d c0       	rjmp	.+26     	; 0x55a <__udivmodsi4_ep>

00000540 <__udivmodsi4_loop>:
 540:	aa 1f       	adc	r26, r26
 542:	bb 1f       	adc	r27, r27
 544:	ee 1f       	adc	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	a2 17       	cp	r26, r18
 54a:	b3 07       	cpc	r27, r19
 54c:	e4 07       	cpc	r30, r20
 54e:	f5 07       	cpc	r31, r21
 550:	20 f0       	brcs	.+8      	; 0x55a <__udivmodsi4_ep>
 552:	a2 1b       	sub	r26, r18
 554:	b3 0b       	sbc	r27, r19
 556:	e4 0b       	sbc	r30, r20
 558:	f5 0b       	sbc	r31, r21

0000055a <__udivmodsi4_ep>:
 55a:	66 1f       	adc	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	1a 94       	dec	r1
 564:	69 f7       	brne	.-38     	; 0x540 <__udivmodsi4_loop>
 566:	60 95       	com	r22
 568:	70 95       	com	r23
 56a:	80 95       	com	r24
 56c:	90 95       	com	r25
 56e:	9b 01       	movw	r18, r22
 570:	ac 01       	movw	r20, r24
 572:	bd 01       	movw	r22, r26
 574:	cf 01       	movw	r24, r30
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
