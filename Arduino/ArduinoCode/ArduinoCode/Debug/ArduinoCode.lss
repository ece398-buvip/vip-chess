
ArduinoCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000025c  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008da  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ae  00000000  00000000  00001431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b0  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  9e:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Timer1_initialize>:

    TCCR1A = 0;
    TCCR1B = 0;
    TCCR1C = 0;
    TIMSK1 = 0;
    TIFR1  = 0;
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	6b 01       	movw	r12, r22
  b2:	7c 01       	movw	r14, r24
  b4:	c2 2f       	mov	r28, r18
  b6:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <__data_end+0x1>
  ba:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <__data_end>
  be:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  c6:	e2 2f       	mov	r30, r18
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ee 5f       	subi	r30, 0xFE	; 254
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	94 e2       	ldi	r25, 0x24	; 36
  d2:	a4 ef       	ldi	r26, 0xF4	; 244
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	bc 01       	movw	r22, r24
  d8:	cd 01       	movw	r24, r26
  da:	00 80       	ld	r0, Z
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <Timer1_initialize+0x40>
  de:	96 95       	lsr	r25
  e0:	87 95       	ror	r24
  e2:	77 95       	ror	r23
  e4:	67 95       	ror	r22
  e6:	0a 94       	dec	r0
  e8:	d2 f7       	brpl	.-12     	; 0xde <Timer1_initialize+0x38>
  ea:	a7 01       	movw	r20, r14
  ec:	96 01       	movw	r18, r12
  ee:	0e 94 0a 01 	call	0x214	; 0x214 <__udivmodsi4>
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	31 09       	sbc	r19, r1
  f6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 102:	c7 70       	andi	r28, 0x07	; 7
 104:	c8 60       	ori	r28, 0x08	; 8
 106:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 10a:	16 ba       	out	0x16, r1	; 22
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 112:	cf 91       	pop	r28
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	cf 90       	pop	r12
 11c:	08 95       	ret

0000011e <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
    // Note:    if time is critical (high frequency interrupt that
    //          is optimized for speed then put the code here
    //          instead of calling it in another function
    Timer1_Overflow_function();
 140:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <__data_end>
 144:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <__data_end+0x1>
 148:	09 95       	icall
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <GetPortB>:



uint8_t GetPortB (void)
{
    return(PINB & 0b00111111);
 16c:	83 b1       	in	r24, 0x03	; 3
}
 16e:	8f 73       	andi	r24, 0x3F	; 63
 170:	08 95       	ret

00000172 <SetPortB>:

void SetPortB(uint8_t x) {
    PORTB = (PORTB & 0b11000000) | (x & 0b00111111);
 172:	95 b1       	in	r25, 0x05	; 5
 174:	90 7c       	andi	r25, 0xC0	; 192
 176:	8f 73       	andi	r24, 0x3F	; 63
 178:	89 2b       	or	r24, r25
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	08 95       	ret

0000017e <fn>:

void fn(void) {
    static uint16_t cnt = 0;
    static uint16_t pwm = 0;

    if(cnt<312) cnt++;
 17e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt.1618>
 182:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt.1618+0x1>
 186:	88 33       	cpi	r24, 0x38	; 56
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	92 07       	cpc	r25, r18
 18c:	30 f4       	brcc	.+12     	; 0x19a <fn+0x1c>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cnt.1618+0x1>
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt.1618>
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <fn+0x3a>
    else {
        cnt = 0;
 19a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cnt.1618+0x1>
 19e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt.1618>
        semaphore = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <semaphore>
        pwm = duty_cycle;
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <pwm.1619+0x1>
 1b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <pwm.1619>
    }

    if(pwm>cnt) {
 1b8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <pwm.1619>
 1bc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <pwm.1619+0x1>
 1c0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt.1618>
 1c4:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cnt.1618+0x1>
 1c8:	82 17       	cp	r24, r18
 1ca:	93 07       	cpc	r25, r19
 1cc:	30 f4       	brcc	.+12     	; 0x1da <fn+0x5c>
        SetPortB(GetPortB() | Stepper1);
 1ce:	0e 94 b6 00 	call	0x16c	; 0x16c <GetPortB>
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	0e 94 b9 00 	call	0x172	; 0x172 <SetPortB>
 1d8:	08 95       	ret
    } else {
        SetPortB(GetPortB() & ~Stepper1);
 1da:	0e 94 b6 00 	call	0x16c	; 0x16c <GetPortB>
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	0e 94 b9 00 	call	0x172	; 0x172 <SetPortB>
 1e4:	08 95       	ret

000001e6 <main>:
}


int main(void)
{
    DDRB |= 0b00000001;
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	84 b9       	out	0x04, r24	; 4
    PORTB |= 0b00000001;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	85 b9       	out	0x05, r24	; 5

    Timer1_initialize( 51200, &fn, timer_prescale_256);
 1f2:	24 e0       	ldi	r18, 0x04	; 4
 1f4:	4f eb       	ldi	r20, 0xBF	; 191
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	78 ec       	ldi	r23, 0xC8	; 200
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer1_initialize>
    sei();
 204:	78 94       	sei

    /* Replace with your application code */
    while (1)
    {

        while(semaphore == 0);
 206:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <semaphore>
 20a:	88 23       	and	r24, r24
 20c:	e1 f3       	breq	.-8      	; 0x206 <main+0x20>
        semaphore = 0;
 20e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <semaphore>


    }
 212:	f9 cf       	rjmp	.-14     	; 0x206 <main+0x20>

00000214 <__udivmodsi4>:
 214:	a1 e2       	ldi	r26, 0x21	; 33
 216:	1a 2e       	mov	r1, r26
 218:	aa 1b       	sub	r26, r26
 21a:	bb 1b       	sub	r27, r27
 21c:	fd 01       	movw	r30, r26
 21e:	0d c0       	rjmp	.+26     	; 0x23a <__udivmodsi4_ep>

00000220 <__udivmodsi4_loop>:
 220:	aa 1f       	adc	r26, r26
 222:	bb 1f       	adc	r27, r27
 224:	ee 1f       	adc	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	a2 17       	cp	r26, r18
 22a:	b3 07       	cpc	r27, r19
 22c:	e4 07       	cpc	r30, r20
 22e:	f5 07       	cpc	r31, r21
 230:	20 f0       	brcs	.+8      	; 0x23a <__udivmodsi4_ep>
 232:	a2 1b       	sub	r26, r18
 234:	b3 0b       	sbc	r27, r19
 236:	e4 0b       	sbc	r30, r20
 238:	f5 0b       	sbc	r31, r21

0000023a <__udivmodsi4_ep>:
 23a:	66 1f       	adc	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a 94       	dec	r1
 244:	69 f7       	brne	.-38     	; 0x220 <__udivmodsi4_loop>
 246:	60 95       	com	r22
 248:	70 95       	com	r23
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	9b 01       	movw	r18, r22
 250:	ac 01       	movw	r20, r24
 252:	bd 01       	movw	r22, r26
 254:	cf 01       	movw	r24, r30
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
